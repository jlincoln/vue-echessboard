(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["VueEchessboard"] = factory();
	else
		root["VueEchessboard"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 22);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _Array$prototype;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeSquareCenter = exports.createEl = exports.isRightButton = exports.eventPosition = exports.setVisible = exports.translateRel = exports.translateAbs = exports.posToTranslateRel = exports.posToTranslateAbs = exports.samePiece = exports.distanceSq = exports.opposite = exports.timer = exports.memo = exports.allPos = exports.key2pos = exports.pos2key = exports.allKeys = exports.invRanks = void 0;\nvar cg = __webpack_require__(4);\nexports.invRanks = [].concat(_toConsumableArray(cg.ranks)).reverse();\nexports.allKeys = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, _toConsumableArray(cg.files.map(function (c) {\n    return cg.ranks.map(function (r) {\n        return c + r;\n    });\n})));\nexports.pos2key = function (pos) {\n    return exports.allKeys[8 * pos[0] + pos[1]];\n};\nexports.key2pos = function (k) {\n    return [k.charCodeAt(0) - 97, k.charCodeAt(1) - 49];\n};\nexports.allPos = exports.allKeys.map(exports.key2pos);\nfunction memo(f) {\n    var v = void 0;\n    var ret = function ret() {\n        if (v === undefined) v = f();\n        return v;\n    };\n    ret.clear = function () {\n        v = undefined;\n    };\n    return ret;\n}\nexports.memo = memo;\nexports.timer = function () {\n    var startAt = void 0;\n    return {\n        start: function start() {\n            startAt = performance.now();\n        },\n        cancel: function cancel() {\n            startAt = undefined;\n        },\n        stop: function stop() {\n            if (!startAt) return 0;\n            var time = performance.now() - startAt;\n            startAt = undefined;\n            return time;\n        }\n    };\n};\nexports.opposite = function (c) {\n    return c === 'white' ? 'black' : 'white';\n};\nexports.distanceSq = function (pos1, pos2) {\n    var dx = pos1[0] - pos2[0],\n        dy = pos1[1] - pos2[1];\n    return dx * dx + dy * dy;\n};\nexports.samePiece = function (p1, p2) {\n    return p1.role === p2.role && p1.color === p2.color;\n};\nvar posToTranslateBase = function posToTranslateBase(pos, asWhite, xFactor, yFactor) {\n    return [(asWhite ? pos[0] : 7 - pos[0]) * xFactor, (asWhite ? 7 - pos[1] : pos[1]) * yFactor];\n};\nexports.posToTranslateAbs = function (bounds) {\n    var xFactor = bounds.width / 8,\n        yFactor = bounds.height / 8;\n    return function (pos, asWhite) {\n        return posToTranslateBase(pos, asWhite, xFactor, yFactor);\n    };\n};\nexports.posToTranslateRel = function (pos, asWhite) {\n    return posToTranslateBase(pos, asWhite, 100, 100);\n};\nexports.translateAbs = function (el, pos) {\n    el.style.transform = \"translate(\" + pos[0] + \"px,\" + pos[1] + \"px)\";\n};\nexports.translateRel = function (el, percents) {\n    el.style.transform = \"translate(\" + percents[0] + \"%,\" + percents[1] + \"%)\";\n};\nexports.setVisible = function (el, v) {\n    el.style.visibility = v ? 'visible' : 'hidden';\n};\nexports.eventPosition = function (e) {\n    var _a;\n    if (e.clientX || e.clientX === 0) return [e.clientX, e.clientY];\n    if ((_a = e.targetTouches) === null || _a === void 0 ? void 0 : _a[0]) return [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\n    return;\n};\nexports.isRightButton = function (e) {\n    return e.buttons === 2 || e.button === 2;\n};\nexports.createEl = function (tagName, className) {\n    var el = document.createElement(tagName);\n    if (className) el.className = className;\n    return el;\n};\nfunction computeSquareCenter(key, asWhite, bounds) {\n    var pos = exports.key2pos(key);\n    if (!asWhite) {\n        pos[0] = 7 - pos[0];\n        pos[1] = 7 - pos[1];\n    }\n    return [bounds.left + bounds.width * pos[0] / 8 + bounds.width / 16, bounds.top + bounds.height * (7 - pos[1]) / 8 + bounds.height / 16];\n}\nexports.computeSquareCenter = computeSquareCenter;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VjaGVzc2dyb3VuZC91dGlsLmpzP2I5MjYiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb21wdXRlU3F1YXJlQ2VudGVyIiwiY3JlYXRlRWwiLCJpc1JpZ2h0QnV0dG9uIiwiZXZlbnRQb3NpdGlvbiIsInNldFZpc2libGUiLCJ0cmFuc2xhdGVSZWwiLCJ0cmFuc2xhdGVBYnMiLCJwb3NUb1RyYW5zbGF0ZVJlbCIsInBvc1RvVHJhbnNsYXRlQWJzIiwic2FtZVBpZWNlIiwiZGlzdGFuY2VTcSIsIm9wcG9zaXRlIiwidGltZXIiLCJtZW1vIiwiYWxsUG9zIiwia2V5MnBvcyIsInBvczJrZXkiLCJhbGxLZXlzIiwiaW52UmFua3MiLCJjZyIsInJlcXVpcmUiLCJyYW5rcyIsInJldmVyc2UiLCJwcm90b3R5cGUiLCJjb25jYXQiLCJmaWxlcyIsIm1hcCIsImMiLCJyIiwicG9zIiwiayIsImNoYXJDb2RlQXQiLCJmIiwidiIsInJldCIsInVuZGVmaW5lZCIsImNsZWFyIiwic3RhcnRBdCIsInN0YXJ0IiwicGVyZm9ybWFuY2UiLCJub3ciLCJjYW5jZWwiLCJzdG9wIiwidGltZSIsInBvczEiLCJwb3MyIiwiZHgiLCJkeSIsInAxIiwicDIiLCJyb2xlIiwiY29sb3IiLCJwb3NUb1RyYW5zbGF0ZUJhc2UiLCJhc1doaXRlIiwieEZhY3RvciIsInlGYWN0b3IiLCJib3VuZHMiLCJ3aWR0aCIsImhlaWdodCIsImVsIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJwZXJjZW50cyIsInZpc2liaWxpdHkiLCJlIiwiX2EiLCJjbGllbnRYIiwiY2xpZW50WSIsInRhcmdldFRvdWNoZXMiLCJidXR0b25zIiwiYnV0dG9uIiwidGFnTmFtZSIsImNsYXNzTmFtZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImtleSIsImxlZnQiLCJ0b3AiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFDQUEs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RyxRQUFSLEdBQW1CLFVBQUNzRSxPQUFELEVBQVVDLFNBQVYsRUFBd0I7QUFDdkMsUUFBTWIsS0FBS2MsU0FBU0MsYUFBVCxDQUF1QkgsT0FBdkIsQ0FBWDtBQUNBLFFBQUlDLFNBQUosRUFDSWIsR0FBR2EsU0FBSCxHQUFlQSxTQUFmO0FBQ0osV0FBT2IsRUFBUDtBQUNILENBTEQ7QUFNQSxTQUFTM0QsbUJBQVQsQ0FBNkIyRSxHQUE3QixFQUFrQ3RCLE9BQWxDLEVBQTJDRyxNQUEzQyxFQUFtRDtBQUMvQyxRQUFNM0IsTUFBTS9CLFFBQVFpQixPQUFSLENBQWdCNEQsR0FBaEIsQ0FBWjtBQUNBLFFBQUksQ0FBQ3RCLE9BQUwsRUFBYztBQUNWeEIsWUFBSSxDQUFKLElBQVMsSUFBSUEsSUFBSSxDQUFKLENBQWI7QUFDQUEsWUFBSSxDQUFKLElBQVMsSUFBSUEsSUFBSSxDQUFKLENBQWI7QUFDSDtBQUNELFdBQU8sQ0FDSDJCLE9BQU9vQixJQUFQLEdBQWNwQixPQUFPQyxLQUFQLEdBQWU1QixJQUFJLENBQUosQ0FBZixHQUF3QixDQUF0QyxHQUEwQzJCLE9BQU9DLEtBQVAsR0FBZSxFQUR0RCxFQUVIRCxPQUFPcUIsR0FBUCxHQUFhckIsT0FBT0UsTUFBUCxJQUFpQixJQUFJN0IsSUFBSSxDQUFKLENBQXJCLElBQStCLENBQTVDLEdBQWdEMkIsT0FBT0UsTUFBUCxHQUFnQixFQUY3RCxDQUFQO0FBSUg7QUFDRDVELFFBQVFFLG1CQUFSLEdBQThCQSxtQkFBOUI7QUFDQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbXB1dGVTcXVhcmVDZW50ZXIgPSBleHBvcnRzLmNyZWF0ZUVsID0gZXhwb3J0cy5pc1JpZ2h0QnV0dG9uID0gZXhwb3J0cy5ldmVudFBvc2l0aW9uID0gZXhwb3J0cy5zZXRWaXNpYmxlID0gZXhwb3J0cy50cmFuc2xhdGVSZWwgPSBleHBvcnRzLnRyYW5zbGF0ZUFicyA9IGV4cG9ydHMucG9zVG9UcmFuc2xhdGVSZWwgPSBleHBvcnRzLnBvc1RvVHJhbnNsYXRlQWJzID0gZXhwb3J0cy5zYW1lUGllY2UgPSBleHBvcnRzLmRpc3RhbmNlU3EgPSBleHBvcnRzLm9wcG9zaXRlID0gZXhwb3J0cy50aW1lciA9IGV4cG9ydHMubWVtbyA9IGV4cG9ydHMuYWxsUG9zID0gZXhwb3J0cy5rZXkycG9zID0gZXhwb3J0cy5wb3Mya2V5ID0gZXhwb3J0cy5hbGxLZXlzID0gZXhwb3J0cy5pbnZSYW5rcyA9IHZvaWQgMDtcbmNvbnN0IGNnID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5leHBvcnRzLmludlJhbmtzID0gWy4uLmNnLnJhbmtzXS5yZXZlcnNlKCk7XG5leHBvcnRzLmFsbEtleXMgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0KC4uLmNnLmZpbGVzLm1hcChjID0+IGNnLnJhbmtzLm1hcChyID0+IGMgKyByKSkpO1xuZXhwb3J0cy5wb3Mya2V5ID0gKHBvcykgPT4gZXhwb3J0cy5hbGxLZXlzWzggKiBwb3NbMF0gKyBwb3NbMV1dO1xuZXhwb3J0cy5rZXkycG9zID0gKGspID0+IFtrLmNoYXJDb2RlQXQoMCkgLSA5Nywgay5jaGFyQ29kZUF0KDEpIC0gNDldO1xuZXhwb3J0cy5hbGxQb3MgPSBleHBvcnRzLmFsbEtleXMubWFwKGV4cG9ydHMua2V5MnBvcyk7XG5mdW5jdGlvbiBtZW1vKGYpIHtcbiAgICBsZXQgdjtcbiAgICBjb25zdCByZXQgPSAoKSA9PiB7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB2ID0gZigpO1xuICAgICAgICByZXR1cm4gdjtcbiAgICB9O1xuICAgIHJldC5jbGVhciA9ICgpID0+IHsgdiA9IHVuZGVmaW5lZDsgfTtcbiAgICByZXR1cm4gcmV0O1xufVxuZXhwb3J0cy5tZW1vID0gbWVtbztcbmV4cG9ydHMudGltZXIgPSAoKSA9PiB7XG4gICAgbGV0IHN0YXJ0QXQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQoKSB7IHN0YXJ0QXQgPSBwZXJmb3JtYW5jZS5ub3coKTsgfSxcbiAgICAgICAgY2FuY2VsKCkgeyBzdGFydEF0ID0gdW5kZWZpbmVkOyB9LFxuICAgICAgICBzdG9wKCkge1xuICAgICAgICAgICAgaWYgKCFzdGFydEF0KVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgY29uc3QgdGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRBdDtcbiAgICAgICAgICAgIHN0YXJ0QXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gdGltZTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuZXhwb3J0cy5vcHBvc2l0ZSA9IChjKSA9PiBjID09PSAnd2hpdGUnID8gJ2JsYWNrJyA6ICd3aGl0ZSc7XG5leHBvcnRzLmRpc3RhbmNlU3EgPSAocG9zMSwgcG9zMikgPT4ge1xuICAgIGNvbnN0IGR4ID0gcG9zMVswXSAtIHBvczJbMF0sIGR5ID0gcG9zMVsxXSAtIHBvczJbMV07XG4gICAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xufTtcbmV4cG9ydHMuc2FtZVBpZWNlID0gKHAxLCBwMikgPT4gcDEucm9sZSA9PT0gcDIucm9sZSAmJiBwMS5jb2xvciA9PT0gcDIuY29sb3I7XG5jb25zdCBwb3NUb1RyYW5zbGF0ZUJhc2UgPSAocG9zLCBhc1doaXRlLCB4RmFjdG9yLCB5RmFjdG9yKSA9PiBbXG4gICAgKGFzV2hpdGUgPyBwb3NbMF0gOiA3IC0gcG9zWzBdKSAqIHhGYWN0b3IsXG4gICAgKGFzV2hpdGUgPyA3IC0gcG9zWzFdIDogcG9zWzFdKSAqIHlGYWN0b3Jcbl07XG5leHBvcnRzLnBvc1RvVHJhbnNsYXRlQWJzID0gKGJvdW5kcykgPT4ge1xuICAgIGNvbnN0IHhGYWN0b3IgPSBib3VuZHMud2lkdGggLyA4LCB5RmFjdG9yID0gYm91bmRzLmhlaWdodCAvIDg7XG4gICAgcmV0dXJuIChwb3MsIGFzV2hpdGUpID0+IHBvc1RvVHJhbnNsYXRlQmFzZShwb3MsIGFzV2hpdGUsIHhGYWN0b3IsIHlGYWN0b3IpO1xufTtcbmV4cG9ydHMucG9zVG9UcmFuc2xhdGVSZWwgPSAocG9zLCBhc1doaXRlKSA9PiBwb3NUb1RyYW5zbGF0ZUJhc2UocG9zLCBhc1doaXRlLCAxMDAsIDEwMCk7XG5leHBvcnRzLnRyYW5zbGF0ZUFicyA9IChlbCwgcG9zKSA9PiB7XG4gICAgZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke3Bvc1swXX1weCwke3Bvc1sxXX1weClgO1xufTtcbmV4cG9ydHMudHJhbnNsYXRlUmVsID0gKGVsLCBwZXJjZW50cykgPT4ge1xuICAgIGVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHtwZXJjZW50c1swXX0lLCR7cGVyY2VudHNbMV19JSlgO1xufTtcbmV4cG9ydHMuc2V0VmlzaWJsZSA9IChlbCwgdikgPT4ge1xuICAgIGVsLnN0eWxlLnZpc2liaWxpdHkgPSB2ID8gJ3Zpc2libGUnIDogJ2hpZGRlbic7XG59O1xuZXhwb3J0cy5ldmVudFBvc2l0aW9uID0gKGUpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGUuY2xpZW50WCB8fCBlLmNsaWVudFggPT09IDApXG4gICAgICAgIHJldHVybiBbZS5jbGllbnRYLCBlLmNsaWVudFldO1xuICAgIGlmICgoX2EgPSBlLnRhcmdldFRvdWNoZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVswXSlcbiAgICAgICAgcmV0dXJuIFtlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WCwgZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFldO1xuICAgIHJldHVybjtcbn07XG5leHBvcnRzLmlzUmlnaHRCdXR0b24gPSAoZSkgPT4gZS5idXR0b25zID09PSAyIHx8IGUuYnV0dG9uID09PSAyO1xuZXhwb3J0cy5jcmVhdGVFbCA9ICh0YWdOYW1lLCBjbGFzc05hbWUpID0+IHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgaWYgKGNsYXNzTmFtZSlcbiAgICAgICAgZWwuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgIHJldHVybiBlbDtcbn07XG5mdW5jdGlvbiBjb21wdXRlU3F1YXJlQ2VudGVyKGtleSwgYXNXaGl0ZSwgYm91bmRzKSB7XG4gICAgY29uc3QgcG9zID0gZXhwb3J0cy5rZXkycG9zKGtleSk7XG4gICAgaWYgKCFhc1doaXRlKSB7XG4gICAgICAgIHBvc1swXSA9IDcgLSBwb3NbMF07XG4gICAgICAgIHBvc1sxXSA9IDcgLSBwb3NbMV07XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIGJvdW5kcy5sZWZ0ICsgYm91bmRzLndpZHRoICogcG9zWzBdIC8gOCArIGJvdW5kcy53aWR0aCAvIDE2LFxuICAgICAgICBib3VuZHMudG9wICsgYm91bmRzLmhlaWdodCAqICg3IC0gcG9zWzFdKSAvIDggKyBib3VuZHMuaGVpZ2h0IC8gMTZcbiAgICBdO1xufVxuZXhwb3J0cy5jb21wdXRlU3F1YXJlQ2VudGVyID0gY29tcHV0ZVNxdWFyZUNlbnRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9lY2hlc3Nncm91bmQvdXRpbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.whitePov = exports.getSnappedKeyAtDomPos = exports.getKeyAtDomPos = exports.stop = exports.cancelMove = exports.playPredrop = exports.playPremove = exports.isDraggable = exports.canMove = exports.unselect = exports.setSelected = exports.selectSquare = exports.dropNewPiece = exports.userMove = exports.baseNewPiece = exports.baseMove = exports.unsetPredrop = exports.unsetPremove = exports.setCheck = exports.setPieces = exports.reset = exports.toggleOrientation = exports.callUserFunction = void 0;\nvar util_1 = __webpack_require__(0);\nvar premove_1 = __webpack_require__(17);\nfunction callUserFunction(f) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n    }\n\n    if (f) setTimeout(function () {\n        return f.apply(undefined, args);\n    }, 1);\n}\nexports.callUserFunction = callUserFunction;\nfunction toggleOrientation(state) {\n    state.orientation = util_1.opposite(state.orientation);\n    state.animation.current = state.draggable.current = state.selected = undefined;\n}\nexports.toggleOrientation = toggleOrientation;\nfunction reset(state) {\n    state.lastMove = undefined;\n    unselect(state);\n    unsetPremove(state);\n    unsetPredrop(state);\n}\nexports.reset = reset;\nfunction setPieces(state, pieces) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = pieces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                piece = _step$value[1];\n\n            if (piece) state.pieces.set(key, piece);else state.pieces.delete(key);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nexports.setPieces = setPieces;\nfunction setCheck(state, color) {\n    state.check = undefined;\n    if (color === true) color = state.turnColor;\n    if (color) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n            for (var _iterator2 = state.pieces[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var _step2$value = _slicedToArray(_step2.value, 2),\n                    _k = _step2$value[0],\n                    _p = _step2$value[1];\n\n                if (_p.role === 'king' && _p.color === color) {\n                    state.check = _k;\n                }\n            }\n        } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                    _iterator2.return();\n                }\n            } finally {\n                if (_didIteratorError2) {\n                    throw _iteratorError2;\n                }\n            }\n        }\n    }\n}\nexports.setCheck = setCheck;\nfunction setPremove(state, orig, dest, meta) {\n    unsetPredrop(state);\n    state.premovable.current = [orig, dest];\n    callUserFunction(state.premovable.events.set, orig, dest, meta);\n}\nfunction unsetPremove(state) {\n    if (state.premovable.current) {\n        state.premovable.current = undefined;\n        callUserFunction(state.premovable.events.unset);\n    }\n}\nexports.unsetPremove = unsetPremove;\nfunction setPredrop(state, role, key) {\n    unsetPremove(state);\n    state.predroppable.current = { role: role, key: key };\n    callUserFunction(state.predroppable.events.set, role, key);\n}\nfunction unsetPredrop(state) {\n    var pd = state.predroppable;\n    if (pd.current) {\n        pd.current = undefined;\n        callUserFunction(pd.events.unset);\n    }\n}\nexports.unsetPredrop = unsetPredrop;\nfunction tryAutoCastle(state, orig, dest) {\n    if (!state.autoCastle) return false;\n    var king = state.pieces.get(orig);\n    if (!king || king.role !== 'king') return false;\n    var origPos = util_1.key2pos(orig);\n    var destPos = util_1.key2pos(dest);\n    if (origPos[1] !== 0 && origPos[1] !== 7 || origPos[1] !== destPos[1]) return false;\n    if (origPos[0] === 4 && !state.pieces.has(dest)) {\n        if (destPos[0] === 6) dest = util_1.pos2key([7, destPos[1]]);else if (destPos[0] === 2) dest = util_1.pos2key([0, destPos[1]]);\n    }\n    var rook = state.pieces.get(dest);\n    if (!rook || rook.color !== king.color || rook.role !== 'rook') return false;\n    state.pieces.delete(orig);\n    state.pieces.delete(dest);\n    if (origPos[0] < destPos[0]) {\n        state.pieces.set(util_1.pos2key([6, destPos[1]]), king);\n        state.pieces.set(util_1.pos2key([5, destPos[1]]), rook);\n    } else {\n        state.pieces.set(util_1.pos2key([2, destPos[1]]), king);\n        state.pieces.set(util_1.pos2key([3, destPos[1]]), rook);\n    }\n    return true;\n}\nfunction baseMove(state, orig, dest) {\n    var origPiece = state.pieces.get(orig),\n        destPiece = state.pieces.get(dest);\n    if (orig === dest || !origPiece) return false;\n    var captured = destPiece && destPiece.color !== origPiece.color ? destPiece : undefined;\n    if (dest === state.selected) unselect(state);\n    callUserFunction(state.events.move, orig, dest, captured);\n    if (!tryAutoCastle(state, orig, dest)) {\n        state.pieces.set(dest, origPiece);\n        state.pieces.delete(orig);\n    }\n    state.lastMove = [orig, dest];\n    state.check = undefined;\n    callUserFunction(state.events.change);\n    return captured || true;\n}\nexports.baseMove = baseMove;\nfunction baseNewPiece(state, piece, key, force) {\n    if (state.pieces.has(key)) {\n        if (force) state.pieces.delete(key);else return false;\n    }\n    callUserFunction(state.events.dropNewPiece, piece, key);\n    state.pieces.set(key, piece);\n    state.lastMove = [key];\n    state.check = undefined;\n    callUserFunction(state.events.change);\n    state.movable.dests = undefined;\n    state.turnColor = util_1.opposite(state.turnColor);\n    return true;\n}\nexports.baseNewPiece = baseNewPiece;\nfunction baseUserMove(state, orig, dest) {\n    var result = baseMove(state, orig, dest);\n    if (result) {\n        state.movable.dests = undefined;\n        state.turnColor = util_1.opposite(state.turnColor);\n        state.animation.current = undefined;\n    }\n    return result;\n}\nfunction userMove(state, orig, dest) {\n    if (canMove(state, orig, dest)) {\n        var result = baseUserMove(state, orig, dest);\n        if (result) {\n            var holdTime = state.hold.stop();\n            unselect(state);\n            var metadata = {\n                premove: false,\n                ctrlKey: state.stats.ctrlKey,\n                holdTime: holdTime\n            };\n            if (result !== true) metadata.captured = result;\n            callUserFunction(state.movable.events.after, orig, dest, metadata);\n            return true;\n        }\n    } else if (canPremove(state, orig, dest)) {\n        setPremove(state, orig, dest, {\n            ctrlKey: state.stats.ctrlKey\n        });\n        unselect(state);\n        return true;\n    }\n    unselect(state);\n    return false;\n}\nexports.userMove = userMove;\nfunction dropNewPiece(state, orig, dest, force) {\n    var piece = state.pieces.get(orig);\n    if (piece && (canDrop(state, orig, dest) || force)) {\n        state.pieces.delete(orig);\n        baseNewPiece(state, piece, dest, force);\n        callUserFunction(state.movable.events.afterNewPiece, piece.role, dest, {\n            predrop: false\n        });\n    } else if (piece && canPredrop(state, orig, dest)) {\n        setPredrop(state, piece.role, dest);\n    } else {\n        unsetPremove(state);\n        unsetPredrop(state);\n    }\n    state.pieces.delete(orig);\n    unselect(state);\n}\nexports.dropNewPiece = dropNewPiece;\nfunction selectSquare(state, key, force) {\n    callUserFunction(state.events.select, key);\n    if (state.selected) {\n        if (state.selected === key && !state.draggable.enabled) {\n            unselect(state);\n            state.hold.cancel();\n            return;\n        } else if ((state.selectable.enabled || force) && state.selected !== key) {\n            if (userMove(state, state.selected, key)) {\n                state.stats.dragged = false;\n                return;\n            }\n        }\n    }\n    if (isMovable(state, key) || isPremovable(state, key)) {\n        setSelected(state, key);\n        state.hold.start();\n    }\n}\nexports.selectSquare = selectSquare;\nfunction setSelected(state, key) {\n    state.selected = key;\n    if (isPremovable(state, key)) {\n        state.premovable.dests = premove_1.premove(state.pieces, key, state.premovable.castle);\n    } else state.premovable.dests = undefined;\n}\nexports.setSelected = setSelected;\nfunction unselect(state) {\n    state.selected = undefined;\n    state.premovable.dests = undefined;\n    state.hold.cancel();\n}\nexports.unselect = unselect;\nfunction isMovable(state, orig) {\n    var piece = state.pieces.get(orig);\n    return !!piece && (state.movable.color === 'both' || state.movable.color === piece.color && state.turnColor === piece.color);\n}\nfunction canMove(state, orig, dest) {\n    var _a, _b;\n    return orig !== dest && isMovable(state, orig) && (state.movable.free || !!((_b = (_a = state.movable.dests) === null || _a === void 0 ? void 0 : _a.get(orig)) === null || _b === void 0 ? void 0 : _b.includes(dest)));\n}\nexports.canMove = canMove;\nfunction canDrop(state, orig, dest) {\n    var piece = state.pieces.get(orig);\n    return !!piece && (orig === dest || !state.pieces.has(dest)) && (state.movable.color === 'both' || state.movable.color === piece.color && state.turnColor === piece.color);\n}\nfunction isPremovable(state, orig) {\n    var piece = state.pieces.get(orig);\n    return !!piece && state.premovable.enabled && state.movable.color === piece.color && state.turnColor !== piece.color;\n}\nfunction canPremove(state, orig, dest) {\n    return orig !== dest && isPremovable(state, orig) && premove_1.premove(state.pieces, orig, state.premovable.castle).includes(dest);\n}\nfunction canPredrop(state, orig, dest) {\n    var piece = state.pieces.get(orig);\n    var destPiece = state.pieces.get(dest);\n    return !!piece && (!destPiece || destPiece.color !== state.movable.color) && state.predroppable.enabled && (piece.role !== 'pawn' || dest[1] !== '1' && dest[1] !== '8') && state.movable.color === piece.color && state.turnColor !== piece.color;\n}\nfunction isDraggable(state, orig) {\n    var piece = state.pieces.get(orig);\n    return !!piece && state.draggable.enabled && (state.movable.color === 'both' || state.movable.color === piece.color && (state.turnColor === piece.color || state.premovable.enabled));\n}\nexports.isDraggable = isDraggable;\nfunction playPremove(state) {\n    var move = state.premovable.current;\n    if (!move) return false;\n    var orig = move[0],\n        dest = move[1];\n    var success = false;\n    if (canMove(state, orig, dest)) {\n        var result = baseUserMove(state, orig, dest);\n        if (result) {\n            var metadata = { premove: true };\n            if (result !== true) metadata.captured = result;\n            callUserFunction(state.movable.events.after, orig, dest, metadata);\n            success = true;\n        }\n    }\n    unsetPremove(state);\n    return success;\n}\nexports.playPremove = playPremove;\nfunction playPredrop(state, validate) {\n    var drop = state.predroppable.current;\n    var success = false;\n    if (!drop) return false;\n    if (validate(drop)) {\n        var piece = {\n            role: drop.role,\n            color: state.movable.color\n        };\n        if (baseNewPiece(state, piece, drop.key)) {\n            callUserFunction(state.movable.events.afterNewPiece, drop.role, drop.key, {\n                predrop: true\n            });\n            success = true;\n        }\n    }\n    unsetPredrop(state);\n    return success;\n}\nexports.playPredrop = playPredrop;\nfunction cancelMove(state) {\n    unsetPremove(state);\n    unsetPredrop(state);\n    unselect(state);\n}\nexports.cancelMove = cancelMove;\nfunction stop(state) {\n    state.movable.color = state.movable.dests = state.animation.current = undefined;\n    cancelMove(state);\n}\nexports.stop = stop;\nfunction getKeyAtDomPos(pos, asWhite, bounds) {\n    var file = Math.floor(8 * (pos[0] - bounds.left) / bounds.width);\n    if (!asWhite) file = 7 - file;\n    var rank = 7 - Math.floor(8 * (pos[1] - bounds.top) / bounds.height);\n    if (!asWhite) rank = 7 - rank;\n    return file >= 0 && file < 8 && rank >= 0 && rank < 8 ? util_1.pos2key([file, rank]) : undefined;\n}\nexports.getKeyAtDomPos = getKeyAtDomPos;\nfunction getSnappedKeyAtDomPos(orig, pos, asWhite, bounds) {\n    var origPos = util_1.key2pos(orig);\n    var validSnapPos = util_1.allPos.filter(function (pos2) {\n        return premove_1.queen(origPos[0], origPos[1], pos2[0], pos2[1]) || premove_1.knight(origPos[0], origPos[1], pos2[0], pos2[1]);\n    });\n    var validSnapCenters = validSnapPos.map(function (pos2) {\n        return util_1.computeSquareCenter(util_1.pos2key(pos2), asWhite, bounds);\n    });\n    var validSnapDistances = validSnapCenters.map(function (pos2) {\n        return util_1.distanceSq(pos, pos2);\n    });\n\n    var _validSnapDistances$r = validSnapDistances.reduce(function (a, b, index) {\n        return a[0] < b ? a : [b, index];\n    }, [validSnapDistances[0], 0]),\n        _validSnapDistances$r2 = _slicedToArray(_validSnapDistances$r, 2),\n        closestSnapIndex = _validSnapDistances$r2[1];\n\n    return util_1.pos2key(validSnapPos[closestSnapIndex]);\n}\nexports.getSnappedKeyAtDomPos = getSnappedKeyAtDomPos;\nfunction whitePov(s) {\n    return s.orientation === 'white';\n}\nexports.whitePov = whitePov;\n//# sourceMappingURL=board.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VjaGVzc2dyb3VuZC9ib2FyZC5qcz82NzMyIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwid2hpdGVQb3YiLCJnZXRTbmFwcGVkS2V5QXREb21Qb3MiLCJnZXRLZXlBdERvbVBvcyIsInN0b3AiLCJjYW5jZWxNb3ZlIiwicGxheVByZWRyb3AiLCJwbGF5UHJlbW92ZSIsImlzRHJhZ2dhYmxlIiwiY2FuTW92ZSIsInVuc2VsZWN0Iiwic2V0U2VsZWN0ZWQiLCJzZWxlY3RTcXVhcmUiLCJkcm9wTmV3UGllY2UiLCJ1c2VyTW92ZSIsImJhc2VOZXdQaWVjZSIsImJhc2VNb3ZlIiwidW5zZXRQcmVkcm9wIiwidW5zZXRQcmVtb3ZlIiwic2V0Q2hlY2siLCJzZXRQaWVjZXMiLCJyZXNldCIsInRvZ2dsZU9yaWVudGF0aW9uIiwiY2FsbFVzZXJGdW5jdGlvbiIsInV0aWxfMSIsInJlcXVpcmUiLCJwcmVtb3ZlXzEiLCJmIiwiYXJncyIsInNldFRpbWVvdXQiLCJzdGF0ZSIsIm9yaWVudGF0aW9uIiwib3Bwb3NpdGUiLCJhbmltYXRpb24iLCJjdXJyZW50IiwiZHJhZ2dhYmxlIiwic2VsZWN0ZWQiLCJ1bmRlZmluZWQiLCJsYXN0TW92ZSIsInBpZWNlcyIsImtleSIsInBpZWNlIiwic2V0IiwiZGVsZXRlIiwiY29sb3IiLCJjaGVjayIsInR1cm5Db2xvciIsImsiLCJwIiwicm9sZSIsInNldFByZW1vdmUiLCJvcmlnIiwiZGVzdCIsIm1ldGEiLCJwcmVtb3ZhYmxlIiwiZXZlbnRzIiwidW5zZXQiLCJzZXRQcmVkcm9wIiwicHJlZHJvcHBhYmxlIiwicGQiLCJ0cnlBdXRvQ2FzdGxlIiwiYXV0b0Nhc3RsZSIsImtpbmciLCJnZXQiLCJvcmlnUG9zIiwia2V5MnBvcyIsImRlc3RQb3MiLCJoYXMiLCJwb3Mya2V5Iiwicm9vayIsIm9yaWdQaWVjZSIsImRlc3RQaWVjZSIsImNhcHR1cmVkIiwibW92ZSIsImNoYW5nZSIsImZvcmNlIiwibW92YWJsZSIsImRlc3RzIiwiYmFzZVVzZXJNb3ZlIiwicmVzdWx0IiwiaG9sZFRpbWUiLCJob2xkIiwibWV0YWRhdGEiLCJwcmVtb3ZlIiwiY3RybEtleSIsInN0YXRzIiwiYWZ0ZXIiLCJjYW5QcmVtb3ZlIiwiY2FuRHJvcCIsImFmdGVyTmV3UGllY2UiLCJwcmVkcm9wIiwiY2FuUHJlZHJvcCIsInNlbGVjdCIsImVuYWJsZWQiLCJjYW5jZWwiLCJzZWxlY3RhYmxlIiwiZHJhZ2dlZCIsImlzTW92YWJsZSIsImlzUHJlbW92YWJsZSIsInN0YXJ0IiwiY2FzdGxlIiwiX2EiLCJfYiIsImZyZWUiLCJpbmNsdWRlcyIsInN1Y2Nlc3MiLCJ2YWxpZGF0ZSIsImRyb3AiLCJwb3MiLCJhc1doaXRlIiwiYm91bmRzIiwiZmlsZSIsIk1hdGgiLCJmbG9vciIsImxlZnQiLCJ3aWR0aCIsInJhbmsiLCJ0b3AiLCJoZWlnaHQiLCJ2YWxpZFNuYXBQb3MiLCJhbGxQb3MiLCJmaWx0ZXIiLCJxdWVlbiIsInBvczIiLCJrbmlnaHQiLCJ2YWxpZFNuYXBDZW50ZXJzIiwibWFwIiwiY29tcHV0ZVNxdWFyZUNlbnRlciIsInZhbGlkU25hcERpc3RhbmNlcyIsImRpc3RhbmNlU3EiLCJyZWR1Y2UiLCJhIiwiYiIsImluZGV4IiwiY2xvc2VzdFNuYXBJbmRleCIsInMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBRCxRQUFRRSxRQUFSLEdBQW1CRixRQUFRRyxxQkFBUixHQUFnQ0gsUUFBUUksY0FBUixHQUF5QkosUUFBUUssSUFBUixHQUFlTCxRQUFRTSxVQUFSLEdBQXFCTixRQUFRTyxXQUFSLEdBQXNCUCxRQUFRUSxXQUFSLEdBQXNCUixRQUFRUyxXQUFSLEdBQXNCVCxRQUFRVSxPQUFSLEdBQWtCVixRQUFRVyxRQUFSLEdBQW1CWCxRQUFRWSxXQUFSLEdBQXNCWixRQUFRYSxZQUFSLEdBQXVCYixRQUFRYyxZQUFSLEdBQXVCZCxRQUFRZSxRQUFSLEdBQW1CZixRQUFRZ0IsWUFBUixHQUF1QmhCLFFBQVFpQixRQUFSLEdBQW1CakIsUUFBUWtCLFlBQVIsR0FBdUJsQixRQUFRbUIsWUFBUixHQUF1Qm5CLFFBQVFvQixRQUFSLEdBQW1CcEIsUUFBUXFCLFNBQVIsR0FBb0JyQixRQUFRc0IsS0FBUixHQUFnQnRCLFFBQVF1QixpQkFBUixHQUE0QnZCLFFBQVF3QixnQkFBUixHQUEyQixLQUFLLENBQXpmO0FBQ0EsSUFBTUMsU0FBUyxtQkFBQUMsQ0FBUSxDQUFSLENBQWY7QUFDQSxJQUFNQyxZQUFZLG1CQUFBRCxDQUFRLEVBQVIsQ0FBbEI7QUFDQSxTQUFTRixnQkFBVCxDQUEwQkksQ0FBMUIsRUFBc0M7QUFBQSxzQ0FBTkMsSUFBTTtBQUFOQSxZQUFNO0FBQUE7O0FBQ2xDLFFBQUlELENBQUosRUFDSUUsV0FBVztBQUFBLGVBQU1GLG1CQUFLQyxJQUFMLENBQU47QUFBQSxLQUFYLEVBQTZCLENBQTdCO0FBQ1A7QUFDRDdCLFFBQVF3QixnQkFBUixHQUEyQkEsZ0JBQTNCO0FBQ0EsU0FBU0QsaUJBQVQsQ0FBMkJRLEtBQTNCLEVBQWtDO0FBQzlCQSxVQUFNQyxXQUFOLEdBQW9CUCxPQUFPUSxRQUFQLENBQWdCRixNQUFNQyxXQUF0QixDQUFwQjtBQUNBRCxVQUFNRyxTQUFOLENBQWdCQyxPQUFoQixHQUNJSixNQUFNSyxTQUFOLENBQWdCRCxPQUFoQixHQUNJSixNQUFNTSxRQUFOLEdBQWlCQyxTQUZ6QjtBQUdIO0FBQ0R0QyxRQUFRdUIsaUJBQVIsR0FBNEJBLGlCQUE1QjtBQUNBLFNBQVNELEtBQVQsQ0FBZVMsS0FBZixFQUFzQjtBQUNsQkEsVUFBTVEsUUFBTixHQUFpQkQsU0FBakI7QUFDQTNCLGFBQVNvQixLQUFUO0FBQ0FaLGlCQUFhWSxLQUFiO0FBQ0FiLGlCQUFhYSxLQUFiO0FBQ0g7QUFDRC9CLFFBQVFzQixLQUFSLEdBQWdCQSxLQUFoQjtBQUNBLFNBQVNELFNBQVQsQ0FBbUJVLEtBQW5CLEVBQTBCUyxNQUExQixFQUFrQztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUM5Qiw2QkFBMkJBLE1BQTNCLDhIQUFtQztBQUFBO0FBQUEsZ0JBQXZCQyxHQUF1QjtBQUFBLGdCQUFsQkMsS0FBa0I7O0FBQy9CLGdCQUFJQSxLQUFKLEVBQ0lYLE1BQU1TLE1BQU4sQ0FBYUcsR0FBYixDQUFpQkYsR0FBakIsRUFBc0JDLEtBQXRCLEVBREosS0FHSVgsTUFBTVMsTUFBTixDQUFhSSxNQUFiLENBQW9CSCxHQUFwQjtBQUNQO0FBTjZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFPakM7QUFDRHpDLFFBQVFxQixTQUFSLEdBQW9CQSxTQUFwQjtBQUNBLFNBQVNELFFBQVQsQ0FBa0JXLEtBQWxCLEVBQXlCYyxLQUF6QixFQUFnQztBQUM1QmQsVUFBTWUsS0FBTixHQUFjUixTQUFkO0FBQ0EsUUFBSU8sVUFBVSxJQUFkLEVBQ0lBLFFBQVFkLE1BQU1nQixTQUFkO0FBQ0osUUFBSUYsS0FBSjtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUNJLGtDQUFxQmQsTUFBTVMsTUFBM0IsbUlBQW1DO0FBQUE7QUFBQSxvQkFBdkJRLEVBQXVCO0FBQUEsb0JBQXBCQyxFQUFvQjs7QUFDL0Isb0JBQUlBLEdBQUVDLElBQUYsS0FBVyxNQUFYLElBQXFCRCxHQUFFSixLQUFGLEtBQVlBLEtBQXJDLEVBQTRDO0FBQ3hDZCwwQkFBTWUsS0FBTixHQUFjRSxFQUFkO0FBQ0g7QUFDSjtBQUxMO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1IO0FBQ0RoRCxRQUFRb0IsUUFBUixHQUFtQkEsUUFBbkI7QUFDQSxTQUFTK0IsVUFBVCxDQUFvQnBCLEtBQXBCLEVBQTJCcUIsSUFBM0IsRUFBaUNDLElBQWpDLEVBQXVDQyxJQUF2QyxFQUE2QztBQUN6Q3BDLGlCQUFhYSxLQUFiO0FBQ0FBLFVBQU13QixVQUFOLENBQWlCcEIsT0FBakIsR0FBMkIsQ0FBQ2lCLElBQUQsRUFBT0MsSUFBUCxDQUEzQjtBQUNBN0IscUJBQWlCTyxNQUFNd0IsVUFBTixDQUFpQkMsTUFBakIsQ0FBd0JiLEdBQXpDLEVBQThDUyxJQUE5QyxFQUFvREMsSUFBcEQsRUFBMERDLElBQTFEO0FBQ0g7QUFDRCxTQUFTbkMsWUFBVCxDQUFzQlksS0FBdEIsRUFBNkI7QUFDekIsUUFBSUEsTUFBTXdCLFVBQU4sQ0FBaUJwQixPQUFyQixFQUE4QjtBQUMxQkosY0FBTXdCLFVBQU4sQ0FBaUJwQixPQUFqQixHQUEyQkcsU0FBM0I7QUFDQWQseUJBQWlCTyxNQUFNd0IsVUFBTixDQUFpQkMsTUFBakIsQ0FBd0JDLEtBQXpDO0FBQ0g7QUFDSjtBQUNEekQsUUFBUW1CLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0EsU0FBU3VDLFVBQVQsQ0FBb0IzQixLQUFwQixFQUEyQm1CLElBQTNCLEVBQWlDVCxHQUFqQyxFQUFzQztBQUNsQ3RCLGlCQUFhWSxLQUFiO0FBQ0FBLFVBQU00QixZQUFOLENBQW1CeEIsT0FBbkIsR0FBNkIsRUFBRWUsVUFBRixFQUFRVCxRQUFSLEVBQTdCO0FBQ0FqQixxQkFBaUJPLE1BQU00QixZQUFOLENBQW1CSCxNQUFuQixDQUEwQmIsR0FBM0MsRUFBZ0RPLElBQWhELEVBQXNEVCxHQUF0RDtBQUNIO0FBQ0QsU0FBU3ZCLFlBQVQsQ0FBc0JhLEtBQXRCLEVBQTZCO0FBQ3pCLFFBQU02QixLQUFLN0IsTUFBTTRCLFlBQWpCO0FBQ0EsUUFBSUMsR0FBR3pCLE9BQVAsRUFBZ0I7QUFDWnlCLFdBQUd6QixPQUFILEdBQWFHLFNBQWI7QUFDQWQseUJBQWlCb0MsR0FBR0osTUFBSCxDQUFVQyxLQUEzQjtBQUNIO0FBQ0o7QUFDRHpELFFBQVFrQixZQUFSLEdBQXVCQSxZQUF2QjtBQUNBLFNBQVMyQyxhQUFULENBQXVCOUIsS0FBdkIsRUFBOEJxQixJQUE5QixFQUFvQ0MsSUFBcEMsRUFBMEM7QUFDdEMsUUFBSSxDQUFDdEIsTUFBTStCLFVBQVgsRUFDSSxPQUFPLEtBQVA7QUFDSixRQUFNQyxPQUFPaEMsTUFBTVMsTUFBTixDQUFhd0IsR0FBYixDQUFpQlosSUFBakIsQ0FBYjtBQUNBLFFBQUksQ0FBQ1csSUFBRCxJQUFTQSxLQUFLYixJQUFMLEtBQWMsTUFBM0IsRUFDSSxPQUFPLEtBQVA7QUFDSixRQUFNZSxVQUFVeEMsT0FBT3lDLE9BQVAsQ0FBZWQsSUFBZixDQUFoQjtBQUNBLFFBQU1lLFVBQVUxQyxPQUFPeUMsT0FBUCxDQUFlYixJQUFmLENBQWhCO0FBQ0EsUUFBS1ksUUFBUSxDQUFSLE1BQWUsQ0FBZixJQUFvQkEsUUFBUSxDQUFSLE1BQWUsQ0FBcEMsSUFBMENBLFFBQVEsQ0FBUixNQUFlRSxRQUFRLENBQVIsQ0FBN0QsRUFDSSxPQUFPLEtBQVA7QUFDSixRQUFJRixRQUFRLENBQVIsTUFBZSxDQUFmLElBQW9CLENBQUNsQyxNQUFNUyxNQUFOLENBQWE0QixHQUFiLENBQWlCZixJQUFqQixDQUF6QixFQUFpRDtBQUM3QyxZQUFJYyxRQUFRLENBQVIsTUFBZSxDQUFuQixFQUNJZCxPQUFPNUIsT0FBTzRDLE9BQVAsQ0FBZSxDQUFDLENBQUQsRUFBSUYsUUFBUSxDQUFSLENBQUosQ0FBZixDQUFQLENBREosS0FFSyxJQUFJQSxRQUFRLENBQVIsTUFBZSxDQUFuQixFQUNEZCxPQUFPNUIsT0FBTzRDLE9BQVAsQ0FBZSxDQUFDLENBQUQsRUFBSUYsUUFBUSxDQUFSLENBQUosQ0FBZixDQUFQO0FBQ1A7QUFDRCxRQUFNRyxPQUFPdkMsTUFBTVMsTUFBTixDQUFhd0IsR0FBYixDQUFpQlgsSUFBakIsQ0FBYjtBQUNBLFFBQUksQ0FBQ2lCLElBQUQsSUFBU0EsS0FBS3pCLEtBQUwsS0FBZWtCLEtBQUtsQixLQUE3QixJQUFzQ3lCLEtBQUtwQixJQUFMLEtBQWMsTUFBeEQsRUFDSSxPQUFPLEtBQVA7QUFDSm5CLFVBQU1TLE1BQU4sQ0FBYUksTUFBYixDQUFvQlEsSUFBcEI7QUFDQXJCLFVBQU1TLE1BQU4sQ0FBYUksTUFBYixDQUFvQlMsSUFBcEI7QUFDQSxRQUFJWSxRQUFRLENBQVIsSUFBYUUsUUFBUSxDQUFSLENBQWpCLEVBQTZCO0FBQ3pCcEMsY0FBTVMsTUFBTixDQUFhRyxHQUFiLENBQWlCbEIsT0FBTzRDLE9BQVAsQ0FBZSxDQUFDLENBQUQsRUFBSUYsUUFBUSxDQUFSLENBQUosQ0FBZixDQUFqQixFQUFrREosSUFBbEQ7QUFDQWhDLGNBQU1TLE1BQU4sQ0FBYUcsR0FBYixDQUFpQmxCLE9BQU80QyxPQUFQLENBQWUsQ0FBQyxDQUFELEVBQUlGLFFBQVEsQ0FBUixDQUFKLENBQWYsQ0FBakIsRUFBa0RHLElBQWxEO0FBQ0gsS0FIRCxNQUlLO0FBQ0R2QyxjQUFNUyxNQUFOLENBQWFHLEdBQWIsQ0FBaUJsQixPQUFPNEMsT0FBUCxDQUFlLENBQUMsQ0FBRCxFQUFJRixRQUFRLENBQVIsQ0FBSixDQUFmLENBQWpCLEVBQWtESixJQUFsRDtBQUNBaEMsY0FBTVMsTUFBTixDQUFhRyxHQUFiLENBQWlCbEIsT0FBTzRDLE9BQVAsQ0FBZSxDQUFDLENBQUQsRUFBSUYsUUFBUSxDQUFSLENBQUosQ0FBZixDQUFqQixFQUFrREcsSUFBbEQ7QUFDSDtBQUNELFdBQU8sSUFBUDtBQUNIO0FBQ0QsU0FBU3JELFFBQVQsQ0FBa0JjLEtBQWxCLEVBQXlCcUIsSUFBekIsRUFBK0JDLElBQS9CLEVBQXFDO0FBQ2pDLFFBQU1rQixZQUFZeEMsTUFBTVMsTUFBTixDQUFhd0IsR0FBYixDQUFpQlosSUFBakIsQ0FBbEI7QUFBQSxRQUEwQ29CLFlBQVl6QyxNQUFNUyxNQUFOLENBQWF3QixHQUFiLENBQWlCWCxJQUFqQixDQUF0RDtBQUNBLFFBQUlELFNBQVNDLElBQVQsSUFBaUIsQ0FBQ2tCLFNBQXRCLEVBQ0ksT0FBTyxLQUFQO0FBQ0osUUFBTUUsV0FBWUQsYUFBYUEsVUFBVTNCLEtBQVYsS0FBb0IwQixVQUFVMUIsS0FBNUMsR0FBcUQyQixTQUFyRCxHQUFpRWxDLFNBQWxGO0FBQ0EsUUFBSWUsU0FBU3RCLE1BQU1NLFFBQW5CLEVBQ0kxQixTQUFTb0IsS0FBVDtBQUNKUCxxQkFBaUJPLE1BQU15QixNQUFOLENBQWFrQixJQUE5QixFQUFvQ3RCLElBQXBDLEVBQTBDQyxJQUExQyxFQUFnRG9CLFFBQWhEO0FBQ0EsUUFBSSxDQUFDWixjQUFjOUIsS0FBZCxFQUFxQnFCLElBQXJCLEVBQTJCQyxJQUEzQixDQUFMLEVBQXVDO0FBQ25DdEIsY0FBTVMsTUFBTixDQUFhRyxHQUFiLENBQWlCVSxJQUFqQixFQUF1QmtCLFNBQXZCO0FBQ0F4QyxjQUFNUyxNQUFOLENBQWFJLE1BQWIsQ0FBb0JRLElBQXBCO0FBQ0g7QUFDRHJCLFVBQU1RLFFBQU4sR0FBaUIsQ0FBQ2EsSUFBRCxFQUFPQyxJQUFQLENBQWpCO0FBQ0F0QixVQUFNZSxLQUFOLEdBQWNSLFNBQWQ7QUFDQWQscUJBQWlCTyxNQUFNeUIsTUFBTixDQUFhbUIsTUFBOUI7QUFDQSxXQUFPRixZQUFZLElBQW5CO0FBQ0g7QUFDRHpFLFFBQVFpQixRQUFSLEdBQW1CQSxRQUFuQjtBQUNBLFNBQVNELFlBQVQsQ0FBc0JlLEtBQXRCLEVBQTZCVyxLQUE3QixFQUFvQ0QsR0FBcEMsRUFBeUNtQyxLQUF6QyxFQUFnRDtBQUM1QyxRQUFJN0MsTUFBTVMsTUFBTixDQUFhNEIsR0FBYixDQUFpQjNCLEdBQWpCLENBQUosRUFBMkI7QUFDdkIsWUFBSW1DLEtBQUosRUFDSTdDLE1BQU1TLE1BQU4sQ0FBYUksTUFBYixDQUFvQkgsR0FBcEIsRUFESixLQUdJLE9BQU8sS0FBUDtBQUNQO0FBQ0RqQixxQkFBaUJPLE1BQU15QixNQUFOLENBQWExQyxZQUE5QixFQUE0QzRCLEtBQTVDLEVBQW1ERCxHQUFuRDtBQUNBVixVQUFNUyxNQUFOLENBQWFHLEdBQWIsQ0FBaUJGLEdBQWpCLEVBQXNCQyxLQUF0QjtBQUNBWCxVQUFNUSxRQUFOLEdBQWlCLENBQUNFLEdBQUQsQ0FBakI7QUFDQVYsVUFBTWUsS0FBTixHQUFjUixTQUFkO0FBQ0FkLHFCQUFpQk8sTUFBTXlCLE1BQU4sQ0FBYW1CLE1BQTlCO0FBQ0E1QyxVQUFNOEMsT0FBTixDQUFjQyxLQUFkLEdBQXNCeEMsU0FBdEI7QUFDQVAsVUFBTWdCLFNBQU4sR0FBa0J0QixPQUFPUSxRQUFQLENBQWdCRixNQUFNZ0IsU0FBdEIsQ0FBbEI7QUFDQSxXQUFPLElBQVA7QUFDSDtBQUNEL0MsUUFBUWdCLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0EsU0FBUytELFlBQVQsQ0FBc0JoRCxLQUF0QixFQUE2QnFCLElBQTdCLEVBQW1DQyxJQUFuQyxFQUF5QztBQUNyQyxRQUFNMkIsU0FBUy9ELFNBQVNjLEtBQVQsRUFBZ0JxQixJQUFoQixFQUFzQkMsSUFBdEIsQ0FBZjtBQUNBLFFBQUkyQixNQUFKLEVBQVk7QUFDUmpELGNBQU04QyxPQUFOLENBQWNDLEtBQWQsR0FBc0J4QyxTQUF0QjtBQUNBUCxjQUFNZ0IsU0FBTixHQUFrQnRCLE9BQU9RLFFBQVAsQ0FBZ0JGLE1BQU1nQixTQUF0QixDQUFsQjtBQUNBaEIsY0FBTUcsU0FBTixDQUFnQkMsT0FBaEIsR0FBMEJHLFNBQTFCO0FBQ0g7QUFDRCxXQUFPMEMsTUFBUDtBQUNIO0FBQ0QsU0FBU2pFLFFBQVQsQ0FBa0JnQixLQUFsQixFQUF5QnFCLElBQXpCLEVBQStCQyxJQUEvQixFQUFxQztBQUNqQyxRQUFJM0MsUUFBUXFCLEtBQVIsRUFBZXFCLElBQWYsRUFBcUJDLElBQXJCLENBQUosRUFBZ0M7QUFDNUIsWUFBTTJCLFNBQVNELGFBQWFoRCxLQUFiLEVBQW9CcUIsSUFBcEIsRUFBMEJDLElBQTFCLENBQWY7QUFDQSxZQUFJMkIsTUFBSixFQUFZO0FBQ1IsZ0JBQU1DLFdBQVdsRCxNQUFNbUQsSUFBTixDQUFXN0UsSUFBWCxFQUFqQjtBQUNBTSxxQkFBU29CLEtBQVQ7QUFDQSxnQkFBTW9ELFdBQVc7QUFDYkMseUJBQVMsS0FESTtBQUViQyx5QkFBU3RELE1BQU11RCxLQUFOLENBQVlELE9BRlI7QUFHYko7QUFIYSxhQUFqQjtBQUtBLGdCQUFJRCxXQUFXLElBQWYsRUFDSUcsU0FBU1YsUUFBVCxHQUFvQk8sTUFBcEI7QUFDSnhELDZCQUFpQk8sTUFBTThDLE9BQU4sQ0FBY3JCLE1BQWQsQ0FBcUIrQixLQUF0QyxFQUE2Q25DLElBQTdDLEVBQW1EQyxJQUFuRCxFQUF5RDhCLFFBQXpEO0FBQ0EsbUJBQU8sSUFBUDtBQUNIO0FBQ0osS0FmRCxNQWdCSyxJQUFJSyxXQUFXekQsS0FBWCxFQUFrQnFCLElBQWxCLEVBQXdCQyxJQUF4QixDQUFKLEVBQW1DO0FBQ3BDRixtQkFBV3BCLEtBQVgsRUFBa0JxQixJQUFsQixFQUF3QkMsSUFBeEIsRUFBOEI7QUFDMUJnQyxxQkFBU3RELE1BQU11RCxLQUFOLENBQVlEO0FBREssU0FBOUI7QUFHQTFFLGlCQUFTb0IsS0FBVDtBQUNBLGVBQU8sSUFBUDtBQUNIO0FBQ0RwQixhQUFTb0IsS0FBVDtBQUNBLFdBQU8sS0FBUDtBQUNIO0FBQ0QvQixRQUFRZSxRQUFSLEdBQW1CQSxRQUFuQjtBQUNBLFNBQVNELFlBQVQsQ0FBc0JpQixLQUF0QixFQUE2QnFCLElBQTdCLEVBQW1DQyxJQUFuQyxFQUF5Q3VCLEtBQXpDLEVBQWdEO0FBQzVDLFFBQU1sQyxRQUFRWCxNQUFNUyxNQUFOLENBQWF3QixHQUFiLENBQWlCWixJQUFqQixDQUFkO0FBQ0EsUUFBSVYsVUFBVStDLFFBQVExRCxLQUFSLEVBQWVxQixJQUFmLEVBQXFCQyxJQUFyQixLQUE4QnVCLEtBQXhDLENBQUosRUFBb0Q7QUFDaEQ3QyxjQUFNUyxNQUFOLENBQWFJLE1BQWIsQ0FBb0JRLElBQXBCO0FBQ0FwQyxxQkFBYWUsS0FBYixFQUFvQlcsS0FBcEIsRUFBMkJXLElBQTNCLEVBQWlDdUIsS0FBakM7QUFDQXBELHlCQUFpQk8sTUFBTThDLE9BQU4sQ0FBY3JCLE1BQWQsQ0FBcUJrQyxhQUF0QyxFQUFxRGhELE1BQU1RLElBQTNELEVBQWlFRyxJQUFqRSxFQUF1RTtBQUNuRXNDLHFCQUFTO0FBRDBELFNBQXZFO0FBR0gsS0FORCxNQU9LLElBQUlqRCxTQUFTa0QsV0FBVzdELEtBQVgsRUFBa0JxQixJQUFsQixFQUF3QkMsSUFBeEIsQ0FBYixFQUE0QztBQUM3Q0ssbUJBQVczQixLQUFYLEVBQWtCVyxNQUFNUSxJQUF4QixFQUE4QkcsSUFBOUI7QUFDSCxLQUZJLE1BR0E7QUFDRGxDLHFCQUFhWSxLQUFiO0FBQ0FiLHFCQUFhYSxLQUFiO0FBQ0g7QUFDREEsVUFBTVMsTUFBTixDQUFhSSxNQUFiLENBQW9CUSxJQUFwQjtBQUNBekMsYUFBU29CLEtBQVQ7QUFDSDtBQUNEL0IsUUFBUWMsWUFBUixHQUF1QkEsWUFBdkI7QUFDQSxTQUFTRCxZQUFULENBQXNCa0IsS0FBdEIsRUFBNkJVLEdBQTdCLEVBQWtDbUMsS0FBbEMsRUFBeUM7QUFDckNwRCxxQkFBaUJPLE1BQU15QixNQUFOLENBQWFxQyxNQUE5QixFQUFzQ3BELEdBQXRDO0FBQ0EsUUFBSVYsTUFBTU0sUUFBVixFQUFvQjtBQUNoQixZQUFJTixNQUFNTSxRQUFOLEtBQW1CSSxHQUFuQixJQUEwQixDQUFDVixNQUFNSyxTQUFOLENBQWdCMEQsT0FBL0MsRUFBd0Q7QUFDcERuRixxQkFBU29CLEtBQVQ7QUFDQUEsa0JBQU1tRCxJQUFOLENBQVdhLE1BQVg7QUFDQTtBQUNILFNBSkQsTUFLSyxJQUFJLENBQUNoRSxNQUFNaUUsVUFBTixDQUFpQkYsT0FBakIsSUFBNEJsQixLQUE3QixLQUF1QzdDLE1BQU1NLFFBQU4sS0FBbUJJLEdBQTlELEVBQW1FO0FBQ3BFLGdCQUFJMUIsU0FBU2dCLEtBQVQsRUFBZ0JBLE1BQU1NLFFBQXRCLEVBQWdDSSxHQUFoQyxDQUFKLEVBQTBDO0FBQ3RDVixzQkFBTXVELEtBQU4sQ0FBWVcsT0FBWixHQUFzQixLQUF0QjtBQUNBO0FBQ0g7QUFDSjtBQUNKO0FBQ0QsUUFBSUMsVUFBVW5FLEtBQVYsRUFBaUJVLEdBQWpCLEtBQXlCMEQsYUFBYXBFLEtBQWIsRUFBb0JVLEdBQXBCLENBQTdCLEVBQXVEO0FBQ25EN0Isb0JBQVltQixLQUFaLEVBQW1CVSxHQUFuQjtBQUNBVixjQUFNbUQsSUFBTixDQUFXa0IsS0FBWDtBQUNIO0FBQ0o7QUFDRHBHLFFBQVFhLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0EsU0FBU0QsV0FBVCxDQUFxQm1CLEtBQXJCLEVBQTRCVSxHQUE1QixFQUFpQztBQUM3QlYsVUFBTU0sUUFBTixHQUFpQkksR0FBakI7QUFDQSxRQUFJMEQsYUFBYXBFLEtBQWIsRUFBb0JVLEdBQXBCLENBQUosRUFBOEI7QUFDMUJWLGNBQU13QixVQUFOLENBQWlCdUIsS0FBakIsR0FBeUJuRCxVQUFVeUQsT0FBVixDQUFrQnJELE1BQU1TLE1BQXhCLEVBQWdDQyxHQUFoQyxFQUFxQ1YsTUFBTXdCLFVBQU4sQ0FBaUI4QyxNQUF0RCxDQUF6QjtBQUNILEtBRkQsTUFJSXRFLE1BQU13QixVQUFOLENBQWlCdUIsS0FBakIsR0FBeUJ4QyxTQUF6QjtBQUNQO0FBQ0R0QyxRQUFRWSxXQUFSLEdBQXNCQSxXQUF0QjtBQUNBLFNBQVNELFFBQVQsQ0FBa0JvQixLQUFsQixFQUF5QjtBQUNyQkEsVUFBTU0sUUFBTixHQUFpQkMsU0FBakI7QUFDQVAsVUFBTXdCLFVBQU4sQ0FBaUJ1QixLQUFqQixHQUF5QnhDLFNBQXpCO0FBQ0FQLFVBQU1tRCxJQUFOLENBQVdhLE1BQVg7QUFDSDtBQUNEL0YsUUFBUVcsUUFBUixHQUFtQkEsUUFBbkI7QUFDQSxTQUFTdUYsU0FBVCxDQUFtQm5FLEtBQW5CLEVBQTBCcUIsSUFBMUIsRUFBZ0M7QUFDNUIsUUFBTVYsUUFBUVgsTUFBTVMsTUFBTixDQUFhd0IsR0FBYixDQUFpQlosSUFBakIsQ0FBZDtBQUNBLFdBQU8sQ0FBQyxDQUFDVixLQUFGLEtBQVlYLE1BQU04QyxPQUFOLENBQWNoQyxLQUFkLEtBQXdCLE1BQXhCLElBQW1DZCxNQUFNOEMsT0FBTixDQUFjaEMsS0FBZCxLQUF3QkgsTUFBTUcsS0FBOUIsSUFDbERkLE1BQU1nQixTQUFOLEtBQW9CTCxNQUFNRyxLQUR2QixDQUFQO0FBRUg7QUFDRCxTQUFTbkMsT0FBVCxDQUFpQnFCLEtBQWpCLEVBQXdCcUIsSUFBeEIsRUFBOEJDLElBQTlCLEVBQW9DO0FBQ2hDLFFBQUlpRCxFQUFKLEVBQVFDLEVBQVI7QUFDQSxXQUFPbkQsU0FBU0MsSUFBVCxJQUFpQjZDLFVBQVVuRSxLQUFWLEVBQWlCcUIsSUFBakIsQ0FBakIsS0FBNENyQixNQUFNOEMsT0FBTixDQUFjMkIsSUFBZCxJQUFzQixDQUFDLEVBQUUsQ0FBQ0QsS0FBSyxDQUFDRCxLQUFLdkUsTUFBTThDLE9BQU4sQ0FBY0MsS0FBcEIsTUFBK0IsSUFBL0IsSUFBdUN3QixPQUFPLEtBQUssQ0FBbkQsR0FBdUQsS0FBSyxDQUE1RCxHQUFnRUEsR0FBR3RDLEdBQUgsQ0FBT1osSUFBUCxDQUF0RSxNQUF3RixJQUF4RixJQUFnR21ELE9BQU8sS0FBSyxDQUE1RyxHQUFnSCxLQUFLLENBQXJILEdBQXlIQSxHQUFHRSxRQUFILENBQVlwRCxJQUFaLENBQTNILENBQW5FLENBQVA7QUFDSDtBQUNEckQsUUFBUVUsT0FBUixHQUFrQkEsT0FBbEI7QUFDQSxTQUFTK0UsT0FBVCxDQUFpQjFELEtBQWpCLEVBQXdCcUIsSUFBeEIsRUFBOEJDLElBQTlCLEVBQW9DO0FBQ2hDLFFBQU1YLFFBQVFYLE1BQU1TLE1BQU4sQ0FBYXdCLEdBQWIsQ0FBaUJaLElBQWpCLENBQWQ7QUFDQSxXQUFPLENBQUMsQ0FBQ1YsS0FBRixLQUFZVSxTQUFTQyxJQUFULElBQWlCLENBQUN0QixNQUFNUyxNQUFOLENBQWE0QixHQUFiLENBQWlCZixJQUFqQixDQUE5QixNQUEwRHRCLE1BQU04QyxPQUFOLENBQWNoQyxLQUFkLEtBQXdCLE1BQXhCLElBQW1DZCxNQUFNOEMsT0FBTixDQUFjaEMsS0FBZCxLQUF3QkgsTUFBTUcsS0FBOUIsSUFDaEdkLE1BQU1nQixTQUFOLEtBQW9CTCxNQUFNRyxLQUR2QixDQUFQO0FBRUg7QUFDRCxTQUFTc0QsWUFBVCxDQUFzQnBFLEtBQXRCLEVBQTZCcUIsSUFBN0IsRUFBbUM7QUFDL0IsUUFBTVYsUUFBUVgsTUFBTVMsTUFBTixDQUFhd0IsR0FBYixDQUFpQlosSUFBakIsQ0FBZDtBQUNBLFdBQU8sQ0FBQyxDQUFDVixLQUFGLElBQVdYLE1BQU13QixVQUFOLENBQWlCdUMsT0FBNUIsSUFDSC9ELE1BQU04QyxPQUFOLENBQWNoQyxLQUFkLEtBQXdCSCxNQUFNRyxLQUQzQixJQUVIZCxNQUFNZ0IsU0FBTixLQUFvQkwsTUFBTUcsS0FGOUI7QUFHSDtBQUNELFNBQVMyQyxVQUFULENBQW9CekQsS0FBcEIsRUFBMkJxQixJQUEzQixFQUFpQ0MsSUFBakMsRUFBdUM7QUFDbkMsV0FBT0QsU0FBU0MsSUFBVCxJQUNIOEMsYUFBYXBFLEtBQWIsRUFBb0JxQixJQUFwQixDQURHLElBRUh6QixVQUFVeUQsT0FBVixDQUFrQnJELE1BQU1TLE1BQXhCLEVBQWdDWSxJQUFoQyxFQUFzQ3JCLE1BQU13QixVQUFOLENBQWlCOEMsTUFBdkQsRUFBK0RJLFFBQS9ELENBQXdFcEQsSUFBeEUsQ0FGSjtBQUdIO0FBQ0QsU0FBU3VDLFVBQVQsQ0FBb0I3RCxLQUFwQixFQUEyQnFCLElBQTNCLEVBQWlDQyxJQUFqQyxFQUF1QztBQUNuQyxRQUFNWCxRQUFRWCxNQUFNUyxNQUFOLENBQWF3QixHQUFiLENBQWlCWixJQUFqQixDQUFkO0FBQ0EsUUFBTW9CLFlBQVl6QyxNQUFNUyxNQUFOLENBQWF3QixHQUFiLENBQWlCWCxJQUFqQixDQUFsQjtBQUNBLFdBQU8sQ0FBQyxDQUFDWCxLQUFGLEtBQ0YsQ0FBQzhCLFNBQUQsSUFBY0EsVUFBVTNCLEtBQVYsS0FBb0JkLE1BQU04QyxPQUFOLENBQWNoQyxLQUQ5QyxLQUVIZCxNQUFNNEIsWUFBTixDQUFtQm1DLE9BRmhCLEtBR0ZwRCxNQUFNUSxJQUFOLEtBQWUsTUFBZixJQUEwQkcsS0FBSyxDQUFMLE1BQVksR0FBWixJQUFtQkEsS0FBSyxDQUFMLE1BQVksR0FIdkQsS0FJSHRCLE1BQU04QyxPQUFOLENBQWNoQyxLQUFkLEtBQXdCSCxNQUFNRyxLQUozQixJQUtIZCxNQUFNZ0IsU0FBTixLQUFvQkwsTUFBTUcsS0FMOUI7QUFNSDtBQUNELFNBQVNwQyxXQUFULENBQXFCc0IsS0FBckIsRUFBNEJxQixJQUE1QixFQUFrQztBQUM5QixRQUFNVixRQUFRWCxNQUFNUyxNQUFOLENBQWF3QixHQUFiLENBQWlCWixJQUFqQixDQUFkO0FBQ0EsV0FBTyxDQUFDLENBQUNWLEtBQUYsSUFBV1gsTUFBTUssU0FBTixDQUFnQjBELE9BQTNCLEtBQXVDL0QsTUFBTThDLE9BQU4sQ0FBY2hDLEtBQWQsS0FBd0IsTUFBeEIsSUFBbUNkLE1BQU04QyxPQUFOLENBQWNoQyxLQUFkLEtBQXdCSCxNQUFNRyxLQUE5QixLQUF3Q2QsTUFBTWdCLFNBQU4sS0FBb0JMLE1BQU1HLEtBQTFCLElBQW1DZCxNQUFNd0IsVUFBTixDQUFpQnVDLE9BQTVGLENBQTFFLENBQVA7QUFDSDtBQUNEOUYsUUFBUVMsV0FBUixHQUFzQkEsV0FBdEI7QUFDQSxTQUFTRCxXQUFULENBQXFCdUIsS0FBckIsRUFBNEI7QUFDeEIsUUFBTTJDLE9BQU8zQyxNQUFNd0IsVUFBTixDQUFpQnBCLE9BQTlCO0FBQ0EsUUFBSSxDQUFDdUMsSUFBTCxFQUNJLE9BQU8sS0FBUDtBQUNKLFFBQU10QixPQUFPc0IsS0FBSyxDQUFMLENBQWI7QUFBQSxRQUFzQnJCLE9BQU9xQixLQUFLLENBQUwsQ0FBN0I7QUFDQSxRQUFJZ0MsVUFBVSxLQUFkO0FBQ0EsUUFBSWhHLFFBQVFxQixLQUFSLEVBQWVxQixJQUFmLEVBQXFCQyxJQUFyQixDQUFKLEVBQWdDO0FBQzVCLFlBQU0yQixTQUFTRCxhQUFhaEQsS0FBYixFQUFvQnFCLElBQXBCLEVBQTBCQyxJQUExQixDQUFmO0FBQ0EsWUFBSTJCLE1BQUosRUFBWTtBQUNSLGdCQUFNRyxXQUFXLEVBQUVDLFNBQVMsSUFBWCxFQUFqQjtBQUNBLGdCQUFJSixXQUFXLElBQWYsRUFDSUcsU0FBU1YsUUFBVCxHQUFvQk8sTUFBcEI7QUFDSnhELDZCQUFpQk8sTUFBTThDLE9BQU4sQ0FBY3JCLE1BQWQsQ0FBcUIrQixLQUF0QyxFQUE2Q25DLElBQTdDLEVBQW1EQyxJQUFuRCxFQUF5RDhCLFFBQXpEO0FBQ0F1QixzQkFBVSxJQUFWO0FBQ0g7QUFDSjtBQUNEdkYsaUJBQWFZLEtBQWI7QUFDQSxXQUFPMkUsT0FBUDtBQUNIO0FBQ0QxRyxRQUFRUSxXQUFSLEdBQXNCQSxXQUF0QjtBQUNBLFNBQVNELFdBQVQsQ0FBcUJ3QixLQUFyQixFQUE0QjRFLFFBQTVCLEVBQXNDO0FBQ2xDLFFBQU1DLE9BQU83RSxNQUFNNEIsWUFBTixDQUFtQnhCLE9BQWhDO0FBQ0EsUUFBSXVFLFVBQVUsS0FBZDtBQUNBLFFBQUksQ0FBQ0UsSUFBTCxFQUNJLE9BQU8sS0FBUDtBQUNKLFFBQUlELFNBQVNDLElBQVQsQ0FBSixFQUFvQjtBQUNoQixZQUFNbEUsUUFBUTtBQUNWUSxrQkFBTTBELEtBQUsxRCxJQUREO0FBRVZMLG1CQUFPZCxNQUFNOEMsT0FBTixDQUFjaEM7QUFGWCxTQUFkO0FBSUEsWUFBSTdCLGFBQWFlLEtBQWIsRUFBb0JXLEtBQXBCLEVBQTJCa0UsS0FBS25FLEdBQWhDLENBQUosRUFBMEM7QUFDdENqQiw2QkFBaUJPLE1BQU04QyxPQUFOLENBQWNyQixNQUFkLENBQXFCa0MsYUFBdEMsRUFBcURrQixLQUFLMUQsSUFBMUQsRUFBZ0UwRCxLQUFLbkUsR0FBckUsRUFBMEU7QUFDdEVrRCx5QkFBUztBQUQ2RCxhQUExRTtBQUdBZSxzQkFBVSxJQUFWO0FBQ0g7QUFDSjtBQUNEeEYsaUJBQWFhLEtBQWI7QUFDQSxXQUFPMkUsT0FBUDtBQUNIO0FBQ0QxRyxRQUFRTyxXQUFSLEdBQXNCQSxXQUF0QjtBQUNBLFNBQVNELFVBQVQsQ0FBb0J5QixLQUFwQixFQUEyQjtBQUN2QlosaUJBQWFZLEtBQWI7QUFDQWIsaUJBQWFhLEtBQWI7QUFDQXBCLGFBQVNvQixLQUFUO0FBQ0g7QUFDRC9CLFFBQVFNLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0EsU0FBU0QsSUFBVCxDQUFjMEIsS0FBZCxFQUFxQjtBQUNqQkEsVUFBTThDLE9BQU4sQ0FBY2hDLEtBQWQsR0FDSWQsTUFBTThDLE9BQU4sQ0FBY0MsS0FBZCxHQUNJL0MsTUFBTUcsU0FBTixDQUFnQkMsT0FBaEIsR0FBMEJHLFNBRmxDO0FBR0FoQyxlQUFXeUIsS0FBWDtBQUNIO0FBQ0QvQixRQUFRSyxJQUFSLEdBQWVBLElBQWY7QUFDQSxTQUFTRCxjQUFULENBQXdCeUcsR0FBeEIsRUFBNkJDLE9BQTdCLEVBQXNDQyxNQUF0QyxFQUE4QztBQUMxQyxRQUFJQyxPQUFPQyxLQUFLQyxLQUFMLENBQVcsS0FBS0wsSUFBSSxDQUFKLElBQVNFLE9BQU9JLElBQXJCLElBQTZCSixPQUFPSyxLQUEvQyxDQUFYO0FBQ0EsUUFBSSxDQUFDTixPQUFMLEVBQ0lFLE9BQU8sSUFBSUEsSUFBWDtBQUNKLFFBQUlLLE9BQU8sSUFBSUosS0FBS0MsS0FBTCxDQUFXLEtBQUtMLElBQUksQ0FBSixJQUFTRSxPQUFPTyxHQUFyQixJQUE0QlAsT0FBT1EsTUFBOUMsQ0FBZjtBQUNBLFFBQUksQ0FBQ1QsT0FBTCxFQUNJTyxPQUFPLElBQUlBLElBQVg7QUFDSixXQUFRTCxRQUFRLENBQVIsSUFBYUEsT0FBTyxDQUFwQixJQUF5QkssUUFBUSxDQUFqQyxJQUFzQ0EsT0FBTyxDQUE5QyxHQUFtRDVGLE9BQU80QyxPQUFQLENBQWUsQ0FBQzJDLElBQUQsRUFBT0ssSUFBUCxDQUFmLENBQW5ELEdBQWtGL0UsU0FBekY7QUFDSDtBQUNEdEMsUUFBUUksY0FBUixHQUF5QkEsY0FBekI7QUFDQSxTQUFTRCxxQkFBVCxDQUErQmlELElBQS9CLEVBQXFDeUQsR0FBckMsRUFBMENDLE9BQTFDLEVBQW1EQyxNQUFuRCxFQUEyRDtBQUN2RCxRQUFNOUMsVUFBVXhDLE9BQU95QyxPQUFQLENBQWVkLElBQWYsQ0FBaEI7QUFDQSxRQUFNb0UsZUFBZS9GLE9BQU9nRyxNQUFQLENBQWNDLE1BQWQsQ0FBcUIsZ0JBQVE7QUFDOUMsZUFBTy9GLFVBQVVnRyxLQUFWLENBQWdCMUQsUUFBUSxDQUFSLENBQWhCLEVBQTRCQSxRQUFRLENBQVIsQ0FBNUIsRUFBd0MyRCxLQUFLLENBQUwsQ0FBeEMsRUFBaURBLEtBQUssQ0FBTCxDQUFqRCxLQUE2RGpHLFVBQVVrRyxNQUFWLENBQWlCNUQsUUFBUSxDQUFSLENBQWpCLEVBQTZCQSxRQUFRLENBQVIsQ0FBN0IsRUFBeUMyRCxLQUFLLENBQUwsQ0FBekMsRUFBa0RBLEtBQUssQ0FBTCxDQUFsRCxDQUFwRTtBQUNILEtBRm9CLENBQXJCO0FBR0EsUUFBTUUsbUJBQW1CTixhQUFhTyxHQUFiLENBQWlCO0FBQUEsZUFBUXRHLE9BQU91RyxtQkFBUCxDQUEyQnZHLE9BQU80QyxPQUFQLENBQWV1RCxJQUFmLENBQTNCLEVBQWlEZCxPQUFqRCxFQUEwREMsTUFBMUQsQ0FBUjtBQUFBLEtBQWpCLENBQXpCO0FBQ0EsUUFBTWtCLHFCQUFxQkgsaUJBQWlCQyxHQUFqQixDQUFxQjtBQUFBLGVBQVF0RyxPQUFPeUcsVUFBUCxDQUFrQnJCLEdBQWxCLEVBQXVCZSxJQUF2QixDQUFSO0FBQUEsS0FBckIsQ0FBM0I7O0FBTnVELGdDQU8xQkssbUJBQW1CRSxNQUFuQixDQUEwQixVQUFDQyxDQUFELEVBQUlDLENBQUosRUFBT0MsS0FBUDtBQUFBLGVBQWlCRixFQUFFLENBQUYsSUFBT0MsQ0FBUCxHQUFXRCxDQUFYLEdBQWUsQ0FBQ0MsQ0FBRCxFQUFJQyxLQUFKLENBQWhDO0FBQUEsS0FBMUIsRUFBc0UsQ0FBQ0wsbUJBQW1CLENBQW5CLENBQUQsRUFBd0IsQ0FBeEIsQ0FBdEUsQ0FQMEI7QUFBQTtBQUFBLFFBTzlDTSxnQkFQOEM7O0FBUXZELFdBQU85RyxPQUFPNEMsT0FBUCxDQUFlbUQsYUFBYWUsZ0JBQWIsQ0FBZixDQUFQO0FBQ0g7QUFDRHZJLFFBQVFHLHFCQUFSLEdBQWdDQSxxQkFBaEM7QUFDQSxTQUFTRCxRQUFULENBQWtCc0ksQ0FBbEIsRUFBcUI7QUFDakIsV0FBT0EsRUFBRXhHLFdBQUYsS0FBa0IsT0FBekI7QUFDSDtBQUNEaEMsUUFBUUUsUUFBUixHQUFtQkEsUUFBbkI7QUFDQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndoaXRlUG92ID0gZXhwb3J0cy5nZXRTbmFwcGVkS2V5QXREb21Qb3MgPSBleHBvcnRzLmdldEtleUF0RG9tUG9zID0gZXhwb3J0cy5zdG9wID0gZXhwb3J0cy5jYW5jZWxNb3ZlID0gZXhwb3J0cy5wbGF5UHJlZHJvcCA9IGV4cG9ydHMucGxheVByZW1vdmUgPSBleHBvcnRzLmlzRHJhZ2dhYmxlID0gZXhwb3J0cy5jYW5Nb3ZlID0gZXhwb3J0cy51bnNlbGVjdCA9IGV4cG9ydHMuc2V0U2VsZWN0ZWQgPSBleHBvcnRzLnNlbGVjdFNxdWFyZSA9IGV4cG9ydHMuZHJvcE5ld1BpZWNlID0gZXhwb3J0cy51c2VyTW92ZSA9IGV4cG9ydHMuYmFzZU5ld1BpZWNlID0gZXhwb3J0cy5iYXNlTW92ZSA9IGV4cG9ydHMudW5zZXRQcmVkcm9wID0gZXhwb3J0cy51bnNldFByZW1vdmUgPSBleHBvcnRzLnNldENoZWNrID0gZXhwb3J0cy5zZXRQaWVjZXMgPSBleHBvcnRzLnJlc2V0ID0gZXhwb3J0cy50b2dnbGVPcmllbnRhdGlvbiA9IGV4cG9ydHMuY2FsbFVzZXJGdW5jdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jb25zdCBwcmVtb3ZlXzEgPSByZXF1aXJlKFwiLi9wcmVtb3ZlXCIpO1xuZnVuY3Rpb24gY2FsbFVzZXJGdW5jdGlvbihmLCAuLi5hcmdzKSB7XG4gICAgaWYgKGYpXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gZiguLi5hcmdzKSwgMSk7XG59XG5leHBvcnRzLmNhbGxVc2VyRnVuY3Rpb24gPSBjYWxsVXNlckZ1bmN0aW9uO1xuZnVuY3Rpb24gdG9nZ2xlT3JpZW50YXRpb24oc3RhdGUpIHtcbiAgICBzdGF0ZS5vcmllbnRhdGlvbiA9IHV0aWxfMS5vcHBvc2l0ZShzdGF0ZS5vcmllbnRhdGlvbik7XG4gICAgc3RhdGUuYW5pbWF0aW9uLmN1cnJlbnQgPVxuICAgICAgICBzdGF0ZS5kcmFnZ2FibGUuY3VycmVudCA9XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3RlZCA9IHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMudG9nZ2xlT3JpZW50YXRpb24gPSB0b2dnbGVPcmllbnRhdGlvbjtcbmZ1bmN0aW9uIHJlc2V0KHN0YXRlKSB7XG4gICAgc3RhdGUubGFzdE1vdmUgPSB1bmRlZmluZWQ7XG4gICAgdW5zZWxlY3Qoc3RhdGUpO1xuICAgIHVuc2V0UHJlbW92ZShzdGF0ZSk7XG4gICAgdW5zZXRQcmVkcm9wKHN0YXRlKTtcbn1cbmV4cG9ydHMucmVzZXQgPSByZXNldDtcbmZ1bmN0aW9uIHNldFBpZWNlcyhzdGF0ZSwgcGllY2VzKSB7XG4gICAgZm9yIChjb25zdCBba2V5LCBwaWVjZV0gb2YgcGllY2VzKSB7XG4gICAgICAgIGlmIChwaWVjZSlcbiAgICAgICAgICAgIHN0YXRlLnBpZWNlcy5zZXQoa2V5LCBwaWVjZSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHN0YXRlLnBpZWNlcy5kZWxldGUoa2V5KTtcbiAgICB9XG59XG5leHBvcnRzLnNldFBpZWNlcyA9IHNldFBpZWNlcztcbmZ1bmN0aW9uIHNldENoZWNrKHN0YXRlLCBjb2xvcikge1xuICAgIHN0YXRlLmNoZWNrID0gdW5kZWZpbmVkO1xuICAgIGlmIChjb2xvciA9PT0gdHJ1ZSlcbiAgICAgICAgY29sb3IgPSBzdGF0ZS50dXJuQ29sb3I7XG4gICAgaWYgKGNvbG9yKVxuICAgICAgICBmb3IgKGNvbnN0IFtrLCBwXSBvZiBzdGF0ZS5waWVjZXMpIHtcbiAgICAgICAgICAgIGlmIChwLnJvbGUgPT09ICdraW5nJyAmJiBwLmNvbG9yID09PSBjb2xvcikge1xuICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxufVxuZXhwb3J0cy5zZXRDaGVjayA9IHNldENoZWNrO1xuZnVuY3Rpb24gc2V0UHJlbW92ZShzdGF0ZSwgb3JpZywgZGVzdCwgbWV0YSkge1xuICAgIHVuc2V0UHJlZHJvcChzdGF0ZSk7XG4gICAgc3RhdGUucHJlbW92YWJsZS5jdXJyZW50ID0gW29yaWcsIGRlc3RdO1xuICAgIGNhbGxVc2VyRnVuY3Rpb24oc3RhdGUucHJlbW92YWJsZS5ldmVudHMuc2V0LCBvcmlnLCBkZXN0LCBtZXRhKTtcbn1cbmZ1bmN0aW9uIHVuc2V0UHJlbW92ZShzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5wcmVtb3ZhYmxlLmN1cnJlbnQpIHtcbiAgICAgICAgc3RhdGUucHJlbW92YWJsZS5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBjYWxsVXNlckZ1bmN0aW9uKHN0YXRlLnByZW1vdmFibGUuZXZlbnRzLnVuc2V0KTtcbiAgICB9XG59XG5leHBvcnRzLnVuc2V0UHJlbW92ZSA9IHVuc2V0UHJlbW92ZTtcbmZ1bmN0aW9uIHNldFByZWRyb3Aoc3RhdGUsIHJvbGUsIGtleSkge1xuICAgIHVuc2V0UHJlbW92ZShzdGF0ZSk7XG4gICAgc3RhdGUucHJlZHJvcHBhYmxlLmN1cnJlbnQgPSB7IHJvbGUsIGtleSB9O1xuICAgIGNhbGxVc2VyRnVuY3Rpb24oc3RhdGUucHJlZHJvcHBhYmxlLmV2ZW50cy5zZXQsIHJvbGUsIGtleSk7XG59XG5mdW5jdGlvbiB1bnNldFByZWRyb3Aoc3RhdGUpIHtcbiAgICBjb25zdCBwZCA9IHN0YXRlLnByZWRyb3BwYWJsZTtcbiAgICBpZiAocGQuY3VycmVudCkge1xuICAgICAgICBwZC5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBjYWxsVXNlckZ1bmN0aW9uKHBkLmV2ZW50cy51bnNldCk7XG4gICAgfVxufVxuZXhwb3J0cy51bnNldFByZWRyb3AgPSB1bnNldFByZWRyb3A7XG5mdW5jdGlvbiB0cnlBdXRvQ2FzdGxlKHN0YXRlLCBvcmlnLCBkZXN0KSB7XG4gICAgaWYgKCFzdGF0ZS5hdXRvQ2FzdGxlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3Qga2luZyA9IHN0YXRlLnBpZWNlcy5nZXQob3JpZyk7XG4gICAgaWYgKCFraW5nIHx8IGtpbmcucm9sZSAhPT0gJ2tpbmcnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3Qgb3JpZ1BvcyA9IHV0aWxfMS5rZXkycG9zKG9yaWcpO1xuICAgIGNvbnN0IGRlc3RQb3MgPSB1dGlsXzEua2V5MnBvcyhkZXN0KTtcbiAgICBpZiAoKG9yaWdQb3NbMV0gIT09IDAgJiYgb3JpZ1Bvc1sxXSAhPT0gNykgfHwgb3JpZ1Bvc1sxXSAhPT0gZGVzdFBvc1sxXSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChvcmlnUG9zWzBdID09PSA0ICYmICFzdGF0ZS5waWVjZXMuaGFzKGRlc3QpKSB7XG4gICAgICAgIGlmIChkZXN0UG9zWzBdID09PSA2KVxuICAgICAgICAgICAgZGVzdCA9IHV0aWxfMS5wb3Mya2V5KFs3LCBkZXN0UG9zWzFdXSk7XG4gICAgICAgIGVsc2UgaWYgKGRlc3RQb3NbMF0gPT09IDIpXG4gICAgICAgICAgICBkZXN0ID0gdXRpbF8xLnBvczJrZXkoWzAsIGRlc3RQb3NbMV1dKTtcbiAgICB9XG4gICAgY29uc3Qgcm9vayA9IHN0YXRlLnBpZWNlcy5nZXQoZGVzdCk7XG4gICAgaWYgKCFyb29rIHx8IHJvb2suY29sb3IgIT09IGtpbmcuY29sb3IgfHwgcm9vay5yb2xlICE9PSAncm9vaycpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBzdGF0ZS5waWVjZXMuZGVsZXRlKG9yaWcpO1xuICAgIHN0YXRlLnBpZWNlcy5kZWxldGUoZGVzdCk7XG4gICAgaWYgKG9yaWdQb3NbMF0gPCBkZXN0UG9zWzBdKSB7XG4gICAgICAgIHN0YXRlLnBpZWNlcy5zZXQodXRpbF8xLnBvczJrZXkoWzYsIGRlc3RQb3NbMV1dKSwga2luZyk7XG4gICAgICAgIHN0YXRlLnBpZWNlcy5zZXQodXRpbF8xLnBvczJrZXkoWzUsIGRlc3RQb3NbMV1dKSwgcm9vayk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdGF0ZS5waWVjZXMuc2V0KHV0aWxfMS5wb3Mya2V5KFsyLCBkZXN0UG9zWzFdXSksIGtpbmcpO1xuICAgICAgICBzdGF0ZS5waWVjZXMuc2V0KHV0aWxfMS5wb3Mya2V5KFszLCBkZXN0UG9zWzFdXSksIHJvb2spO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGJhc2VNb3ZlKHN0YXRlLCBvcmlnLCBkZXN0KSB7XG4gICAgY29uc3Qgb3JpZ1BpZWNlID0gc3RhdGUucGllY2VzLmdldChvcmlnKSwgZGVzdFBpZWNlID0gc3RhdGUucGllY2VzLmdldChkZXN0KTtcbiAgICBpZiAob3JpZyA9PT0gZGVzdCB8fCAhb3JpZ1BpZWNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgY2FwdHVyZWQgPSAoZGVzdFBpZWNlICYmIGRlc3RQaWVjZS5jb2xvciAhPT0gb3JpZ1BpZWNlLmNvbG9yKSA/IGRlc3RQaWVjZSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoZGVzdCA9PT0gc3RhdGUuc2VsZWN0ZWQpXG4gICAgICAgIHVuc2VsZWN0KHN0YXRlKTtcbiAgICBjYWxsVXNlckZ1bmN0aW9uKHN0YXRlLmV2ZW50cy5tb3ZlLCBvcmlnLCBkZXN0LCBjYXB0dXJlZCk7XG4gICAgaWYgKCF0cnlBdXRvQ2FzdGxlKHN0YXRlLCBvcmlnLCBkZXN0KSkge1xuICAgICAgICBzdGF0ZS5waWVjZXMuc2V0KGRlc3QsIG9yaWdQaWVjZSk7XG4gICAgICAgIHN0YXRlLnBpZWNlcy5kZWxldGUob3JpZyk7XG4gICAgfVxuICAgIHN0YXRlLmxhc3RNb3ZlID0gW29yaWcsIGRlc3RdO1xuICAgIHN0YXRlLmNoZWNrID0gdW5kZWZpbmVkO1xuICAgIGNhbGxVc2VyRnVuY3Rpb24oc3RhdGUuZXZlbnRzLmNoYW5nZSk7XG4gICAgcmV0dXJuIGNhcHR1cmVkIHx8IHRydWU7XG59XG5leHBvcnRzLmJhc2VNb3ZlID0gYmFzZU1vdmU7XG5mdW5jdGlvbiBiYXNlTmV3UGllY2Uoc3RhdGUsIHBpZWNlLCBrZXksIGZvcmNlKSB7XG4gICAgaWYgKHN0YXRlLnBpZWNlcy5oYXMoa2V5KSkge1xuICAgICAgICBpZiAoZm9yY2UpXG4gICAgICAgICAgICBzdGF0ZS5waWVjZXMuZGVsZXRlKGtleSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY2FsbFVzZXJGdW5jdGlvbihzdGF0ZS5ldmVudHMuZHJvcE5ld1BpZWNlLCBwaWVjZSwga2V5KTtcbiAgICBzdGF0ZS5waWVjZXMuc2V0KGtleSwgcGllY2UpO1xuICAgIHN0YXRlLmxhc3RNb3ZlID0gW2tleV07XG4gICAgc3RhdGUuY2hlY2sgPSB1bmRlZmluZWQ7XG4gICAgY2FsbFVzZXJGdW5jdGlvbihzdGF0ZS5ldmVudHMuY2hhbmdlKTtcbiAgICBzdGF0ZS5tb3ZhYmxlLmRlc3RzID0gdW5kZWZpbmVkO1xuICAgIHN0YXRlLnR1cm5Db2xvciA9IHV0aWxfMS5vcHBvc2l0ZShzdGF0ZS50dXJuQ29sb3IpO1xuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5iYXNlTmV3UGllY2UgPSBiYXNlTmV3UGllY2U7XG5mdW5jdGlvbiBiYXNlVXNlck1vdmUoc3RhdGUsIG9yaWcsIGRlc3QpIHtcbiAgICBjb25zdCByZXN1bHQgPSBiYXNlTW92ZShzdGF0ZSwgb3JpZywgZGVzdCk7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBzdGF0ZS5tb3ZhYmxlLmRlc3RzID0gdW5kZWZpbmVkO1xuICAgICAgICBzdGF0ZS50dXJuQ29sb3IgPSB1dGlsXzEub3Bwb3NpdGUoc3RhdGUudHVybkNvbG9yKTtcbiAgICAgICAgc3RhdGUuYW5pbWF0aW9uLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiB1c2VyTW92ZShzdGF0ZSwgb3JpZywgZGVzdCkge1xuICAgIGlmIChjYW5Nb3ZlKHN0YXRlLCBvcmlnLCBkZXN0KSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBiYXNlVXNlck1vdmUoc3RhdGUsIG9yaWcsIGRlc3QpO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBjb25zdCBob2xkVGltZSA9IHN0YXRlLmhvbGQuc3RvcCgpO1xuICAgICAgICAgICAgdW5zZWxlY3Qoc3RhdGUpO1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgcHJlbW92ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY3RybEtleTogc3RhdGUuc3RhdHMuY3RybEtleSxcbiAgICAgICAgICAgICAgICBob2xkVGltZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpXG4gICAgICAgICAgICAgICAgbWV0YWRhdGEuY2FwdHVyZWQgPSByZXN1bHQ7XG4gICAgICAgICAgICBjYWxsVXNlckZ1bmN0aW9uKHN0YXRlLm1vdmFibGUuZXZlbnRzLmFmdGVyLCBvcmlnLCBkZXN0LCBtZXRhZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChjYW5QcmVtb3ZlKHN0YXRlLCBvcmlnLCBkZXN0KSkge1xuICAgICAgICBzZXRQcmVtb3ZlKHN0YXRlLCBvcmlnLCBkZXN0LCB7XG4gICAgICAgICAgICBjdHJsS2V5OiBzdGF0ZS5zdGF0cy5jdHJsS2V5XG4gICAgICAgIH0pO1xuICAgICAgICB1bnNlbGVjdChzdGF0ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB1bnNlbGVjdChzdGF0ZSk7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy51c2VyTW92ZSA9IHVzZXJNb3ZlO1xuZnVuY3Rpb24gZHJvcE5ld1BpZWNlKHN0YXRlLCBvcmlnLCBkZXN0LCBmb3JjZSkge1xuICAgIGNvbnN0IHBpZWNlID0gc3RhdGUucGllY2VzLmdldChvcmlnKTtcbiAgICBpZiAocGllY2UgJiYgKGNhbkRyb3Aoc3RhdGUsIG9yaWcsIGRlc3QpIHx8IGZvcmNlKSkge1xuICAgICAgICBzdGF0ZS5waWVjZXMuZGVsZXRlKG9yaWcpO1xuICAgICAgICBiYXNlTmV3UGllY2Uoc3RhdGUsIHBpZWNlLCBkZXN0LCBmb3JjZSk7XG4gICAgICAgIGNhbGxVc2VyRnVuY3Rpb24oc3RhdGUubW92YWJsZS5ldmVudHMuYWZ0ZXJOZXdQaWVjZSwgcGllY2Uucm9sZSwgZGVzdCwge1xuICAgICAgICAgICAgcHJlZHJvcDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHBpZWNlICYmIGNhblByZWRyb3Aoc3RhdGUsIG9yaWcsIGRlc3QpKSB7XG4gICAgICAgIHNldFByZWRyb3Aoc3RhdGUsIHBpZWNlLnJvbGUsIGRlc3QpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdW5zZXRQcmVtb3ZlKHN0YXRlKTtcbiAgICAgICAgdW5zZXRQcmVkcm9wKHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUucGllY2VzLmRlbGV0ZShvcmlnKTtcbiAgICB1bnNlbGVjdChzdGF0ZSk7XG59XG5leHBvcnRzLmRyb3BOZXdQaWVjZSA9IGRyb3BOZXdQaWVjZTtcbmZ1bmN0aW9uIHNlbGVjdFNxdWFyZShzdGF0ZSwga2V5LCBmb3JjZSkge1xuICAgIGNhbGxVc2VyRnVuY3Rpb24oc3RhdGUuZXZlbnRzLnNlbGVjdCwga2V5KTtcbiAgICBpZiAoc3RhdGUuc2VsZWN0ZWQpIHtcbiAgICAgICAgaWYgKHN0YXRlLnNlbGVjdGVkID09PSBrZXkgJiYgIXN0YXRlLmRyYWdnYWJsZS5lbmFibGVkKSB7XG4gICAgICAgICAgICB1bnNlbGVjdChzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5ob2xkLmNhbmNlbCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChzdGF0ZS5zZWxlY3RhYmxlLmVuYWJsZWQgfHwgZm9yY2UpICYmIHN0YXRlLnNlbGVjdGVkICE9PSBrZXkpIHtcbiAgICAgICAgICAgIGlmICh1c2VyTW92ZShzdGF0ZSwgc3RhdGUuc2VsZWN0ZWQsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zdGF0cy5kcmFnZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc01vdmFibGUoc3RhdGUsIGtleSkgfHwgaXNQcmVtb3ZhYmxlKHN0YXRlLCBrZXkpKSB7XG4gICAgICAgIHNldFNlbGVjdGVkKHN0YXRlLCBrZXkpO1xuICAgICAgICBzdGF0ZS5ob2xkLnN0YXJ0KCk7XG4gICAgfVxufVxuZXhwb3J0cy5zZWxlY3RTcXVhcmUgPSBzZWxlY3RTcXVhcmU7XG5mdW5jdGlvbiBzZXRTZWxlY3RlZChzdGF0ZSwga2V5KSB7XG4gICAgc3RhdGUuc2VsZWN0ZWQgPSBrZXk7XG4gICAgaWYgKGlzUHJlbW92YWJsZShzdGF0ZSwga2V5KSkge1xuICAgICAgICBzdGF0ZS5wcmVtb3ZhYmxlLmRlc3RzID0gcHJlbW92ZV8xLnByZW1vdmUoc3RhdGUucGllY2VzLCBrZXksIHN0YXRlLnByZW1vdmFibGUuY2FzdGxlKTtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBzdGF0ZS5wcmVtb3ZhYmxlLmRlc3RzID0gdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5zZXRTZWxlY3RlZCA9IHNldFNlbGVjdGVkO1xuZnVuY3Rpb24gdW5zZWxlY3Qoc3RhdGUpIHtcbiAgICBzdGF0ZS5zZWxlY3RlZCA9IHVuZGVmaW5lZDtcbiAgICBzdGF0ZS5wcmVtb3ZhYmxlLmRlc3RzID0gdW5kZWZpbmVkO1xuICAgIHN0YXRlLmhvbGQuY2FuY2VsKCk7XG59XG5leHBvcnRzLnVuc2VsZWN0ID0gdW5zZWxlY3Q7XG5mdW5jdGlvbiBpc01vdmFibGUoc3RhdGUsIG9yaWcpIHtcbiAgICBjb25zdCBwaWVjZSA9IHN0YXRlLnBpZWNlcy5nZXQob3JpZyk7XG4gICAgcmV0dXJuICEhcGllY2UgJiYgKHN0YXRlLm1vdmFibGUuY29sb3IgPT09ICdib3RoJyB8fCAoc3RhdGUubW92YWJsZS5jb2xvciA9PT0gcGllY2UuY29sb3IgJiZcbiAgICAgICAgc3RhdGUudHVybkNvbG9yID09PSBwaWVjZS5jb2xvcikpO1xufVxuZnVuY3Rpb24gY2FuTW92ZShzdGF0ZSwgb3JpZywgZGVzdCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIG9yaWcgIT09IGRlc3QgJiYgaXNNb3ZhYmxlKHN0YXRlLCBvcmlnKSAmJiAoc3RhdGUubW92YWJsZS5mcmVlIHx8ICEhKChfYiA9IChfYSA9IHN0YXRlLm1vdmFibGUuZGVzdHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXQob3JpZykpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pbmNsdWRlcyhkZXN0KSkpO1xufVxuZXhwb3J0cy5jYW5Nb3ZlID0gY2FuTW92ZTtcbmZ1bmN0aW9uIGNhbkRyb3Aoc3RhdGUsIG9yaWcsIGRlc3QpIHtcbiAgICBjb25zdCBwaWVjZSA9IHN0YXRlLnBpZWNlcy5nZXQob3JpZyk7XG4gICAgcmV0dXJuICEhcGllY2UgJiYgKG9yaWcgPT09IGRlc3QgfHwgIXN0YXRlLnBpZWNlcy5oYXMoZGVzdCkpICYmIChzdGF0ZS5tb3ZhYmxlLmNvbG9yID09PSAnYm90aCcgfHwgKHN0YXRlLm1vdmFibGUuY29sb3IgPT09IHBpZWNlLmNvbG9yICYmXG4gICAgICAgIHN0YXRlLnR1cm5Db2xvciA9PT0gcGllY2UuY29sb3IpKTtcbn1cbmZ1bmN0aW9uIGlzUHJlbW92YWJsZShzdGF0ZSwgb3JpZykge1xuICAgIGNvbnN0IHBpZWNlID0gc3RhdGUucGllY2VzLmdldChvcmlnKTtcbiAgICByZXR1cm4gISFwaWVjZSAmJiBzdGF0ZS5wcmVtb3ZhYmxlLmVuYWJsZWQgJiZcbiAgICAgICAgc3RhdGUubW92YWJsZS5jb2xvciA9PT0gcGllY2UuY29sb3IgJiZcbiAgICAgICAgc3RhdGUudHVybkNvbG9yICE9PSBwaWVjZS5jb2xvcjtcbn1cbmZ1bmN0aW9uIGNhblByZW1vdmUoc3RhdGUsIG9yaWcsIGRlc3QpIHtcbiAgICByZXR1cm4gb3JpZyAhPT0gZGVzdCAmJlxuICAgICAgICBpc1ByZW1vdmFibGUoc3RhdGUsIG9yaWcpICYmXG4gICAgICAgIHByZW1vdmVfMS5wcmVtb3ZlKHN0YXRlLnBpZWNlcywgb3JpZywgc3RhdGUucHJlbW92YWJsZS5jYXN0bGUpLmluY2x1ZGVzKGRlc3QpO1xufVxuZnVuY3Rpb24gY2FuUHJlZHJvcChzdGF0ZSwgb3JpZywgZGVzdCkge1xuICAgIGNvbnN0IHBpZWNlID0gc3RhdGUucGllY2VzLmdldChvcmlnKTtcbiAgICBjb25zdCBkZXN0UGllY2UgPSBzdGF0ZS5waWVjZXMuZ2V0KGRlc3QpO1xuICAgIHJldHVybiAhIXBpZWNlICYmXG4gICAgICAgICghZGVzdFBpZWNlIHx8IGRlc3RQaWVjZS5jb2xvciAhPT0gc3RhdGUubW92YWJsZS5jb2xvcikgJiZcbiAgICAgICAgc3RhdGUucHJlZHJvcHBhYmxlLmVuYWJsZWQgJiZcbiAgICAgICAgKHBpZWNlLnJvbGUgIT09ICdwYXduJyB8fCAoZGVzdFsxXSAhPT0gJzEnICYmIGRlc3RbMV0gIT09ICc4JykpICYmXG4gICAgICAgIHN0YXRlLm1vdmFibGUuY29sb3IgPT09IHBpZWNlLmNvbG9yICYmXG4gICAgICAgIHN0YXRlLnR1cm5Db2xvciAhPT0gcGllY2UuY29sb3I7XG59XG5mdW5jdGlvbiBpc0RyYWdnYWJsZShzdGF0ZSwgb3JpZykge1xuICAgIGNvbnN0IHBpZWNlID0gc3RhdGUucGllY2VzLmdldChvcmlnKTtcbiAgICByZXR1cm4gISFwaWVjZSAmJiBzdGF0ZS5kcmFnZ2FibGUuZW5hYmxlZCAmJiAoc3RhdGUubW92YWJsZS5jb2xvciA9PT0gJ2JvdGgnIHx8IChzdGF0ZS5tb3ZhYmxlLmNvbG9yID09PSBwaWVjZS5jb2xvciAmJiAoc3RhdGUudHVybkNvbG9yID09PSBwaWVjZS5jb2xvciB8fCBzdGF0ZS5wcmVtb3ZhYmxlLmVuYWJsZWQpKSk7XG59XG5leHBvcnRzLmlzRHJhZ2dhYmxlID0gaXNEcmFnZ2FibGU7XG5mdW5jdGlvbiBwbGF5UHJlbW92ZShzdGF0ZSkge1xuICAgIGNvbnN0IG1vdmUgPSBzdGF0ZS5wcmVtb3ZhYmxlLmN1cnJlbnQ7XG4gICAgaWYgKCFtb3ZlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3Qgb3JpZyA9IG1vdmVbMF0sIGRlc3QgPSBtb3ZlWzFdO1xuICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG4gICAgaWYgKGNhbk1vdmUoc3RhdGUsIG9yaWcsIGRlc3QpKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGJhc2VVc2VyTW92ZShzdGF0ZSwgb3JpZywgZGVzdCk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0geyBwcmVtb3ZlOiB0cnVlIH07XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKVxuICAgICAgICAgICAgICAgIG1ldGFkYXRhLmNhcHR1cmVkID0gcmVzdWx0O1xuICAgICAgICAgICAgY2FsbFVzZXJGdW5jdGlvbihzdGF0ZS5tb3ZhYmxlLmV2ZW50cy5hZnRlciwgb3JpZywgZGVzdCwgbWV0YWRhdGEpO1xuICAgICAgICAgICAgc3VjY2VzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdW5zZXRQcmVtb3ZlKHN0YXRlKTtcbiAgICByZXR1cm4gc3VjY2Vzcztcbn1cbmV4cG9ydHMucGxheVByZW1vdmUgPSBwbGF5UHJlbW92ZTtcbmZ1bmN0aW9uIHBsYXlQcmVkcm9wKHN0YXRlLCB2YWxpZGF0ZSkge1xuICAgIGNvbnN0IGRyb3AgPSBzdGF0ZS5wcmVkcm9wcGFibGUuY3VycmVudDtcbiAgICBsZXQgc3VjY2VzcyA9IGZhbHNlO1xuICAgIGlmICghZHJvcClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh2YWxpZGF0ZShkcm9wKSkge1xuICAgICAgICBjb25zdCBwaWVjZSA9IHtcbiAgICAgICAgICAgIHJvbGU6IGRyb3Aucm9sZSxcbiAgICAgICAgICAgIGNvbG9yOiBzdGF0ZS5tb3ZhYmxlLmNvbG9yXG4gICAgICAgIH07XG4gICAgICAgIGlmIChiYXNlTmV3UGllY2Uoc3RhdGUsIHBpZWNlLCBkcm9wLmtleSkpIHtcbiAgICAgICAgICAgIGNhbGxVc2VyRnVuY3Rpb24oc3RhdGUubW92YWJsZS5ldmVudHMuYWZ0ZXJOZXdQaWVjZSwgZHJvcC5yb2xlLCBkcm9wLmtleSwge1xuICAgICAgICAgICAgICAgIHByZWRyb3A6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3VjY2VzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdW5zZXRQcmVkcm9wKHN0YXRlKTtcbiAgICByZXR1cm4gc3VjY2Vzcztcbn1cbmV4cG9ydHMucGxheVByZWRyb3AgPSBwbGF5UHJlZHJvcDtcbmZ1bmN0aW9uIGNhbmNlbE1vdmUoc3RhdGUpIHtcbiAgICB1bnNldFByZW1vdmUoc3RhdGUpO1xuICAgIHVuc2V0UHJlZHJvcChzdGF0ZSk7XG4gICAgdW5zZWxlY3Qoc3RhdGUpO1xufVxuZXhwb3J0cy5jYW5jZWxNb3ZlID0gY2FuY2VsTW92ZTtcbmZ1bmN0aW9uIHN0b3Aoc3RhdGUpIHtcbiAgICBzdGF0ZS5tb3ZhYmxlLmNvbG9yID1cbiAgICAgICAgc3RhdGUubW92YWJsZS5kZXN0cyA9XG4gICAgICAgICAgICBzdGF0ZS5hbmltYXRpb24uY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICBjYW5jZWxNb3ZlKHN0YXRlKTtcbn1cbmV4cG9ydHMuc3RvcCA9IHN0b3A7XG5mdW5jdGlvbiBnZXRLZXlBdERvbVBvcyhwb3MsIGFzV2hpdGUsIGJvdW5kcykge1xuICAgIGxldCBmaWxlID0gTWF0aC5mbG9vcig4ICogKHBvc1swXSAtIGJvdW5kcy5sZWZ0KSAvIGJvdW5kcy53aWR0aCk7XG4gICAgaWYgKCFhc1doaXRlKVxuICAgICAgICBmaWxlID0gNyAtIGZpbGU7XG4gICAgbGV0IHJhbmsgPSA3IC0gTWF0aC5mbG9vcig4ICogKHBvc1sxXSAtIGJvdW5kcy50b3ApIC8gYm91bmRzLmhlaWdodCk7XG4gICAgaWYgKCFhc1doaXRlKVxuICAgICAgICByYW5rID0gNyAtIHJhbms7XG4gICAgcmV0dXJuIChmaWxlID49IDAgJiYgZmlsZSA8IDggJiYgcmFuayA+PSAwICYmIHJhbmsgPCA4KSA/IHV0aWxfMS5wb3Mya2V5KFtmaWxlLCByYW5rXSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnRzLmdldEtleUF0RG9tUG9zID0gZ2V0S2V5QXREb21Qb3M7XG5mdW5jdGlvbiBnZXRTbmFwcGVkS2V5QXREb21Qb3Mob3JpZywgcG9zLCBhc1doaXRlLCBib3VuZHMpIHtcbiAgICBjb25zdCBvcmlnUG9zID0gdXRpbF8xLmtleTJwb3Mob3JpZyk7XG4gICAgY29uc3QgdmFsaWRTbmFwUG9zID0gdXRpbF8xLmFsbFBvcy5maWx0ZXIocG9zMiA9PiB7XG4gICAgICAgIHJldHVybiBwcmVtb3ZlXzEucXVlZW4ob3JpZ1Bvc1swXSwgb3JpZ1Bvc1sxXSwgcG9zMlswXSwgcG9zMlsxXSkgfHwgcHJlbW92ZV8xLmtuaWdodChvcmlnUG9zWzBdLCBvcmlnUG9zWzFdLCBwb3MyWzBdLCBwb3MyWzFdKTtcbiAgICB9KTtcbiAgICBjb25zdCB2YWxpZFNuYXBDZW50ZXJzID0gdmFsaWRTbmFwUG9zLm1hcChwb3MyID0+IHV0aWxfMS5jb21wdXRlU3F1YXJlQ2VudGVyKHV0aWxfMS5wb3Mya2V5KHBvczIpLCBhc1doaXRlLCBib3VuZHMpKTtcbiAgICBjb25zdCB2YWxpZFNuYXBEaXN0YW5jZXMgPSB2YWxpZFNuYXBDZW50ZXJzLm1hcChwb3MyID0+IHV0aWxfMS5kaXN0YW5jZVNxKHBvcywgcG9zMikpO1xuICAgIGNvbnN0IFssIGNsb3Nlc3RTbmFwSW5kZXhdID0gdmFsaWRTbmFwRGlzdGFuY2VzLnJlZHVjZSgoYSwgYiwgaW5kZXgpID0+IGFbMF0gPCBiID8gYSA6IFtiLCBpbmRleF0sIFt2YWxpZFNuYXBEaXN0YW5jZXNbMF0sIDBdKTtcbiAgICByZXR1cm4gdXRpbF8xLnBvczJrZXkodmFsaWRTbmFwUG9zW2Nsb3Nlc3RTbmFwSW5kZXhdKTtcbn1cbmV4cG9ydHMuZ2V0U25hcHBlZEtleUF0RG9tUG9zID0gZ2V0U25hcHBlZEtleUF0RG9tUG9zO1xuZnVuY3Rpb24gd2hpdGVQb3Yocykge1xuICAgIHJldHVybiBzLm9yaWVudGF0aW9uID09PSAnd2hpdGUnO1xufVxuZXhwb3J0cy53aGl0ZVBvdiA9IHdoaXRlUG92O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9hcmQuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9lY2hlc3Nncm91bmQvYm9hcmQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cancel = exports.end = exports.move = exports.dragNewPiece = exports.start = void 0;\nvar board = __webpack_require__(1);\nvar util = __webpack_require__(0);\nvar draw_1 = __webpack_require__(7);\nvar anim_1 = __webpack_require__(5);\nfunction start(s, e) {\n    if (!e.isTrusted || e.button !== undefined && e.button !== 0) return;\n    if (e.touches && e.touches.length > 1) return;\n    var bounds = s.dom.bounds(),\n        position = util.eventPosition(e),\n        orig = board.getKeyAtDomPos(position, board.whitePov(s), bounds);\n    if (!orig) return;\n    var piece = s.pieces.get(orig);\n    var previouslySelected = s.selected;\n    if (!previouslySelected && s.drawable.enabled && (s.drawable.eraseOnClick || !piece || piece.color !== s.turnColor)) draw_1.clear(s);\n    if (e.cancelable !== false && (!e.touches || !s.movable.color || piece || previouslySelected || pieceCloseTo(s, position))) e.preventDefault();\n    var hadPremove = !!s.premovable.current;\n    var hadPredrop = !!s.predroppable.current;\n    s.stats.ctrlKey = e.ctrlKey;\n    if (s.selected && board.canMove(s, s.selected, orig)) {\n        anim_1.anim(function (state) {\n            return board.selectSquare(state, orig);\n        }, s);\n    } else {\n        board.selectSquare(s, orig);\n    }\n    var stillSelected = s.selected === orig;\n    var element = pieceElementByKey(s, orig);\n    if (piece && element && stillSelected && board.isDraggable(s, orig)) {\n        s.draggable.current = {\n            orig: orig,\n            piece: piece,\n            origPos: position,\n            pos: position,\n            started: s.draggable.autoDistance && s.stats.dragged,\n            element: element,\n            previouslySelected: previouslySelected,\n            originTarget: e.target\n        };\n        element.cgDragging = true;\n        element.classList.add('dragging');\n        var ghost = s.dom.elements.ghost;\n        if (ghost) {\n            ghost.className = \"ghost \" + piece.color + \" \" + piece.role;\n            util.translateAbs(ghost, util.posToTranslateAbs(bounds)(util.key2pos(orig), board.whitePov(s)));\n            util.setVisible(ghost, true);\n        }\n        processDrag(s);\n    } else {\n        if (hadPremove) board.unsetPremove(s);\n        if (hadPredrop) board.unsetPredrop(s);\n    }\n    s.dom.redraw();\n}\nexports.start = start;\nfunction pieceCloseTo(s, pos) {\n    var asWhite = board.whitePov(s),\n        bounds = s.dom.bounds(),\n        radiusSq = Math.pow(bounds.width / 8, 2);\n    for (var key in s.pieces) {\n        var center = util.computeSquareCenter(key, asWhite, bounds);\n        if (util.distanceSq(center, pos) <= radiusSq) return true;\n    }\n    return false;\n}\nfunction dragNewPiece(s, piece, e, force) {\n    var key = 'a0';\n    s.pieces.set(key, piece);\n    s.dom.redraw();\n    var position = util.eventPosition(e);\n    s.draggable.current = {\n        orig: key,\n        piece: piece,\n        origPos: position,\n        pos: position,\n        started: true,\n        element: function element() {\n            return pieceElementByKey(s, key);\n        },\n        originTarget: e.target,\n        newPiece: true,\n        force: !!force\n    };\n    processDrag(s);\n}\nexports.dragNewPiece = dragNewPiece;\nfunction processDrag(s) {\n    requestAnimationFrame(function () {\n        var _a;\n        var cur = s.draggable.current;\n        if (!cur) return;\n        if ((_a = s.animation.current) === null || _a === void 0 ? void 0 : _a.plan.anims.has(cur.orig)) s.animation.current = undefined;\n        var origPiece = s.pieces.get(cur.orig);\n        if (!origPiece || !util.samePiece(origPiece, cur.piece)) cancel(s);else {\n            if (!cur.started && util.distanceSq(cur.pos, cur.origPos) >= Math.pow(s.draggable.distance, 2)) cur.started = true;\n            if (cur.started) {\n                if (typeof cur.element === 'function') {\n                    var found = cur.element();\n                    if (!found) return;\n                    found.cgDragging = true;\n                    found.classList.add('dragging');\n                    cur.element = found;\n                }\n                var bounds = s.dom.bounds();\n                util.translateAbs(cur.element, [cur.pos[0] - bounds.left - bounds.width / 16, cur.pos[1] - bounds.top - bounds.height / 16]);\n            }\n        }\n        processDrag(s);\n    });\n}\nfunction move(s, e) {\n    if (s.draggable.current && (!e.touches || e.touches.length < 2)) {\n        s.draggable.current.pos = util.eventPosition(e);\n    }\n}\nexports.move = move;\nfunction end(s, e) {\n    var cur = s.draggable.current;\n    if (!cur) return;\n    if (e.type === 'touchend' && e.cancelable !== false) e.preventDefault();\n    if (e.type === 'touchend' && cur.originTarget !== e.target && !cur.newPiece) {\n        s.draggable.current = undefined;\n        return;\n    }\n    board.unsetPremove(s);\n    board.unsetPredrop(s);\n    var eventPos = util.eventPosition(e) || cur.pos;\n    var dest = board.getKeyAtDomPos(eventPos, board.whitePov(s), s.dom.bounds());\n    if (dest && cur.started && cur.orig !== dest) {\n        if (cur.newPiece) board.dropNewPiece(s, cur.orig, dest, cur.force);else {\n            s.stats.ctrlKey = e.ctrlKey;\n            if (board.userMove(s, cur.orig, dest)) s.stats.dragged = true;\n        }\n    } else if (cur.newPiece) {\n        s.pieces.delete(cur.orig);\n    } else if (s.draggable.deleteOnDropOff && !dest) {\n        s.pieces.delete(cur.orig);\n        board.callUserFunction(s.events.change);\n    }\n    if (cur.orig === cur.previouslySelected && (cur.orig === dest || !dest)) board.unselect(s);else if (!s.selectable.enabled) board.unselect(s);\n    removeDragElements(s);\n    s.draggable.current = undefined;\n    s.dom.redraw();\n}\nexports.end = end;\nfunction cancel(s) {\n    var cur = s.draggable.current;\n    if (cur) {\n        if (cur.newPiece) s.pieces.delete(cur.orig);\n        s.draggable.current = undefined;\n        board.unselect(s);\n        removeDragElements(s);\n        s.dom.redraw();\n    }\n}\nexports.cancel = cancel;\nfunction removeDragElements(s) {\n    var e = s.dom.elements;\n    if (e.ghost) util.setVisible(e.ghost, false);\n}\nfunction pieceElementByKey(s, key) {\n    var el = s.dom.elements.board.firstChild;\n    while (el) {\n        if (el.cgKey === key && el.tagName === 'PIECE') return el;\n        el = el.nextSibling;\n    }\n    return;\n}\n//# sourceMappingURL=drag.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.write = exports.read = exports.initial = void 0;\nvar util_1 = __webpack_require__(0);\nvar cg = __webpack_require__(4);\nexports.initial = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\nvar roles = { p: 'pawn', r: 'rook', n: 'knight', b: 'bishop', q: 'queen', k: 'king', e: 'elephant' };\nvar letters = { pawn: 'p', rook: 'r', knight: 'n', bishop: 'b', queen: 'q', king: 'k', elephant: 'e' };\nfunction read(fen) {\n    if (fen === 'start') fen = exports.initial;\n    var pieces = new Map();\n    var row = 7,\n        col = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = fen[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var c = _step.value;\n\n            switch (c) {\n                case ' ':\n                    return pieces;\n                case '/':\n                    --row;\n                    if (row < 0) return pieces;\n                    col = 0;\n                    break;\n                case '~':\n                    var piece = pieces.get(util_1.pos2key([col, row]));\n                    if (piece) piece.promoted = true;\n                    break;\n                default:\n                    var nb = c.charCodeAt(0);\n                    if (nb < 57) col += nb - 48;else {\n                        var role = c.toLowerCase();\n                        pieces.set(util_1.pos2key([col, row]), {\n                            role: roles[role],\n                            color: c === role ? 'black' : 'white'\n                        });\n                        ++col;\n                    }\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    return pieces;\n}\nexports.read = read;\nfunction write(pieces) {\n    return util_1.invRanks.map(function (y) {\n        return cg.files.map(function (x) {\n            var piece = pieces.get(x + y);\n            if (piece) {\n                var letter = letters[piece.role];\n                return piece.color === 'white' ? letter.toUpperCase() : letter;\n            } else return '1';\n        }).join('');\n    }).join('/').replace(/1{2,}/g, function (s) {\n        return s.length.toString();\n    });\n}\nexports.write = write;\n//# sourceMappingURL=fen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VjaGVzc2dyb3VuZC9mZW4uanM/MTc1ZSJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIndyaXRlIiwicmVhZCIsImluaXRpYWwiLCJ1dGlsXzEiLCJyZXF1aXJlIiwiY2ciLCJyb2xlcyIsInAiLCJyIiwibiIsImIiLCJxIiwiayIsImUiLCJsZXR0ZXJzIiwicGF3biIsInJvb2siLCJrbmlnaHQiLCJiaXNob3AiLCJxdWVlbiIsImtpbmciLCJlbGVwaGFudCIsImZlbiIsInBpZWNlcyIsIk1hcCIsInJvdyIsImNvbCIsImMiLCJwaWVjZSIsImdldCIsInBvczJrZXkiLCJwcm9tb3RlZCIsIm5iIiwiY2hhckNvZGVBdCIsInJvbGUiLCJ0b0xvd2VyQ2FzZSIsInNldCIsImNvbG9yIiwiaW52UmFua3MiLCJtYXAiLCJmaWxlcyIsIngiLCJ5IiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJqb2luIiwicmVwbGFjZSIsInMiLCJsZW5ndGgiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBRCxRQUFRRSxLQUFSLEdBQWdCRixRQUFRRyxJQUFSLEdBQWVILFFBQVFJLE9BQVIsR0FBa0IsS0FBSyxDQUF0RDtBQUNBLElBQU1DLFNBQVMsbUJBQUFDLENBQVEsQ0FBUixDQUFmO0FBQ0EsSUFBTUMsS0FBSyxtQkFBQUQsQ0FBUSxDQUFSLENBQVg7QUFDQU4sUUFBUUksT0FBUixHQUFrQiw2Q0FBbEI7QUFDQSxJQUFNSSxRQUFRLEVBQUVDLEdBQUcsTUFBTCxFQUFhQyxHQUFHLE1BQWhCLEVBQXdCQyxHQUFHLFFBQTNCLEVBQXFDQyxHQUFHLFFBQXhDLEVBQWtEQyxHQUFHLE9BQXJELEVBQThEQyxHQUFHLE1BQWpFLEVBQXlFQyxHQUFHLFVBQTVFLEVBQWQ7QUFDQSxJQUFNQyxVQUFVLEVBQUVDLE1BQU0sR0FBUixFQUFhQyxNQUFNLEdBQW5CLEVBQXdCQyxRQUFRLEdBQWhDLEVBQXFDQyxRQUFRLEdBQTdDLEVBQWtEQyxPQUFPLEdBQXpELEVBQThEQyxNQUFNLEdBQXBFLEVBQXlFQyxVQUFVLEdBQW5GLEVBQWhCO0FBQ0EsU0FBU3BCLElBQVQsQ0FBY3FCLEdBQWQsRUFBbUI7QUFDZixRQUFJQSxRQUFRLE9BQVosRUFDSUEsTUFBTXhCLFFBQVFJLE9BQWQ7QUFDSixRQUFNcUIsU0FBUyxJQUFJQyxHQUFKLEVBQWY7QUFDQSxRQUFJQyxNQUFNLENBQVY7QUFBQSxRQUFhQyxNQUFNLENBQW5CO0FBSmU7QUFBQTtBQUFBOztBQUFBO0FBS2YsNkJBQWdCSixHQUFoQiw4SEFBcUI7QUFBQSxnQkFBVkssQ0FBVTs7QUFDakIsb0JBQVFBLENBQVI7QUFDSSxxQkFBSyxHQUFMO0FBQVUsMkJBQU9KLE1BQVA7QUFDVixxQkFBSyxHQUFMO0FBQ0ksc0JBQUVFLEdBQUY7QUFDQSx3QkFBSUEsTUFBTSxDQUFWLEVBQ0ksT0FBT0YsTUFBUDtBQUNKRywwQkFBTSxDQUFOO0FBQ0E7QUFDSixxQkFBSyxHQUFMO0FBQ0ksd0JBQU1FLFFBQVFMLE9BQU9NLEdBQVAsQ0FBVzFCLE9BQU8yQixPQUFQLENBQWUsQ0FBQ0osR0FBRCxFQUFNRCxHQUFOLENBQWYsQ0FBWCxDQUFkO0FBQ0Esd0JBQUlHLEtBQUosRUFDSUEsTUFBTUcsUUFBTixHQUFpQixJQUFqQjtBQUNKO0FBQ0o7QUFDSSx3QkFBTUMsS0FBS0wsRUFBRU0sVUFBRixDQUFhLENBQWIsQ0FBWDtBQUNBLHdCQUFJRCxLQUFLLEVBQVQsRUFDSU4sT0FBT00sS0FBSyxFQUFaLENBREosS0FFSztBQUNELDRCQUFNRSxPQUFPUCxFQUFFUSxXQUFGLEVBQWI7QUFDQVosK0JBQU9hLEdBQVAsQ0FBV2pDLE9BQU8yQixPQUFQLENBQWUsQ0FBQ0osR0FBRCxFQUFNRCxHQUFOLENBQWYsQ0FBWCxFQUF1QztBQUNuQ1Msa0NBQU01QixNQUFNNEIsSUFBTixDQUQ2QjtBQUVuQ0csbUNBQU9WLE1BQU1PLElBQU4sR0FBYSxPQUFiLEdBQXVCO0FBRksseUJBQXZDO0FBSUEsMEJBQUVSLEdBQUY7QUFDSDtBQXhCVDtBQTBCSDtBQWhDYztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWlDZixXQUFPSCxNQUFQO0FBQ0g7QUFDRHpCLFFBQVFHLElBQVIsR0FBZUEsSUFBZjtBQUNBLFNBQVNELEtBQVQsQ0FBZXVCLE1BQWYsRUFBdUI7QUFDbkIsV0FBT3BCLE9BQU9tQyxRQUFQLENBQWdCQyxHQUFoQixDQUFvQjtBQUFBLGVBQUtsQyxHQUFHbUMsS0FBSCxDQUFTRCxHQUFULENBQWEsYUFBSztBQUM5QyxnQkFBTVgsUUFBUUwsT0FBT00sR0FBUCxDQUFXWSxJQUFJQyxDQUFmLENBQWQ7QUFDQSxnQkFBSWQsS0FBSixFQUFXO0FBQ1Asb0JBQU1lLFNBQVM3QixRQUFRYyxNQUFNTSxJQUFkLENBQWY7QUFDQSx1QkFBT04sTUFBTVMsS0FBTixLQUFnQixPQUFoQixHQUEwQk0sT0FBT0MsV0FBUCxFQUExQixHQUFpREQsTUFBeEQ7QUFDSCxhQUhELE1BS0ksT0FBTyxHQUFQO0FBQ1AsU0FSK0IsRUFRN0JFLElBUjZCLENBUXhCLEVBUndCLENBQUw7QUFBQSxLQUFwQixFQVFNQSxJQVJOLENBUVcsR0FSWCxFQVFnQkMsT0FSaEIsQ0FRd0IsUUFSeEIsRUFRa0M7QUFBQSxlQUFLQyxFQUFFQyxNQUFGLENBQVNDLFFBQVQsRUFBTDtBQUFBLEtBUmxDLENBQVA7QUFTSDtBQUNEbkQsUUFBUUUsS0FBUixHQUFnQkEsS0FBaEI7QUFDQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndyaXRlID0gZXhwb3J0cy5yZWFkID0gZXhwb3J0cy5pbml0aWFsID0gdm9pZCAwO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IGNnID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5leHBvcnRzLmluaXRpYWwgPSAncm5icWtibnIvcHBwcHBwcHAvOC84LzgvOC9QUFBQUFBQUC9STkJRS0JOUic7XG5jb25zdCByb2xlcyA9IHsgcDogJ3Bhd24nLCByOiAncm9vaycsIG46ICdrbmlnaHQnLCBiOiAnYmlzaG9wJywgcTogJ3F1ZWVuJywgazogJ2tpbmcnLCBlOiAnZWxlcGhhbnQnIH07XG5jb25zdCBsZXR0ZXJzID0geyBwYXduOiAncCcsIHJvb2s6ICdyJywga25pZ2h0OiAnbicsIGJpc2hvcDogJ2InLCBxdWVlbjogJ3EnLCBraW5nOiAnaycsIGVsZXBoYW50OiAnZScgfTtcbmZ1bmN0aW9uIHJlYWQoZmVuKSB7XG4gICAgaWYgKGZlbiA9PT0gJ3N0YXJ0JylcbiAgICAgICAgZmVuID0gZXhwb3J0cy5pbml0aWFsO1xuICAgIGNvbnN0IHBpZWNlcyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgcm93ID0gNywgY29sID0gMDtcbiAgICBmb3IgKGNvbnN0IGMgb2YgZmVuKSB7XG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgY2FzZSAnICc6IHJldHVybiBwaWVjZXM7XG4gICAgICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICAgICAgICAtLXJvdztcbiAgICAgICAgICAgICAgICBpZiAocm93IDwgMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBpZWNlcztcbiAgICAgICAgICAgICAgICBjb2wgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnfic6XG4gICAgICAgICAgICAgICAgY29uc3QgcGllY2UgPSBwaWVjZXMuZ2V0KHV0aWxfMS5wb3Mya2V5KFtjb2wsIHJvd10pKTtcbiAgICAgICAgICAgICAgICBpZiAocGllY2UpXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlLnByb21vdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc3QgbmIgPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgaWYgKG5iIDwgNTcpXG4gICAgICAgICAgICAgICAgICAgIGNvbCArPSBuYiAtIDQ4O1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByb2xlID0gYy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBwaWVjZXMuc2V0KHV0aWxfMS5wb3Mya2V5KFtjb2wsIHJvd10pLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlOiByb2xlc1tyb2xlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjID09PSByb2xlID8gJ2JsYWNrJyA6ICd3aGl0ZScsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICArK2NvbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBpZWNlcztcbn1cbmV4cG9ydHMucmVhZCA9IHJlYWQ7XG5mdW5jdGlvbiB3cml0ZShwaWVjZXMpIHtcbiAgICByZXR1cm4gdXRpbF8xLmludlJhbmtzLm1hcCh5ID0+IGNnLmZpbGVzLm1hcCh4ID0+IHtcbiAgICAgICAgY29uc3QgcGllY2UgPSBwaWVjZXMuZ2V0KHggKyB5KTtcbiAgICAgICAgaWYgKHBpZWNlKSB7XG4gICAgICAgICAgICBjb25zdCBsZXR0ZXIgPSBsZXR0ZXJzW3BpZWNlLnJvbGVdO1xuICAgICAgICAgICAgcmV0dXJuIHBpZWNlLmNvbG9yID09PSAnd2hpdGUnID8gbGV0dGVyLnRvVXBwZXJDYXNlKCkgOiBsZXR0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuICcxJztcbiAgICB9KS5qb2luKCcnKSkuam9pbignLycpLnJlcGxhY2UoLzF7Mix9L2csIHMgPT4gcy5sZW5ndGgudG9TdHJpbmcoKSk7XG59XG5leHBvcnRzLndyaXRlID0gd3JpdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZW4uanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9lY2hlc3Nncm91bmQvZmVuLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ranks = exports.files = exports.colors = void 0;\nexports.colors = ['white', 'black'];\nexports.files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\nexports.ranks = ['1', '2', '3', '4', '5', '6', '7', '8'];\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VjaGVzc2dyb3VuZC90eXBlcy5qcz9hODkwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmFua3MiLCJmaWxlcyIsImNvbG9ycyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBRCxRQUFRRSxLQUFSLEdBQWdCRixRQUFRRyxLQUFSLEdBQWdCSCxRQUFRSSxNQUFSLEdBQWlCLEtBQUssQ0FBdEQ7QUFDQUosUUFBUUksTUFBUixHQUFpQixDQUFDLE9BQUQsRUFBVSxPQUFWLENBQWpCO0FBQ0FKLFFBQVFHLEtBQVIsR0FBZ0IsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsRUFBZ0IsR0FBaEIsRUFBcUIsR0FBckIsRUFBMEIsR0FBMUIsRUFBK0IsR0FBL0IsRUFBb0MsR0FBcEMsQ0FBaEI7QUFDQUgsUUFBUUUsS0FBUixHQUFnQixDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixFQUFvQyxHQUFwQyxDQUFoQjtBQUNBIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmFua3MgPSBleHBvcnRzLmZpbGVzID0gZXhwb3J0cy5jb2xvcnMgPSB2b2lkIDA7XG5leHBvcnRzLmNvbG9ycyA9IFsnd2hpdGUnLCAnYmxhY2snXTtcbmV4cG9ydHMuZmlsZXMgPSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZScsICdmJywgJ2cnLCAnaCddO1xuZXhwb3J0cy5yYW5rcyA9IFsnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2VjaGVzc2dyb3VuZC90eXBlcy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.render = exports.anim = void 0;\nvar util = __webpack_require__(0);\nfunction anim(mutation, state) {\n    return state.animation.enabled ? animate(mutation, state) : render(mutation, state);\n}\nexports.anim = anim;\nfunction render(mutation, state) {\n    var result = mutation(state);\n    state.dom.redraw();\n    return result;\n}\nexports.render = render;\nfunction makePiece(key, piece) {\n    return {\n        key: key,\n        pos: util.key2pos(key),\n        piece: piece\n    };\n}\nfunction closer(piece, pieces) {\n    return pieces.sort(function (p1, p2) {\n        return util.distanceSq(piece.pos, p1.pos) - util.distanceSq(piece.pos, p2.pos);\n    })[0];\n}\nfunction computePlan(prevPieces, current) {\n    var anims = new Map(),\n        animedOrigs = [],\n        fadings = new Map(),\n        missings = [],\n        news = [],\n        prePieces = new Map();\n    var curP = void 0,\n        preP = void 0,\n        vector = void 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = prevPieces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                k = _step$value[0],\n                p = _step$value[1];\n\n            prePieces.set(k, makePiece(k, p));\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n        for (var _iterator2 = util.allKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var key = _step2.value;\n\n            curP = current.pieces.get(key);\n            preP = prePieces.get(key);\n            if (curP) {\n                if (preP) {\n                    if (!util.samePiece(curP, preP.piece)) {\n                        missings.push(preP);\n                        news.push(makePiece(key, curP));\n                    }\n                } else news.push(makePiece(key, curP));\n            } else if (preP) missings.push(preP);\n        }\n    } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n            }\n        } finally {\n            if (_didIteratorError2) {\n                throw _iteratorError2;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n        var _loop = function _loop() {\n            var newP = _step3.value;\n\n            preP = closer(newP, missings.filter(function (p) {\n                return util.samePiece(newP.piece, p.piece);\n            }));\n            if (preP) {\n                vector = [preP.pos[0] - newP.pos[0], preP.pos[1] - newP.pos[1]];\n                anims.set(newP.key, vector.concat(vector));\n                animedOrigs.push(preP.key);\n            }\n        };\n\n        for (var _iterator3 = news[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            _loop();\n        }\n    } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                _iterator3.return();\n            }\n        } finally {\n            if (_didIteratorError3) {\n                throw _iteratorError3;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n        for (var _iterator4 = missings[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var p = _step4.value;\n\n            if (!animedOrigs.includes(p.key)) fadings.set(p.key, p.piece);\n        }\n    } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n            }\n        } finally {\n            if (_didIteratorError4) {\n                throw _iteratorError4;\n            }\n        }\n    }\n\n    return {\n        anims: anims,\n        fadings: fadings\n    };\n}\nfunction step(state, now) {\n    var cur = state.animation.current;\n    if (cur === undefined) {\n        if (!state.dom.destroyed) state.dom.redrawNow();\n        return;\n    }\n    var rest = 1 - (now - cur.start) * cur.frequency;\n    if (rest <= 0) {\n        state.animation.current = undefined;\n        state.dom.redrawNow();\n    } else {\n        var ease = easing(rest);\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n            for (var _iterator5 = cur.plan.anims.values()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var cfg = _step5.value;\n\n                cfg[2] = cfg[0] * ease;\n                cfg[3] = cfg[1] * ease;\n            }\n        } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                    _iterator5.return();\n                }\n            } finally {\n                if (_didIteratorError5) {\n                    throw _iteratorError5;\n                }\n            }\n        }\n\n        state.dom.redrawNow(true);\n        requestAnimationFrame(function () {\n            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : performance.now();\n            return step(state, now);\n        });\n    }\n}\nfunction animate(mutation, state) {\n    var prevPieces = new Map(state.pieces);\n    var result = mutation(state);\n    var plan = computePlan(prevPieces, state);\n    if (plan.anims.size || plan.fadings.size) {\n        var alreadyRunning = state.animation.current && state.animation.current.start;\n        state.animation.current = {\n            start: performance.now(),\n            frequency: 1 / state.animation.duration,\n            plan: plan\n        };\n        if (!alreadyRunning) step(state, performance.now());\n    } else {\n        state.dom.redraw();\n    }\n    return result;\n}\nfunction easing(t) {\n    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n}\n//# sourceMappingURL=anim.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.configure = void 0;\nvar board_1 = __webpack_require__(1);\nvar fen_1 = __webpack_require__(3);\nfunction configure(state, config) {\n    var _a;\n    if ((_a = config.movable) === null || _a === void 0 ? void 0 : _a.dests) state.movable.dests = undefined;\n    merge(state, config);\n    if (config.fen) {\n        state.pieces = fen_1.read(config.fen);\n        state.drawable.shapes = [];\n    }\n    if (config.hasOwnProperty('check')) board_1.setCheck(state, config.check || false);\n    if (config.hasOwnProperty('lastMove') && !config.lastMove) state.lastMove = undefined;else if (config.lastMove) state.lastMove = config.lastMove;\n    if (state.selected) board_1.setSelected(state, state.selected);\n    if (!state.animation.duration || state.animation.duration < 100) state.animation.enabled = false;\n    if (!state.movable.rookCastle && state.movable.dests) {\n        var rank = state.movable.color === 'white' ? '1' : '8',\n            kingStartPos = 'e' + rank,\n            dests = state.movable.dests.get(kingStartPos),\n            king = state.pieces.get(kingStartPos);\n        if (!dests || !king || king.role !== 'king') return;\n        state.movable.dests.set(kingStartPos, dests.filter(function (d) {\n            return !(d === 'a' + rank && dests.includes('c' + rank)) && !(d === 'h' + rank && dests.includes('g' + rank));\n        }));\n    }\n}\nexports.configure = configure;\nfunction merge(base, extend) {\n    for (var key in extend) {\n        if (isObject(base[key]) && isObject(extend[key])) merge(base[key], extend[key]);else base[key] = extend[key];\n    }\n}\nfunction isObject(o) {\n    return (typeof o === \"undefined\" ? \"undefined\" : _typeof(o)) === 'object';\n}\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VjaGVzc2dyb3VuZC9jb25maWcuanM/MTA1MiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbmZpZ3VyZSIsImJvYXJkXzEiLCJyZXF1aXJlIiwiZmVuXzEiLCJzdGF0ZSIsImNvbmZpZyIsIl9hIiwibW92YWJsZSIsImRlc3RzIiwidW5kZWZpbmVkIiwibWVyZ2UiLCJmZW4iLCJwaWVjZXMiLCJyZWFkIiwiZHJhd2FibGUiLCJzaGFwZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInNldENoZWNrIiwiY2hlY2siLCJsYXN0TW92ZSIsInNlbGVjdGVkIiwic2V0U2VsZWN0ZWQiLCJhbmltYXRpb24iLCJkdXJhdGlvbiIsImVuYWJsZWQiLCJyb29rQ2FzdGxlIiwicmFuayIsImNvbG9yIiwia2luZ1N0YXJ0UG9zIiwiZ2V0Iiwia2luZyIsInJvbGUiLCJzZXQiLCJmaWx0ZXIiLCJkIiwiaW5jbHVkZXMiLCJiYXNlIiwiZXh0ZW5kIiwia2V5IiwiaXNPYmplY3QiLCJvIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQUQsUUFBUUUsU0FBUixHQUFvQixLQUFLLENBQXpCO0FBQ0EsSUFBTUMsVUFBVSxtQkFBQUMsQ0FBUSxDQUFSLENBQWhCO0FBQ0EsSUFBTUMsUUFBUSxtQkFBQUQsQ0FBUSxDQUFSLENBQWQ7QUFDQSxTQUFTRixTQUFULENBQW1CSSxLQUFuQixFQUEwQkMsTUFBMUIsRUFBa0M7QUFDOUIsUUFBSUMsRUFBSjtBQUNBLFFBQUksQ0FBQ0EsS0FBS0QsT0FBT0UsT0FBYixNQUEwQixJQUExQixJQUFrQ0QsT0FBTyxLQUFLLENBQTlDLEdBQWtELEtBQUssQ0FBdkQsR0FBMkRBLEdBQUdFLEtBQWxFLEVBQ0lKLE1BQU1HLE9BQU4sQ0FBY0MsS0FBZCxHQUFzQkMsU0FBdEI7QUFDSkMsVUFBTU4sS0FBTixFQUFhQyxNQUFiO0FBQ0EsUUFBSUEsT0FBT00sR0FBWCxFQUFnQjtBQUNaUCxjQUFNUSxNQUFOLEdBQWVULE1BQU1VLElBQU4sQ0FBV1IsT0FBT00sR0FBbEIsQ0FBZjtBQUNBUCxjQUFNVSxRQUFOLENBQWVDLE1BQWYsR0FBd0IsRUFBeEI7QUFDSDtBQUNELFFBQUlWLE9BQU9XLGNBQVAsQ0FBc0IsT0FBdEIsQ0FBSixFQUNJZixRQUFRZ0IsUUFBUixDQUFpQmIsS0FBakIsRUFBd0JDLE9BQU9hLEtBQVAsSUFBZ0IsS0FBeEM7QUFDSixRQUFJYixPQUFPVyxjQUFQLENBQXNCLFVBQXRCLEtBQXFDLENBQUNYLE9BQU9jLFFBQWpELEVBQ0lmLE1BQU1lLFFBQU4sR0FBaUJWLFNBQWpCLENBREosS0FFSyxJQUFJSixPQUFPYyxRQUFYLEVBQ0RmLE1BQU1lLFFBQU4sR0FBaUJkLE9BQU9jLFFBQXhCO0FBQ0osUUFBSWYsTUFBTWdCLFFBQVYsRUFDSW5CLFFBQVFvQixXQUFSLENBQW9CakIsS0FBcEIsRUFBMkJBLE1BQU1nQixRQUFqQztBQUNKLFFBQUksQ0FBQ2hCLE1BQU1rQixTQUFOLENBQWdCQyxRQUFqQixJQUE2Qm5CLE1BQU1rQixTQUFOLENBQWdCQyxRQUFoQixHQUEyQixHQUE1RCxFQUNJbkIsTUFBTWtCLFNBQU4sQ0FBZ0JFLE9BQWhCLEdBQTBCLEtBQTFCO0FBQ0osUUFBSSxDQUFDcEIsTUFBTUcsT0FBTixDQUFja0IsVUFBZixJQUE2QnJCLE1BQU1HLE9BQU4sQ0FBY0MsS0FBL0MsRUFBc0Q7QUFDbEQsWUFBTWtCLE9BQU90QixNQUFNRyxPQUFOLENBQWNvQixLQUFkLEtBQXdCLE9BQXhCLEdBQWtDLEdBQWxDLEdBQXdDLEdBQXJEO0FBQUEsWUFBMERDLGVBQWUsTUFBTUYsSUFBL0U7QUFBQSxZQUFxRmxCLFFBQVFKLE1BQU1HLE9BQU4sQ0FBY0MsS0FBZCxDQUFvQnFCLEdBQXBCLENBQXdCRCxZQUF4QixDQUE3RjtBQUFBLFlBQW9JRSxPQUFPMUIsTUFBTVEsTUFBTixDQUFhaUIsR0FBYixDQUFpQkQsWUFBakIsQ0FBM0k7QUFDQSxZQUFJLENBQUNwQixLQUFELElBQVUsQ0FBQ3NCLElBQVgsSUFBbUJBLEtBQUtDLElBQUwsS0FBYyxNQUFyQyxFQUNJO0FBQ0ozQixjQUFNRyxPQUFOLENBQWNDLEtBQWQsQ0FBb0J3QixHQUFwQixDQUF3QkosWUFBeEIsRUFBc0NwQixNQUFNeUIsTUFBTixDQUFhO0FBQUEsbUJBQUssRUFBR0MsTUFBTSxNQUFNUixJQUFiLElBQXNCbEIsTUFBTTJCLFFBQU4sQ0FBZSxNQUFNVCxJQUFyQixDQUF4QixLQUNwRCxFQUFHUSxNQUFNLE1BQU1SLElBQWIsSUFBc0JsQixNQUFNMkIsUUFBTixDQUFlLE1BQU1ULElBQXJCLENBQXhCLENBRCtDO0FBQUEsU0FBYixDQUF0QztBQUVIO0FBQ0o7QUFDRDVCLFFBQVFFLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0EsU0FBU1UsS0FBVCxDQUFlMEIsSUFBZixFQUFxQkMsTUFBckIsRUFBNkI7QUFDekIsU0FBSyxJQUFNQyxHQUFYLElBQWtCRCxNQUFsQixFQUEwQjtBQUN0QixZQUFJRSxTQUFTSCxLQUFLRSxHQUFMLENBQVQsS0FBdUJDLFNBQVNGLE9BQU9DLEdBQVAsQ0FBVCxDQUEzQixFQUNJNUIsTUFBTTBCLEtBQUtFLEdBQUwsQ0FBTixFQUFpQkQsT0FBT0MsR0FBUCxDQUFqQixFQURKLEtBR0lGLEtBQUtFLEdBQUwsSUFBWUQsT0FBT0MsR0FBUCxDQUFaO0FBQ1A7QUFDSjtBQUNELFNBQVNDLFFBQVQsQ0FBa0JDLENBQWxCLEVBQXFCO0FBQ2pCLFdBQU8sUUFBT0EsQ0FBUCx5Q0FBT0EsQ0FBUCxPQUFhLFFBQXBCO0FBQ0g7QUFDRCIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbmZpZ3VyZSA9IHZvaWQgMDtcbmNvbnN0IGJvYXJkXzEgPSByZXF1aXJlKFwiLi9ib2FyZFwiKTtcbmNvbnN0IGZlbl8xID0gcmVxdWlyZShcIi4vZmVuXCIpO1xuZnVuY3Rpb24gY29uZmlndXJlKHN0YXRlLCBjb25maWcpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKChfYSA9IGNvbmZpZy5tb3ZhYmxlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVzdHMpXG4gICAgICAgIHN0YXRlLm1vdmFibGUuZGVzdHMgPSB1bmRlZmluZWQ7XG4gICAgbWVyZ2Uoc3RhdGUsIGNvbmZpZyk7XG4gICAgaWYgKGNvbmZpZy5mZW4pIHtcbiAgICAgICAgc3RhdGUucGllY2VzID0gZmVuXzEucmVhZChjb25maWcuZmVuKTtcbiAgICAgICAgc3RhdGUuZHJhd2FibGUuc2hhcGVzID0gW107XG4gICAgfVxuICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkoJ2NoZWNrJykpXG4gICAgICAgIGJvYXJkXzEuc2V0Q2hlY2soc3RhdGUsIGNvbmZpZy5jaGVjayB8fCBmYWxzZSk7XG4gICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eSgnbGFzdE1vdmUnKSAmJiAhY29uZmlnLmxhc3RNb3ZlKVxuICAgICAgICBzdGF0ZS5sYXN0TW92ZSA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChjb25maWcubGFzdE1vdmUpXG4gICAgICAgIHN0YXRlLmxhc3RNb3ZlID0gY29uZmlnLmxhc3RNb3ZlO1xuICAgIGlmIChzdGF0ZS5zZWxlY3RlZClcbiAgICAgICAgYm9hcmRfMS5zZXRTZWxlY3RlZChzdGF0ZSwgc3RhdGUuc2VsZWN0ZWQpO1xuICAgIGlmICghc3RhdGUuYW5pbWF0aW9uLmR1cmF0aW9uIHx8IHN0YXRlLmFuaW1hdGlvbi5kdXJhdGlvbiA8IDEwMClcbiAgICAgICAgc3RhdGUuYW5pbWF0aW9uLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoIXN0YXRlLm1vdmFibGUucm9va0Nhc3RsZSAmJiBzdGF0ZS5tb3ZhYmxlLmRlc3RzKSB7XG4gICAgICAgIGNvbnN0IHJhbmsgPSBzdGF0ZS5tb3ZhYmxlLmNvbG9yID09PSAnd2hpdGUnID8gJzEnIDogJzgnLCBraW5nU3RhcnRQb3MgPSAnZScgKyByYW5rLCBkZXN0cyA9IHN0YXRlLm1vdmFibGUuZGVzdHMuZ2V0KGtpbmdTdGFydFBvcyksIGtpbmcgPSBzdGF0ZS5waWVjZXMuZ2V0KGtpbmdTdGFydFBvcyk7XG4gICAgICAgIGlmICghZGVzdHMgfHwgIWtpbmcgfHwga2luZy5yb2xlICE9PSAna2luZycpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHN0YXRlLm1vdmFibGUuZGVzdHMuc2V0KGtpbmdTdGFydFBvcywgZGVzdHMuZmlsdGVyKGQgPT4gISgoZCA9PT0gJ2EnICsgcmFuaykgJiYgZGVzdHMuaW5jbHVkZXMoJ2MnICsgcmFuaykpICYmXG4gICAgICAgICAgICAhKChkID09PSAnaCcgKyByYW5rKSAmJiBkZXN0cy5pbmNsdWRlcygnZycgKyByYW5rKSkpKTtcbiAgICB9XG59XG5leHBvcnRzLmNvbmZpZ3VyZSA9IGNvbmZpZ3VyZTtcbmZ1bmN0aW9uIG1lcmdlKGJhc2UsIGV4dGVuZCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGV4dGVuZCkge1xuICAgICAgICBpZiAoaXNPYmplY3QoYmFzZVtrZXldKSAmJiBpc09iamVjdChleHRlbmRba2V5XSkpXG4gICAgICAgICAgICBtZXJnZShiYXNlW2tleV0sIGV4dGVuZFtrZXldKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYmFzZVtrZXldID0gZXh0ZW5kW2tleV07XG4gICAgfVxufVxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICAgIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9lY2hlc3Nncm91bmQvY29uZmlnLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clear = exports.cancel = exports.end = exports.move = exports.processDraw = exports.start = void 0;\nvar board_1 = __webpack_require__(1);\nvar util_1 = __webpack_require__(0);\nvar brushes = ['green', 'red', 'blue', 'yellow'];\nfunction start(state, e) {\n    if (e.touches && e.touches.length > 1) return;\n    e.stopPropagation();\n    e.preventDefault();\n    e.ctrlKey ? board_1.unselect(state) : board_1.cancelMove(state);\n    var pos = util_1.eventPosition(e),\n        orig = board_1.getKeyAtDomPos(pos, board_1.whitePov(state), state.dom.bounds());\n    if (!orig) return;\n    state.drawable.current = {\n        orig: orig,\n        pos: pos,\n        brush: eventBrush(e),\n        snapToValidMove: state.drawable.defaultSnapToValidMove\n    };\n    processDraw(state);\n}\nexports.start = start;\nfunction processDraw(state) {\n    requestAnimationFrame(function () {\n        var cur = state.drawable.current;\n        if (cur) {\n            var keyAtDomPos = board_1.getKeyAtDomPos(cur.pos, board_1.whitePov(state), state.dom.bounds());\n            if (!keyAtDomPos) {\n                cur.snapToValidMove = false;\n            }\n            var mouseSq = cur.snapToValidMove ? board_1.getSnappedKeyAtDomPos(cur.orig, cur.pos, board_1.whitePov(state), state.dom.bounds()) : keyAtDomPos;\n            if (mouseSq !== cur.mouseSq) {\n                cur.mouseSq = mouseSq;\n                cur.dest = mouseSq !== cur.orig ? mouseSq : undefined;\n                state.dom.redrawNow();\n            }\n            processDraw(state);\n        }\n    });\n}\nexports.processDraw = processDraw;\nfunction move(state, e) {\n    if (state.drawable.current) state.drawable.current.pos = util_1.eventPosition(e);\n}\nexports.move = move;\nfunction end(state) {\n    var cur = state.drawable.current;\n    if (cur) {\n        if (cur.mouseSq) addShape(state.drawable, cur);\n        cancel(state);\n    }\n}\nexports.end = end;\nfunction cancel(state) {\n    if (state.drawable.current) {\n        state.drawable.current = undefined;\n        state.dom.redraw();\n    }\n}\nexports.cancel = cancel;\nfunction clear(state) {\n    if (state.drawable.shapes.length) {\n        state.drawable.shapes = [];\n        state.dom.redraw();\n        onChange(state.drawable);\n    }\n}\nexports.clear = clear;\nfunction eventBrush(e) {\n    var _a;\n    var modA = (e.shiftKey || e.ctrlKey) && util_1.isRightButton(e);\n    var modB = e.altKey || e.metaKey || ((_a = e.getModifierState) === null || _a === void 0 ? void 0 : _a.call(e, 'AltGraph'));\n    return brushes[(modA ? 1 : 0) + (modB ? 2 : 0)];\n}\nfunction addShape(drawable, cur) {\n    var sameShape = function sameShape(s) {\n        return s.orig === cur.orig && s.dest === cur.dest;\n    };\n    var similar = drawable.shapes.find(sameShape);\n    if (similar) drawable.shapes = drawable.shapes.filter(function (s) {\n        return !sameShape(s);\n    });\n    if (!similar || similar.brush !== cur.brush) drawable.shapes.push(cur);\n    onChange(drawable);\n}\nfunction onChange(drawable) {\n    if (drawable.onChange) drawable.onChange(drawable.shapes);\n}\n//# sourceMappingURL=draw.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.renderSvg = exports.createElement = void 0;\nvar util_1 = __webpack_require__(0);\nfunction createElement(tagName) {\n    return document.createElementNS('http://www.w3.org/2000/svg', tagName);\n}\nexports.createElement = createElement;\nfunction renderSvg(state, root) {\n    var d = state.drawable,\n        curD = d.current,\n        cur = curD && curD.mouseSq ? curD : undefined,\n        arrowDests = new Map(),\n        bounds = state.dom.bounds();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = d.shapes.concat(d.autoShapes).concat(cur ? [cur] : [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var s = _step.value;\n\n            if (s.dest) arrowDests.set(s.dest, (arrowDests.get(s.dest) || 0) + 1);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    var shapes = d.shapes.concat(d.autoShapes).map(function (s) {\n        return {\n            shape: s,\n            current: false,\n            hash: shapeHash(s, arrowDests, false, bounds)\n        };\n    });\n    if (cur) shapes.push({\n        shape: cur,\n        current: true,\n        hash: shapeHash(cur, arrowDests, true, bounds)\n    });\n    var fullHash = shapes.map(function (sc) {\n        return sc.hash;\n    }).join(';');\n    if (fullHash === state.drawable.prevSvgHash) return;\n    state.drawable.prevSvgHash = fullHash;\n    var defsEl = root.firstChild;\n    syncDefs(d, shapes, defsEl);\n    syncShapes(state, shapes, d.brushes, arrowDests, root, defsEl);\n}\nexports.renderSvg = renderSvg;\nfunction syncDefs(d, shapes, defsEl) {\n    var brushes = new Map();\n    var brush = void 0;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n        for (var _iterator2 = shapes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var s = _step2.value;\n\n            if (s.shape.dest) {\n                brush = d.brushes[s.shape.brush];\n                if (s.shape.modifiers) brush = makeCustomBrush(brush, s.shape.modifiers);\n                brushes.set(brush.key, brush);\n            }\n        }\n    } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n            }\n        } finally {\n            if (_didIteratorError2) {\n                throw _iteratorError2;\n            }\n        }\n    }\n\n    var keysInDom = new Set();\n    var el = defsEl.firstChild;\n    while (el) {\n        keysInDom.add(el.getAttribute('cgKey'));\n        el = el.nextSibling;\n    }\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n        for (var _iterator3 = brushes.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var _step3$value = _slicedToArray(_step3.value, 2),\n                key = _step3$value[0],\n                _brush = _step3$value[1];\n\n            if (!keysInDom.has(key)) defsEl.appendChild(renderMarker(_brush));\n        }\n    } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                _iterator3.return();\n            }\n        } finally {\n            if (_didIteratorError3) {\n                throw _iteratorError3;\n            }\n        }\n    }\n}\nfunction syncShapes(state, shapes, brushes, arrowDests, root, defsEl) {\n    var bounds = state.dom.bounds(),\n        hashesInDom = new Map(),\n        toRemove = [];\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n        for (var _iterator4 = shapes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var sc = _step4.value;\n\n            hashesInDom.set(sc.hash, false);\n        }\n    } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n            }\n        } finally {\n            if (_didIteratorError4) {\n                throw _iteratorError4;\n            }\n        }\n    }\n\n    var el = defsEl.nextSibling,\n        elHash = void 0;\n    while (el) {\n        elHash = el.getAttribute('cgHash');\n        if (hashesInDom.has(elHash)) hashesInDom.set(elHash, true);else toRemove.push(el);\n        el = el.nextSibling;\n    }\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n        for (var _iterator5 = toRemove[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var _el = _step5.value;\n\n            root.removeChild(_el);\n        }\n    } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n            }\n        } finally {\n            if (_didIteratorError5) {\n                throw _iteratorError5;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion6 = true;\n    var _didIteratorError6 = false;\n    var _iteratorError6 = undefined;\n\n    try {\n        for (var _iterator6 = shapes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var _sc = _step6.value;\n\n            if (!hashesInDom.get(_sc.hash)) root.appendChild(renderShape(state, _sc, brushes, arrowDests, bounds));\n        }\n    } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                _iterator6.return();\n            }\n        } finally {\n            if (_didIteratorError6) {\n                throw _iteratorError6;\n            }\n        }\n    }\n}\nfunction shapeHash(_ref, arrowDests, current, bounds) {\n    var orig = _ref.orig,\n        dest = _ref.dest,\n        brush = _ref.brush,\n        piece = _ref.piece,\n        modifiers = _ref.modifiers;\n\n    return [bounds.width, bounds.height, current, orig, dest, brush, dest && (arrowDests.get(dest) || 0) > 1, piece && pieceHash(piece), modifiers && modifiersHash(modifiers)].filter(function (x) {\n        return x;\n    }).join(',');\n}\nfunction pieceHash(piece) {\n    return [piece.color, piece.role, piece.scale].filter(function (x) {\n        return x;\n    }).join(',');\n}\nfunction modifiersHash(m) {\n    return '' + (m.lineWidth || '');\n}\nfunction renderShape(state, _ref2, brushes, arrowDests, bounds) {\n    var shape = _ref2.shape,\n        current = _ref2.current,\n        hash = _ref2.hash;\n\n    var el = void 0;\n    if (shape.piece) el = renderPiece(state.drawable.pieces.baseUrl, orient(util_1.key2pos(shape.orig), state.orientation), shape.piece, bounds);else {\n        var orig = orient(util_1.key2pos(shape.orig), state.orientation);\n        if (shape.dest) {\n            var brush = brushes[shape.brush];\n            if (shape.modifiers) brush = makeCustomBrush(brush, shape.modifiers);\n            el = renderArrow(brush, orig, orient(util_1.key2pos(shape.dest), state.orientation), current, (arrowDests.get(shape.dest) || 0) > 1, bounds);\n        } else el = renderCircle(brushes[shape.brush], orig, current, bounds);\n    }\n    el.setAttribute('cgHash', hash);\n    return el;\n}\nfunction renderCircle(brush, pos, current, bounds) {\n    var o = pos2px(pos, bounds),\n        widths = circleWidth(bounds),\n        radius = (bounds.width + bounds.height) / 32;\n    return setAttributes(createElement('circle'), {\n        stroke: brush.color,\n        'stroke-width': widths[current ? 0 : 1],\n        fill: 'none',\n        opacity: opacity(brush, current),\n        cx: o[0],\n        cy: o[1],\n        r: radius - widths[1] / 2\n    });\n}\nfunction renderArrow(brush, orig, dest, current, shorten, bounds) {\n    var m = arrowMargin(bounds, shorten && !current),\n        a = pos2px(orig, bounds),\n        b = pos2px(dest, bounds),\n        dx = b[0] - a[0],\n        dy = b[1] - a[1],\n        angle = Math.atan2(dy, dx),\n        xo = Math.cos(angle) * m,\n        yo = Math.sin(angle) * m;\n    return setAttributes(createElement('line'), {\n        stroke: brush.color,\n        'stroke-width': lineWidth(brush, current, bounds),\n        'stroke-linecap': 'round',\n        'marker-end': 'url(#arrowhead-' + brush.key + ')',\n        opacity: opacity(brush, current),\n        x1: a[0],\n        y1: a[1],\n        x2: b[0] - xo,\n        y2: b[1] - yo\n    });\n}\nfunction renderPiece(baseUrl, pos, piece, bounds) {\n    var o = pos2px(pos, bounds),\n        size = bounds.width / 8 * (piece.scale || 1),\n        name = piece.color[0] + (piece.role === 'knight' ? 'n' : piece.role[0]).toUpperCase();\n    return setAttributes(createElement('image'), {\n        className: piece.role + \" \" + piece.color,\n        x: o[0] - size / 2,\n        y: o[1] - size / 2,\n        width: size,\n        height: size,\n        href: baseUrl + name + '.svg'\n    });\n}\nfunction renderMarker(brush) {\n    var marker = setAttributes(createElement('marker'), {\n        id: 'arrowhead-' + brush.key,\n        orient: 'auto',\n        markerWidth: 4,\n        markerHeight: 8,\n        refX: 2.05,\n        refY: 2.01\n    });\n    marker.appendChild(setAttributes(createElement('path'), {\n        d: 'M0,0 V4 L3,2 Z',\n        fill: brush.color\n    }));\n    marker.setAttribute('cgKey', brush.key);\n    return marker;\n}\nfunction setAttributes(el, attrs) {\n    for (var key in attrs) {\n        el.setAttribute(key, attrs[key]);\n    }return el;\n}\nfunction orient(pos, color) {\n    return color === 'white' ? pos : [7 - pos[0], 7 - pos[1]];\n}\nfunction makeCustomBrush(base, modifiers) {\n    return {\n        color: base.color,\n        opacity: Math.round(base.opacity * 10) / 10,\n        lineWidth: Math.round(modifiers.lineWidth || base.lineWidth),\n        key: [base.key, modifiers.lineWidth].filter(function (x) {\n            return x;\n        }).join('')\n    };\n}\nfunction circleWidth(bounds) {\n    var base = bounds.width / 512;\n    return [3 * base, 4 * base];\n}\nfunction lineWidth(brush, current, bounds) {\n    return (brush.lineWidth || 10) * (current ? 0.85 : 1) / 512 * bounds.width;\n}\nfunction opacity(brush, current) {\n    return (brush.opacity || 1) * (current ? 0.9 : 1);\n}\nfunction arrowMargin(bounds, shorten) {\n    return (shorten ? 20 : 10) / 512 * bounds.width;\n}\nfunction pos2px(pos, bounds) {\n    return [(pos[0] + 0.5) * bounds.width / 8, (7.5 - pos[1]) * bounds.height / 8];\n}\n//# sourceMappingURL=svg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLENBQUo7O0FBRUE7QUFDQUEsSUFBSyxZQUFXO0FBQ2YsUUFBTyxJQUFQO0FBQ0EsQ0FGRyxFQUFKOztBQUlBLElBQUk7QUFDSDtBQUNBQSxLQUFJQSxLQUFLQyxTQUFTLGFBQVQsR0FBTCxJQUFrQyxDQUFDLEdBQUVDLElBQUgsRUFBUyxNQUFULENBQXRDO0FBQ0EsQ0FIRCxDQUdFLE9BQU1DLENBQU4sRUFBUztBQUNWO0FBQ0EsS0FBRyxRQUFPQyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQXJCLEVBQ0NKLElBQUlJLE1BQUo7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUJOLENBQWpCIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Component = __webpack_require__(24)(\n  /* script */\n  __webpack_require__(23),\n  /* template */\n  __webpack_require__(25),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/Users/jlincoln/Development/JavaScript/vue-echessboard/src/components/echessboard/index.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] index.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-133d23d9\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-133d23d9\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lY2hlc3Nib2FyZC9pbmRleC52dWU/YzU0YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLGlEQUFpRCxJQUFJO0FBQ3BJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9pbmRleC52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj9pZD1kYXRhLXYtMTMzZDIzZDkhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2luZGV4LnZ1ZVwiKSxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBjc3NNb2R1bGVzICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiL1VzZXJzL2psaW5jb2xuL0RldmVsb3BtZW50L0phdmFTY3JpcHQvdnVlLWVjaGVzc2JvYXJkL3NyYy9jb21wb25lbnRzL2VjaGVzc2JvYXJkL2luZGV4LnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIGluZGV4LnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0xMzNkMjNkOVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTEzM2QyM2Q5XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL2VjaGVzc2JvYXJkL2luZGV4LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n * Copyright (c) 2020, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\n/*\n *  Purpose: The echess.js fork of chess.js is to add logic for the Elephant\n *  chess piece.\n */\n\nvar Echess = function Echess(fen) {\n\n  var BLACK = 'b';\n  var WHITE = 'w';\n\n  var EMPTY = -1;\n\n  var PAWN = 'p';\n  var KNIGHT = 'n';\n  var BISHOP = 'b';\n  var ROOK = 'r';\n  var QUEEN = 'q';\n  var KING = 'k';\n\n  var ELEPHANT = 'e';\n\n  var SYMBOLS = 'pnbrqkePNBRQKE';\n\n  var DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\n  var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*'];\n\n  var PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15]\n  };\n\n  var PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\n    b: [-17, -15, 17, 15],\n    r: [-16, 1, 16, -1],\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\n    k: [-17, -16, -15, 1, 17, 16, 15, -1]\n\n    // prettier-ignore\n  };var ATTACKS = [20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20];\n\n  // prettier-ignore\n  var RAYS = [17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0, 0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0, -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17];\n\n  var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 };\n\n  var FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q',\n    ELEPHANT_DOMINATE_COLOR: ''\n  };\n\n  var BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64\n  };\n\n  var RANK_1 = 7;\n  var RANK_2 = 6;\n  var RANK_3 = 5;\n  var RANK_4 = 4;\n  var RANK_5 = 3;\n  var RANK_6 = 2;\n  var RANK_7 = 1;\n  var RANK_8 = 0;\n\n  // prettier-ignore\n  var SQUARES = {\n    a8: 0, b8: 1, c8: 2, d8: 3, e8: 4, f8: 5, g8: 6, h8: 7,\n    a7: 16, b7: 17, c7: 18, d7: 19, e7: 20, f7: 21, g7: 22, h7: 23,\n    a6: 32, b6: 33, c6: 34, d6: 35, e6: 36, f6: 37, g6: 38, h6: 39,\n    a5: 48, b5: 49, c5: 50, d5: 51, e5: 52, f5: 53, g5: 54, h5: 55,\n    a4: 64, b4: 65, c4: 66, d4: 67, e4: 68, f4: 69, g4: 70, h4: 71,\n    a3: 80, b3: 81, c3: 82, d3: 83, e3: 84, f3: 85, g3: 86, h3: 87,\n    a2: 96, b2: 97, c2: 98, d2: 99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n  };\n\n  var ROOKS = {\n    w: [{ square: SQUARES.a1, flag: BITS.QSIDE_CASTLE }, { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE }],\n    b: [{ square: SQUARES.a8, flag: BITS.QSIDE_CASTLE }, { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE }]\n  };\n\n  var _board = new Array(128);\n  var kings = { w: EMPTY, b: EMPTY };\n  var _turn = WHITE;\n  var castling = { w: 0, b: 0 };\n  var ep_square = EMPTY;\n  var half_moves = 0;\n  var move_number = 1;\n  var _history = [];\n  var header = {};\n  var comments = {};\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === 'undefined') {\n    _load(DEFAULT_POSITION);\n  } else {\n    _load(fen);\n  }\n\n  function _clear(keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false;\n    }\n\n    _board = new Array(128);\n    kings = { w: EMPTY, b: EMPTY };\n    _turn = WHITE;\n    castling = { w: 0, b: 0 };\n    ep_square = EMPTY;\n    half_moves = 0;\n    move_number = 1;\n    _history = [];\n    if (!keep_headers) header = {};\n    comments = {};\n    update_setup(generate_fen());\n  }\n\n  function prune_comments() {\n    var reversed_history = [];\n    var current_comments = {};\n    var copy_comment = function copy_comment(fen) {\n      if (fen in comments) {\n        current_comments[fen] = comments[fen];\n      }\n    };\n    while (_history.length > 0) {\n      reversed_history.push(undo_move());\n    }\n    copy_comment(generate_fen());\n    while (reversed_history.length > 0) {\n      make_move(reversed_history.pop());\n      copy_comment(generate_fen());\n    }\n    comments = current_comments;\n  }\n\n  function _reset() {\n    _load(DEFAULT_POSITION);\n  }\n\n  function _load(fen, keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false;\n    }\n\n    var tokens = fen.split(/\\s+/);\n    var position = tokens[0];\n    var square = 0;\n\n    if (!_validate_fen(fen).valid) {\n      return false;\n    }\n\n    _clear(keep_headers);\n\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i);\n\n      if (piece === '/') {\n        square += 8;\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10);\n      } else {\n        var color = piece < 'a' ? WHITE : BLACK;\n        _put({ type: piece.toLowerCase(), color: color }, algebraic(square));\n        square++;\n      }\n    }\n\n    _turn = tokens[1];\n\n    if (tokens[2].indexOf('K') > -1) {\n      castling.w |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      castling.w |= BITS.QSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      castling.b |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      castling.b |= BITS.QSIDE_CASTLE;\n    }\n\n    ep_square = tokens[3] === '-' ? EMPTY : SQUARES[tokens[3]];\n    half_moves = parseInt(tokens[4], 10);\n    move_number = parseInt(tokens[5], 10);\n\n    update_setup(generate_fen());\n\n    return true;\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function _validate_fen(fen) {\n    var errors = {\n      0: 'No errors.',\n      1: 'FEN string must contain six space-delimited fields.',\n      2: '6th field (move number) must be a positive integer.',\n      3: '5th field (half move counter) must be a non-negative integer.',\n      4: '4th field (en-passant square) is invalid.',\n      5: '3rd field (castling availability) is invalid.',\n      6: '2nd field (side to move) is invalid.',\n      7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\n      8: '1st field (piece positions) is invalid [consecutive numbers].',\n      9: '1st field (piece positions) is invalid [invalid piece].',\n      10: '1st field (piece positions) is invalid [row too large].',\n      11: 'Illegal en-passant square'\n\n      /* 1st criterion: 6 space-seperated fields? */\n    };var tokens = fen.split(/\\s+/);\n    if (tokens.length !== 6) {\n      return { valid: false, error_number: 1, error: errors[1] };\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {\n      return { valid: false, error_number: 2, error: errors[2] };\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {\n      return { valid: false, error_number: 3, error: errors[3] };\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return { valid: false, error_number: 4, error: errors[4] };\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return { valid: false, error_number: 5, error: errors[5] };\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return { valid: false, error_number: 6, error: errors[6] };\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split('/');\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0;\n      var previous_was_number = false;\n\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return { valid: false, error_number: 8, error: errors[8] };\n          }\n          sum_fields += parseInt(rows[i][k], 10);\n          previous_was_number = true;\n        } else {\n          if (!/^[prnbqkePRNBQKE]$/.test(rows[i][k])) {\n            return { valid: false, error_number: 9, error: errors[9] };\n          }\n          sum_fields += 1;\n          previous_was_number = false;\n        }\n      }\n      if (sum_fields !== 8) {\n        return { valid: false, error_number: 10, error: errors[10] };\n      }\n    }\n\n    if (tokens[3][1] == '3' && tokens[1] == 'w' || tokens[3][1] == '6' && tokens[1] == 'b') {\n      return { valid: false, error_number: 11, error: errors[11] };\n    }\n\n    /* everything's okay! */\n    return { valid: true, error_number: 0, error: errors[0] };\n  }\n\n  function generate_fen() {\n    var empty = 0;\n    var fen = '';\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      if (_board[i] == null) {\n        empty++;\n      } else {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        var color = _board[i].color;\n        var piece = _board[i].type;\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n      }\n\n      if (i + 1 & 0x88) {\n        if (empty > 0) {\n          fen += empty;\n        }\n\n        if (i !== SQUARES.h1) {\n          fen += '/';\n        }\n\n        empty = 0;\n        i += 8;\n      }\n    }\n\n    var cflags = '';\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n      cflags += 'K';\n    }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n      cflags += 'Q';\n    }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n      cflags += 'k';\n    }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n      cflags += 'q';\n    }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || '-';\n    var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square);\n\n    return [fen, _turn, cflags, epflags, half_moves, move_number].join(' ');\n  }\n\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        header[args[i]] = args[i + 1];\n      }\n    }\n    return header;\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (_history.length > 0) return;\n\n    if (fen !== DEFAULT_POSITION) {\n      header['SetUp'] = '1';\n      header['FEN'] = fen;\n    } else {\n      delete header['SetUp'];\n      delete header['FEN'];\n    }\n  }\n\n  function _get(square) {\n    var piece = _board[SQUARES[square]];\n    return piece ? { type: piece.type, color: piece.color } : null;\n  }\n\n  function _put(piece, square) {\n    /* check for valid piece object */\n    if (!('type' in piece && 'color' in piece)) {\n      return false;\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false;\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARES)) {\n      return false;\n    }\n\n    var sq = SQUARES[square];\n\n    /* don't let the user place more than one king */\n    if (piece.type == KING && !(kings[piece.color] == EMPTY || kings[piece.color] == sq)) {\n      return false;\n    }\n\n    _board[sq] = { type: piece.type, color: piece.color };\n    if (piece.type === KING) {\n      kings[piece.color] = sq;\n    }\n\n    update_setup(generate_fen());\n\n    return true;\n  }\n\n  function _remove(square) {\n    var piece = _get(square);\n    _board[SQUARES[square]] = null;\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY;\n    }\n\n    update_setup(generate_fen());\n\n    return piece;\n  }\n\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: _turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type\n    };\n\n    if (promotion) {\n      move.flags |= BITS.PROMOTION;\n      move.promotion = promotion;\n    }\n\n    if (board[to]) {\n      move.captured = board[to].type;\n    } else if (flags & BITS.EP_CAPTURE) {\n      move.captured = PAWN;\n    }\n    return move;\n  }\n\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (board[from].type === PAWN && (rank(to) === RANK_8 || rank(to) === RANK_1)) {\n        var pieces = [QUEEN, ROOK, BISHOP, KNIGHT];\n        for (var i = 0, len = pieces.length; i < len; i++) {\n          moves.push(build_move(board, from, to, flags, pieces[i]));\n        }\n      } else if (board[from].type === ELEPHANT) {\n        console.log('add_move {from: ' + from + ', to: ' + to + '}');\n        moves.push(build_move(board, from, to, flags));\n      } else {\n        if (board !== undefined && board[from] !== undefined && board[from].type !== undefined) {\n          moves.push(build_move(board, from, to, flags));\n        }\n      }\n    }\n\n    var moves = [];\n    var us = _turn;\n    var them = swap_color(us);\n    var second_rank = { b: RANK_7, w: RANK_2 };\n\n    var first_sq = SQUARES.a8;\n    var last_sq = SQUARES.h1;\n    var single_square = false;\n\n    /* do we want legal moves? */\n    var legal = typeof options !== 'undefined' && 'legal' in options ? options.legal : true;\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== 'undefined' && 'square' in options) {\n      if (options.square in SQUARES) {\n        first_sq = last_sq = SQUARES[options.square];\n        single_square = true;\n      } else {\n        /* invalid square */\n        return [];\n      }\n    }\n\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n\n      var piece = _board[i];\n      if (piece == null || piece.color !== us && piece.type !== 'e') {\n        continue;\n      }\n\n      if (piece.type === PAWN) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0];\n        if (_board[square] == null) {\n          add_move(_board, moves, i, square, BITS.NORMAL);\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1];\n          if (second_rank[us] === rank(i) && _board[square] == null) {\n            add_move(_board, moves, i, square, BITS.BIG_PAWN);\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j];\n          if (square & 0x88) continue;\n\n          if (_board[square] != null && _board[square].color === them) {\n            add_move(_board, moves, i, square, BITS.CAPTURE);\n          } else if (square === ep_square) {\n            add_move(_board, moves, i, ep_square, BITS.EP_CAPTURE);\n          }\n        }\n      } else if (piece.type === ELEPHANT) {\n        // move to any none occupied square\n        console.log('finding moves for elephant at ' + i);\n        for (var _j = first_sq; _j <= last_sq; _j++) {\n          console.log('j is ' + _j);\n          console.log('board[j] is ' + JSON.stringify(_board[_j]));\n          if (_board[_j] === undefined || _board[_j] == null) {\n            square = _j; // TODO: calculate offsets for piece & use to calc square\n            console.log('adding move {from: ' + i + ', to: ' + square + '}');\n            add_move(_board, moves, i, square, BITS.NORMAL);\n          }\n        }\n        console.log('moves are ' + JSON.stringify(moves));\n      } else {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j];\n          var square = i;\n\n          while (true) {\n            square += offset;\n            if (square & 0x88) break;\n\n            if (_board[square] == null) {\n              add_move(_board, moves, i, square, BITS.NORMAL);\n            } else {\n              if (_board[square].color === us) break;\n              add_move(_board, moves, i, square, BITS.CAPTURE);\n              break;\n            }\n\n            /* break, if knight or king */\n            if (piece.type === 'n' || piece.type === 'k') break;\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if (!single_square || last_sq === kings[us]) {\n      /* king-side castling */\n      if (castling[us] & BITS.KSIDE_CASTLE) {\n        var castling_from = kings[us];\n        var castling_to = castling_from + 2;\n\n        if (_board[castling_from + 1] == null && _board[castling_to] == null && !attacked(them, kings[us]) && !attacked(them, castling_from + 1) && !attacked(them, castling_to)) {\n          add_move(_board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE);\n        }\n      }\n\n      /* queen-side castling */\n      if (castling[us] & BITS.QSIDE_CASTLE) {\n        var castling_from = kings[us];\n        var castling_to = castling_from - 2;\n\n        if (_board[castling_from - 1] == null && _board[castling_from - 2] == null && _board[castling_from - 3] == null && !attacked(them, kings[us]) && !attacked(them, castling_from - 1) && !attacked(them, castling_to)) {\n          add_move(_board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE);\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves;\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = [];\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i]);\n      }\n      undo_move();\n    }\n    return legal_moves;\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, sloppy) {\n    var output = '';\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O';\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O';\n    } else {\n      var disambiguator = get_disambiguator(move, sloppy);\n\n      if (move.piece !== PAWN) {\n        output += move.piece.toUpperCase() + disambiguator;\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0];\n        }\n        output += 'x';\n      }\n\n      output += algebraic(move.to);\n\n      if (move.flags & BITS.PROMOTION) {\n        output += '=' + move.promotion.toUpperCase();\n      }\n    }\n\n    make_move(move);\n    if (_in_check()) {\n      if (_in_checkmate()) {\n        output += '#';\n      } else {\n        output += '+';\n      }\n    }\n    undo_move();\n\n    return output;\n  }\n\n  // parses all of the decorators out of a SAN string\n  function stripped_san(move) {\n    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n  }\n\n  function attacked(color, square) {\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n\n      /* if empty square or wrong color */\n      if (_board[i] == null || _board[i].color !== color) continue;\n\n      var piece = _board[i];\n      var difference = i - square;\n      var index = difference + 119;\n\n      if (ATTACKS[index] & 1 << SHIFTS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true;\n          } else {\n            if (piece.color === BLACK) return true;\n          }\n          continue;\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === 'n' || piece.type === 'k') return true;\n\n        var offset = RAYS[index];\n        var j = i + offset;\n\n        var blocked = false;\n        while (j !== square) {\n          if (_board[j] != null) {\n            blocked = true;\n            break;\n          }\n          j += offset;\n        }\n\n        if (!blocked) return true;\n      }\n    }\n\n    return false;\n  }\n\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color]);\n  }\n\n  function _in_check() {\n    return king_attacked(_turn);\n  }\n\n  function _in_checkmate() {\n    return _in_check() && generate_moves().length === 0;\n  }\n\n  function _in_stalemate() {\n    return !_in_check() && generate_moves().length === 0;\n  }\n\n  function _insufficient_material() {\n    var pieces = {};\n    var bishops = [];\n    var num_pieces = 0;\n    var sq_color = 0;\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      sq_color = (sq_color + 1) % 2;\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n\n      var piece = _board[i];\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color);\n        }\n        num_pieces++;\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) {\n      return true;\n    } else if (\n    /* k vs. kn .... or .... k vs. kb */\n    num_pieces === 3 && (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n      return true;\n    } else if (num_pieces === pieces[BISHOP] + 2) {\n      /* kb vs. kb where any number of bishops are all on the same color */\n      var sum = 0;\n      var len = bishops.length;\n      for (var i = 0; i < len; i++) {\n        sum += bishops[i];\n      }\n      if (sum === 0 || sum === len) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function _in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = [];\n    var positions = {};\n    var repetition = false;\n\n    while (true) {\n      var move = undo_move();\n      if (!move) break;\n      moves.push(move);\n    }\n\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen().split(' ').slice(0, 4).join(' ');\n\n      /* has the position occurred three or move times */\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1;\n      if (positions[fen] >= 3) {\n        repetition = true;\n      }\n\n      if (!moves.length) {\n        break;\n      }\n      make_move(moves.pop());\n    }\n\n    return repetition;\n  }\n\n  function push(move) {\n    _history.push({\n      move: move,\n      kings: { b: kings.b, w: kings.w },\n      turn: _turn,\n      castling: { b: castling.b, w: castling.w },\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number\n    });\n  }\n\n  function make_move(move) {\n    var us = _turn;\n    var them = swap_color(us);\n    push(move);\n\n    _board[move.to] = _board[move.from];\n    _board[move.from] = null;\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (_turn === BLACK) {\n        _board[move.to - 16] = null;\n      } else {\n        _board[move.to + 16] = null;\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      _board[move.to] = { type: move.promotion, color: us };\n    }\n\n    /* if we moved the king */\n    if (_board[move.to].type === KING) {\n      kings[_board[move.to].color] = move.to;\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1;\n        var castling_from = move.to + 1;\n        _board[castling_to] = _board[castling_from];\n        _board[castling_from] = null;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1;\n        var castling_from = move.to - 2;\n        _board[castling_to] = _board[castling_from];\n        _board[castling_from] = null;\n      }\n\n      /* turn off castling */\n      castling[us] = '';\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (move.from === ROOKS[us][i].square && castling[us] & ROOKS[us][i].flag) {\n          castling[us] ^= ROOKS[us][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (move.to === ROOKS[them][i].square && castling[them] & ROOKS[them][i].flag) {\n          castling[them] ^= ROOKS[them][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (_turn === 'b') {\n        ep_square = move.to - 16;\n      } else {\n        ep_square = move.to + 16;\n      }\n    } else {\n      ep_square = EMPTY;\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0;\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0;\n    } else {\n      half_moves++;\n    }\n\n    if (_turn === BLACK) {\n      move_number++;\n    }\n    _turn = swap_color(_turn);\n  }\n\n  function undo_move() {\n    var old = _history.pop();\n    if (old == null) {\n      return null;\n    }\n\n    var move = old.move;\n    kings = old.kings;\n    _turn = old.turn;\n    castling = old.castling;\n    ep_square = old.ep_square;\n    half_moves = old.half_moves;\n    move_number = old.move_number;\n\n    var us = _turn;\n    var them = swap_color(_turn);\n\n    _board[move.from] = _board[move.to];\n    _board[move.from].type = move.piece; // to undo any promotions\n    _board[move.to] = null;\n\n    if (move.flags & BITS.CAPTURE) {\n      _board[move.to] = { type: move.captured, color: them };\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index;\n      if (us === BLACK) {\n        index = move.to - 16;\n      } else {\n        index = move.to + 16;\n      }\n      _board[index] = { type: PAWN, color: them };\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from;\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1;\n        castling_from = move.to - 1;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2;\n        castling_from = move.to + 1;\n      }\n\n      _board[castling_to] = _board[castling_from];\n      _board[castling_from] = null;\n    }\n\n    return move;\n  }\n\n  /* this function is used to uniquely identify ambiguous moves */\n  function get_disambiguator(move, sloppy) {\n    var moves = generate_moves({ legal: !sloppy });\n\n    var from = move.from;\n    var to = move.to;\n    var piece = move.piece;\n\n    var ambiguities = 0;\n    var same_rank = 0;\n    var same_file = 0;\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      var ambig_from = moves[i].from;\n      var ambig_to = moves[i].to;\n      var ambig_piece = moves[i].piece;\n\n      /* if a move of the same piece type ends on the same to square, we'll\n       * need to add a disambiguator to the algebraic notation\n       */\n      if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n        ambiguities++;\n\n        if (rank(from) === rank(ambig_from)) {\n          same_rank++;\n        }\n\n        if (file(from) === file(ambig_from)) {\n          same_file++;\n        }\n      }\n    }\n\n    if (ambiguities > 0) {\n      /* if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      if (same_rank > 0 && same_file > 0) {\n        return algebraic(from);\n      } else if (same_file > 0) {\n        /* if the moving piece rests on the same file, use the rank symbol as the\n         * disambiguator\n         */\n        return algebraic(from).charAt(1);\n      } else {\n        /* else use the file symbol */\n        return algebraic(from).charAt(0);\n      }\n    }\n\n    return '';\n  }\n\n  function _ascii() {\n    var s = '   +------------------------+\\n';\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* display the rank */\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |';\n      }\n\n      /* empty piece */\n      if (_board[i] == null) {\n        s += ' . ';\n      } else {\n        var piece = _board[i].type;\n        var color = _board[i].color;\n        var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n        s += ' ' + symbol + ' ';\n      }\n\n      if (i + 1 & 0x88) {\n        s += '|\\n';\n        i += 8;\n      }\n    }\n    s += '   +------------------------+\\n';\n    s += '     a  b  c  d  e  f  g  h\\n';\n\n    return s;\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?!\n    var clean_move = stripped_san(move);\n\n    // if we're using the sloppy parser run a regex to grab piece, to, and from\n    // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n    if (sloppy) {\n      var matches = clean_move.match(/([pnbrqkPNBRQKE])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBNE])?/);\n      if (matches) {\n        var piece = matches[1];\n        var from = matches[2];\n        var to = matches[3];\n        var promotion = matches[4];\n      }\n    }\n\n    var moves = generate_moves();\n    for (var i = 0, len = moves.length; i < len; i++) {\n      // try the strict parser first, then the sloppy parser if requested\n      // by the user\n      if (clean_move === stripped_san(move_to_san(moves[i])) || sloppy && clean_move === stripped_san(move_to_san(moves[i], true))) {\n        return moves[i];\n      } else {\n        if (matches && (!piece || piece.toLowerCase() == moves[i].piece) && SQUARES[from] == moves[i].from && SQUARES[to] == moves[i].to && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n          return moves[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /*****************************************************************************\n   * UTILITY FUNCTIONS\n   ****************************************************************************/\n  function rank(i) {\n    return i >> 4;\n  }\n\n  function file(i) {\n    return i & 15;\n  }\n\n  function algebraic(i) {\n    var f = file(i),\n        r = rank(i);\n\n    return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1);\n  }\n\n  function swap_color(c) {\n    return c === WHITE ? BLACK : WHITE;\n  }\n\n  function is_digit(c) {\n    return '0123456789'.indexOf(c) !== -1;\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move);\n    move.san = move_to_san(move, false);\n    move.to = algebraic(move.to);\n    move.from = algebraic(move.from);\n\n    var flags = '';\n\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag];\n      }\n    }\n    move.flags = flags;\n\n    return move;\n  }\n\n  function clone(obj) {\n    var dupe = obj instanceof Array ? [] : {};\n\n    for (var property in obj) {\n      if ((typeof property === 'undefined' ? 'undefined' : _typeof(property)) === 'object') {\n        dupe[property] = clone(obj[property]);\n      } else {\n        dupe[property] = obj[property];\n      }\n    }\n\n    return dupe;\n  }\n\n  function trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, '');\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function _perft(depth) {\n    var moves = generate_moves({ legal: false });\n    var nodes = 0;\n    var color = _turn;\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = _perft(depth - 1);\n          nodes += child_nodes;\n        } else {\n          nodes++;\n        }\n      }\n      undo_move();\n    }\n\n    return nodes;\n  }\n\n  return {\n    /***************************************************************************\n     * PUBLIC CONSTANTS (is there a better way to do this?)\n     **************************************************************************/\n    WHITE: WHITE,\n    BLACK: BLACK,\n    PAWN: PAWN,\n    KNIGHT: KNIGHT,\n    BISHOP: BISHOP,\n    ROOK: ROOK,\n    QUEEN: QUEEN,\n    KING: KING,\n    ELEPHANT: ELEPHANT,\n    SQUARES: function () {\n      /* from the ECMA-262 spec (section 12.6.4):\n       * \"The mechanics of enumerating the properties ... is\n       * implementation dependent\"\n       * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n       * ordered correctly\n       */\n      var keys = [];\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (i & 0x88) {\n          i += 7;\n          continue;\n        }\n        keys.push(algebraic(i));\n      }\n      return keys;\n    }(),\n    FLAGS: FLAGS,\n\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function load(fen) {\n      return _load(fen);\n    },\n\n    reset: function reset() {\n      return _reset();\n    },\n\n    moves: function moves(options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options);\n      var moves = [];\n\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (typeof options !== 'undefined' && 'verbose' in options && options.verbose) {\n          moves.push(make_pretty(ugly_moves[i]));\n        } else {\n          moves.push(move_to_san(ugly_moves[i], false));\n        }\n      }\n\n      return moves;\n    },\n\n    in_check: function in_check() {\n      return _in_check();\n    },\n\n    in_checkmate: function in_checkmate() {\n      return _in_checkmate();\n    },\n\n    in_stalemate: function in_stalemate() {\n      return _in_stalemate();\n    },\n\n    in_draw: function in_draw() {\n      return half_moves >= 100 || _in_stalemate() || _insufficient_material() || _in_threefold_repetition();\n    },\n\n    insufficient_material: function insufficient_material() {\n      return _insufficient_material();\n    },\n\n    in_threefold_repetition: function in_threefold_repetition() {\n      return _in_threefold_repetition();\n    },\n\n    game_over: function game_over() {\n      return half_moves >= 100 || _in_checkmate() || _in_stalemate() || _insufficient_material() || _in_threefold_repetition();\n    },\n\n    validate_fen: function validate_fen(fen) {\n      return _validate_fen(fen);\n    },\n\n    fen: function fen() {\n      return generate_fen();\n    },\n\n    board: function board() {\n      var output = [],\n          row = [];\n\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (_board[i] == null) {\n          row.push(null);\n        } else {\n          row.push({ type: _board[i].type, color: _board[i].color });\n        }\n        if (i + 1 & 0x88) {\n          output.push(row);\n          row = [];\n          i += 8;\n        }\n      }\n\n      return output;\n    },\n\n    pgn: function pgn(options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\n';\n      var max_width = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.max_width === 'number' ? options.max_width : 0;\n      var result = [];\n      var header_exists = false;\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \"' + header[i] + '\"]' + newline);\n        header_exists = true;\n      }\n\n      if (header_exists && _history.length) {\n        result.push(newline);\n      }\n\n      var append_comment = function append_comment(move_string) {\n        var comment = comments[generate_fen()];\n        if (typeof comment !== 'undefined') {\n          var delimiter = move_string.length > 0 ? ' ' : '';\n          move_string = '' + move_string + delimiter + '{' + comment + '}';\n        }\n        return move_string;\n      };\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = [];\n      while (_history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n\n      var moves = [];\n      var move_string = '';\n\n      /* special case of a commented starting position with no moves */\n      if (reversed_history.length === 0) {\n        moves.push(append_comment(''));\n      }\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        move_string = append_comment(move_string);\n        var move = reversed_history.pop();\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!_history.length && move.color === 'b') {\n          move_string = move_number + '. ...';\n        } else if (move.color === 'w') {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string);\n          }\n          move_string = move_number + '.';\n        }\n\n        move_string = move_string + ' ' + move_to_san(move, false);\n        make_move(move);\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(append_comment(move_string));\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== 'undefined') {\n        moves.push(header.Result);\n      }\n\n      /* history should be back to what it was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join('') + moves.join(' ');\n      }\n\n      var strip = function strip() {\n        if (result.length > 0 && result[result.length - 1] === ' ') {\n          result.pop();\n          return true;\n        }\n        return false;\n      };\n\n      /* NB: this does not preserve comment whitespace. */\n      var wrap_comment = function wrap_comment(width, move) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = move.split(' ')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var token = _step.value;\n\n            if (!token) {\n              continue;\n            }\n            if (width + token.length > max_width) {\n              while (strip()) {\n                width--;\n              }\n              result.push(newline);\n              width = 0;\n            }\n            result.push(token);\n            width += token.length;\n            result.push(' ');\n            width++;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (strip()) {\n          width--;\n        }\n        return width;\n      };\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0;\n      for (var i = 0; i < moves.length; i++) {\n        if (current_width + moves[i].length > max_width) {\n          if (moves[i].includes('{')) {\n            current_width = wrap_comment(current_width, moves[i]);\n            continue;\n          }\n        }\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === ' ') {\n            result.pop();\n          }\n\n          result.push(newline);\n          current_width = 0;\n        } else if (i !== 0) {\n          result.push(' ');\n          current_width++;\n        }\n        result.push(moves[i]);\n        current_width += moves[i].length;\n      }\n\n      return result.join('');\n    },\n\n    load_pgn: function load_pgn(pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy = typeof options !== 'undefined' && 'sloppy' in options ? options.sloppy : false;\n\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\');\n      }\n\n      function has_keys(object) {\n        for (var key in object) {\n          return true;\n        }\n        return false;\n      }\n\n      function parse_pgn_header(header, options) {\n        var newline_char = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\r?\\n';\n        var header_obj = {};\n        var headers = header.split(new RegExp(mask(newline_char)));\n        var key = '';\n        var value = '';\n\n        for (var i = 0; i < headers.length; i++) {\n          key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1');\n          value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\ *\\]$/, '$1');\n          if (trim(key).length > 0) {\n            header_obj[key] = value;\n          }\n        }\n\n        return header_obj;\n      }\n\n      var newline_char = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\r?\\n';\n\n      // RegExp to split header. Takes advantage of the fact that header and movetext\n      // will always have a blank line between them (ie, two newline_char's).\n      // With default newline_char, will equal: /^(\\[((?:\\r?\\n)|.)*\\])(?:\\r?\\n){2}/\n      var header_regex = new RegExp('^(\\\\[((?:' + mask(newline_char) + ')|.)*\\\\])' + '(?:' + mask(newline_char) + '){2}');\n\n      // If no header given, begin with moves.\n      var header_string = header_regex.test(pgn) ? header_regex.exec(pgn)[1] : '';\n\n      // Put the board in the starting position\n      _reset();\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options);\n      for (var key in headers) {\n        set_header([key, headers[key]]);\n      }\n\n      /* load the starting position indicated by [Setup '1'] and\n       * [FEN position] */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers && _load(headers['FEN'], true))) {\n          // second argument to load: don't clear the headers\n          return false;\n        }\n      }\n\n      /* NB: the regexes below that delete move numbers, recursive\n       * annotations, and numeric annotation glyphs may also match\n       * text in comments. To prevent this, we transform comments\n       * by hex-encoding them in place and decoding them again after\n       * the other tokens have been deleted.\n       *\n       * While the spec states that PGN files should be ASCII encoded,\n       * we use {en,de}codeURIComponent here to support arbitrary UTF8\n       * as a convenience for modern users */\n\n      var to_hex = function to_hex(string) {\n        return Array.from(string).map(function (c) {\n          /* encodeURI doesn't transform most ASCII characters,\n           * so we handle these ourselves */\n          return c.charCodeAt(0) < 128 ? c.charCodeAt(0).toString(16) : encodeURIComponent(c).replace(/\\%/g, '').toLowerCase();\n        }).join('');\n      };\n\n      var from_hex = function from_hex(string) {\n        return string.length == 0 ? '' : decodeURIComponent('%' + string.match(/.{1,2}/g).join('%'));\n      };\n\n      var encode_comment = function encode_comment(string) {\n        string = string.replace(new RegExp(mask(newline_char), 'g'), ' ');\n        return '{' + to_hex(string.slice(1, string.length - 1)) + '}';\n      };\n\n      var decode_comment = function decode_comment(string) {\n        if (string.startsWith('{') && string.endsWith('}')) {\n          return from_hex(string.slice(1, string.length - 1));\n        }\n      };\n\n      /* delete header to get the moves */\n      var ms = pgn.replace(header_string, '').replace(\n      /* encode comments so they don't get deleted below */\n      new RegExp('({[^}]*})+?|;([^' + mask(newline_char) + ']*)', 'g'), function (match, bracket, semicolon) {\n        return bracket !== undefined ? encode_comment(bracket) : ' ' + encode_comment('{' + semicolon.slice(1) + '}');\n      }).replace(new RegExp(mask(newline_char), 'g'), ' ');\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g;\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, '');\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, '');\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '');\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/));\n\n      /* delete empty entries */\n      moves = moves.join(',').replace(/,,+/g, ',').split(',');\n      var move = '';\n\n      for (var half_move = 0; half_move < moves.length - 1; half_move++) {\n        var comment = decode_comment(moves[half_move]);\n        if (comment !== undefined) {\n          comments[generate_fen()] = comment;\n          continue;\n        }\n        move = move_from_san(moves[half_move], sloppy);\n\n        /* move not possible! (don't clear the board to examine to show the\n         * latest valid position)\n         */\n        if (move == null) {\n          return false;\n        } else {\n          make_move(move);\n        }\n      }\n\n      comment = decode_comment(moves[moves.length - 1]);\n      if (comment !== undefined) {\n        comments[generate_fen()] = comment;\n        moves.pop();\n      }\n\n      /* examine last move */\n      move = moves[moves.length - 1];\n      if (POSSIBLE_RESULTS.indexOf(move) > -1) {\n        if (has_keys(header) && typeof header.Result === 'undefined') {\n          set_header(['Result', move]);\n        }\n      } else {\n        move = move_from_san(move, sloppy);\n        if (move == null) {\n          return false;\n        } else {\n          make_move(move);\n        }\n      }\n      return true;\n    },\n\n    header: function header() {\n      return set_header(arguments);\n    },\n\n    ascii: function ascii() {\n      return _ascii();\n    },\n\n    turn: function turn() {\n      return _turn;\n    },\n\n    move: function move(_move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy = typeof options !== 'undefined' && 'sloppy' in options ? options.sloppy : false;\n\n      var move_obj = null;\n\n      if (typeof _move === 'string') {\n        move_obj = move_from_san(_move, sloppy);\n      } else if ((typeof _move === 'undefined' ? 'undefined' : _typeof(_move)) === 'object') {\n        var moves = generate_moves();\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (_move.from === algebraic(moves[i].from) && _move.to === algebraic(moves[i].to) && (!('promotion' in moves[i]) || _move.promotion === moves[i].promotion)) {\n            move_obj = moves[i];\n            break;\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null;\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj);\n\n      make_move(move_obj);\n\n      return pretty_move;\n    },\n\n    undo: function undo() {\n      var move = undo_move();\n      return move ? make_pretty(move) : null;\n    },\n\n    clear: function clear() {\n      return _clear();\n    },\n\n    put: function put(piece, square) {\n      return _put(piece, square);\n    },\n\n    get: function get(square) {\n      return _get(square);\n    },\n\n    remove: function remove(square) {\n      return _remove(square);\n    },\n\n    perft: function perft(depth) {\n      return _perft(depth);\n    },\n\n    square_color: function square_color(square) {\n      if (square in SQUARES) {\n        var sq_0x88 = SQUARES[square];\n        return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark';\n      }\n\n      return null;\n    },\n\n    history: function history(options) {\n      var reversed_history = [];\n      var move_history = [];\n      var verbose = typeof options !== 'undefined' && 'verbose' in options && options.verbose;\n\n      while (_history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop();\n        if (verbose) {\n          move_history.push(make_pretty(move));\n        } else {\n          move_history.push(move_to_san(move));\n        }\n        make_move(move);\n      }\n\n      return move_history;\n    },\n\n    get_comment: function get_comment() {\n      return comments[generate_fen()];\n    },\n\n    set_comment: function set_comment(comment) {\n      comments[generate_fen()] = comment.replace('{', '[').replace('}', ']');\n    },\n\n    delete_comment: function delete_comment() {\n      var comment = comments[generate_fen()];\n      delete comments[generate_fen()];\n      return comment;\n    },\n\n    get_comments: function get_comments() {\n      prune_comments();\n      return Object.keys(comments).map(function (fen) {\n        return { fen: fen, comment: comments[fen] };\n      });\n    },\n\n    delete_comments: function delete_comments() {\n      prune_comments();\n      return Object.keys(comments).map(function (fen) {\n        var comment = comments[fen];\n        delete comments[fen];\n        return { fen: fen, comment: comment };\n      });\n    }\n  };\n};\n\n/* export Chess object if using node or any other CommonJS compatible\n * environment */\nif (true) exports.Echess = Echess;\n/* export Echess object for any RequireJS compatible environment */\nif (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n  return Echess;\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.start = void 0;\nvar board = __webpack_require__(1);\nvar fen_1 = __webpack_require__(3);\nvar config_1 = __webpack_require__(6);\nvar anim_1 = __webpack_require__(5);\nvar drag_1 = __webpack_require__(2);\nvar explosion_1 = __webpack_require__(16);\nfunction start(state, redrawAll) {\n    function toggleOrientation() {\n        board.toggleOrientation(state);\n        redrawAll();\n    }\n    return {\n        set: function set(config) {\n            if (config.orientation && config.orientation !== state.orientation) toggleOrientation();\n            (config.fen ? anim_1.anim : anim_1.render)(function (state) {\n                return config_1.configure(state, config);\n            }, state);\n        },\n\n        state: state,\n        getFen: function getFen() {\n            return fen_1.write(state.pieces);\n        },\n        toggleOrientation: toggleOrientation,\n        setPieces: function setPieces(pieces) {\n            anim_1.anim(function (state) {\n                return board.setPieces(state, pieces);\n            }, state);\n        },\n        selectSquare: function selectSquare(key, force) {\n            if (key) anim_1.anim(function (state) {\n                return board.selectSquare(state, key, force);\n            }, state);else if (state.selected) {\n                board.unselect(state);\n                state.dom.redraw();\n            }\n        },\n        move: function move(orig, dest) {\n            anim_1.anim(function (state) {\n                return board.baseMove(state, orig, dest);\n            }, state);\n        },\n        newPiece: function newPiece(piece, key) {\n            anim_1.anim(function (state) {\n                return board.baseNewPiece(state, piece, key);\n            }, state);\n        },\n        playPremove: function playPremove() {\n            if (state.premovable.current) {\n                if (anim_1.anim(board.playPremove, state)) return true;\n                state.dom.redraw();\n            }\n            return false;\n        },\n        playPredrop: function playPredrop(validate) {\n            if (state.predroppable.current) {\n                var result = board.playPredrop(state, validate);\n                state.dom.redraw();\n                return result;\n            }\n            return false;\n        },\n        cancelPremove: function cancelPremove() {\n            anim_1.render(board.unsetPremove, state);\n        },\n        cancelPredrop: function cancelPredrop() {\n            anim_1.render(board.unsetPredrop, state);\n        },\n        cancelMove: function cancelMove() {\n            anim_1.render(function (state) {\n                board.cancelMove(state);drag_1.cancel(state);\n            }, state);\n        },\n        stop: function stop() {\n            anim_1.render(function (state) {\n                board.stop(state);drag_1.cancel(state);\n            }, state);\n        },\n        explode: function explode(keys) {\n            explosion_1.explosion(state, keys);\n        },\n        setAutoShapes: function setAutoShapes(shapes) {\n            anim_1.render(function (state) {\n                return state.drawable.autoShapes = shapes;\n            }, state);\n        },\n        setShapes: function setShapes(shapes) {\n            anim_1.render(function (state) {\n                return state.drawable.shapes = shapes;\n            }, state);\n        },\n        getKeyAtDomPos: function getKeyAtDomPos(pos) {\n            return board.getKeyAtDomPos(pos, board.whitePov(state), state.dom.bounds());\n        },\n\n        redrawAll: redrawAll,\n        dragNewPiece: function dragNewPiece(piece, event, force) {\n            drag_1.dragNewPiece(state, piece, event, force);\n        },\n        destroy: function destroy() {\n            board.stop(state);\n            state.dom.unbind && state.dom.unbind();\n            state.dom.destroyed = true;\n        }\n    };\n}\nexports.start = start;\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drop = exports.cancelDropMode = exports.setDropMode = void 0;\nvar board = __webpack_require__(1);\nvar util = __webpack_require__(0);\nvar drag_1 = __webpack_require__(2);\nfunction setDropMode(s, piece) {\n    s.dropmode = {\n        active: true,\n        piece: piece\n    };\n    drag_1.cancel(s);\n}\nexports.setDropMode = setDropMode;\nfunction cancelDropMode(s) {\n    s.dropmode = {\n        active: false\n    };\n}\nexports.cancelDropMode = cancelDropMode;\nfunction drop(s, e) {\n    if (!s.dropmode.active) return;\n    board.unsetPremove(s);\n    board.unsetPredrop(s);\n    var piece = s.dropmode.piece;\n    if (piece) {\n        s.pieces.set('a0', piece);\n        var position = util.eventPosition(e);\n        var dest = position && board.getKeyAtDomPos(position, board.whitePov(s), s.dom.bounds());\n        if (dest) board.dropNewPiece(s, 'a0', dest);\n    }\n    s.dom.redraw();\n}\nexports.drop = drop;\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VjaGVzc2dyb3VuZC9kcm9wLmpzPzFhODciXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkcm9wIiwiY2FuY2VsRHJvcE1vZGUiLCJzZXREcm9wTW9kZSIsImJvYXJkIiwicmVxdWlyZSIsInV0aWwiLCJkcmFnXzEiLCJzIiwicGllY2UiLCJkcm9wbW9kZSIsImFjdGl2ZSIsImNhbmNlbCIsImUiLCJ1bnNldFByZW1vdmUiLCJ1bnNldFByZWRyb3AiLCJwaWVjZXMiLCJzZXQiLCJwb3NpdGlvbiIsImV2ZW50UG9zaXRpb24iLCJkZXN0IiwiZ2V0S2V5QXREb21Qb3MiLCJ3aGl0ZVBvdiIsImRvbSIsImJvdW5kcyIsImRyb3BOZXdQaWVjZSIsInJlZHJhdyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBRCxRQUFRRSxJQUFSLEdBQWVGLFFBQVFHLGNBQVIsR0FBeUJILFFBQVFJLFdBQVIsR0FBc0IsS0FBSyxDQUFuRTtBQUNBLElBQU1DLFFBQVEsbUJBQUFDLENBQVEsQ0FBUixDQUFkO0FBQ0EsSUFBTUMsT0FBTyxtQkFBQUQsQ0FBUSxDQUFSLENBQWI7QUFDQSxJQUFNRSxTQUFTLG1CQUFBRixDQUFRLENBQVIsQ0FBZjtBQUNBLFNBQVNGLFdBQVQsQ0FBcUJLLENBQXJCLEVBQXdCQyxLQUF4QixFQUErQjtBQUMzQkQsTUFBRUUsUUFBRixHQUFhO0FBQ1RDLGdCQUFRLElBREM7QUFFVEY7QUFGUyxLQUFiO0FBSUFGLFdBQU9LLE1BQVAsQ0FBY0osQ0FBZDtBQUNIO0FBQ0RULFFBQVFJLFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0EsU0FBU0QsY0FBVCxDQUF3Qk0sQ0FBeEIsRUFBMkI7QUFDdkJBLE1BQUVFLFFBQUYsR0FBYTtBQUNUQyxnQkFBUTtBQURDLEtBQWI7QUFHSDtBQUNEWixRQUFRRyxjQUFSLEdBQXlCQSxjQUF6QjtBQUNBLFNBQVNELElBQVQsQ0FBY08sQ0FBZCxFQUFpQkssQ0FBakIsRUFBb0I7QUFDaEIsUUFBSSxDQUFDTCxFQUFFRSxRQUFGLENBQVdDLE1BQWhCLEVBQ0k7QUFDSlAsVUFBTVUsWUFBTixDQUFtQk4sQ0FBbkI7QUFDQUosVUFBTVcsWUFBTixDQUFtQlAsQ0FBbkI7QUFDQSxRQUFNQyxRQUFRRCxFQUFFRSxRQUFGLENBQVdELEtBQXpCO0FBQ0EsUUFBSUEsS0FBSixFQUFXO0FBQ1BELFVBQUVRLE1BQUYsQ0FBU0MsR0FBVCxDQUFhLElBQWIsRUFBbUJSLEtBQW5CO0FBQ0EsWUFBTVMsV0FBV1osS0FBS2EsYUFBTCxDQUFtQk4sQ0FBbkIsQ0FBakI7QUFDQSxZQUFNTyxPQUFPRixZQUFZZCxNQUFNaUIsY0FBTixDQUFxQkgsUUFBckIsRUFBK0JkLE1BQU1rQixRQUFOLENBQWVkLENBQWYsQ0FBL0IsRUFBa0RBLEVBQUVlLEdBQUYsQ0FBTUMsTUFBTixFQUFsRCxDQUF6QjtBQUNBLFlBQUlKLElBQUosRUFDSWhCLE1BQU1xQixZQUFOLENBQW1CakIsQ0FBbkIsRUFBc0IsSUFBdEIsRUFBNEJZLElBQTVCO0FBQ1A7QUFDRFosTUFBRWUsR0FBRixDQUFNRyxNQUFOO0FBQ0g7QUFDRDNCLFFBQVFFLElBQVIsR0FBZUEsSUFBZjtBQUNBIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRyb3AgPSBleHBvcnRzLmNhbmNlbERyb3BNb2RlID0gZXhwb3J0cy5zZXREcm9wTW9kZSA9IHZvaWQgMDtcbmNvbnN0IGJvYXJkID0gcmVxdWlyZShcIi4vYm9hcmRcIik7XG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IGRyYWdfMSA9IHJlcXVpcmUoXCIuL2RyYWdcIik7XG5mdW5jdGlvbiBzZXREcm9wTW9kZShzLCBwaWVjZSkge1xuICAgIHMuZHJvcG1vZGUgPSB7XG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgcGllY2VcbiAgICB9O1xuICAgIGRyYWdfMS5jYW5jZWwocyk7XG59XG5leHBvcnRzLnNldERyb3BNb2RlID0gc2V0RHJvcE1vZGU7XG5mdW5jdGlvbiBjYW5jZWxEcm9wTW9kZShzKSB7XG4gICAgcy5kcm9wbW9kZSA9IHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxuICAgIH07XG59XG5leHBvcnRzLmNhbmNlbERyb3BNb2RlID0gY2FuY2VsRHJvcE1vZGU7XG5mdW5jdGlvbiBkcm9wKHMsIGUpIHtcbiAgICBpZiAoIXMuZHJvcG1vZGUuYWN0aXZlKVxuICAgICAgICByZXR1cm47XG4gICAgYm9hcmQudW5zZXRQcmVtb3ZlKHMpO1xuICAgIGJvYXJkLnVuc2V0UHJlZHJvcChzKTtcbiAgICBjb25zdCBwaWVjZSA9IHMuZHJvcG1vZGUucGllY2U7XG4gICAgaWYgKHBpZWNlKSB7XG4gICAgICAgIHMucGllY2VzLnNldCgnYTAnLCBwaWVjZSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdXRpbC5ldmVudFBvc2l0aW9uKGUpO1xuICAgICAgICBjb25zdCBkZXN0ID0gcG9zaXRpb24gJiYgYm9hcmQuZ2V0S2V5QXREb21Qb3MocG9zaXRpb24sIGJvYXJkLndoaXRlUG92KHMpLCBzLmRvbS5ib3VuZHMoKSk7XG4gICAgICAgIGlmIChkZXN0KVxuICAgICAgICAgICAgYm9hcmQuZHJvcE5ld1BpZWNlKHMsICdhMCcsIGRlc3QpO1xuICAgIH1cbiAgICBzLmRvbS5yZWRyYXcoKTtcbn1cbmV4cG9ydHMuZHJvcCA9IGRyb3A7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcm9wLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZWNoZXNzZ3JvdW5kL2Ryb3AuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Echessground = void 0;\nvar api_1 = __webpack_require__(12);\nvar config_1 = __webpack_require__(6);\nvar state_1 = __webpack_require__(19);\nvar wrap_1 = __webpack_require__(20);\nvar events = __webpack_require__(15);\nvar render_1 = __webpack_require__(18);\nvar svg = __webpack_require__(8);\nvar util = __webpack_require__(0);\nfunction Echessground(element, config) {\n    var maybeState = state_1.defaults();\n    config_1.configure(maybeState, config || {});\n    function redrawAll() {\n        var prevUnbind = 'dom' in maybeState ? maybeState.dom.unbind : undefined;\n        var relative = maybeState.viewOnly && !maybeState.drawable.visible,\n            elements = wrap_1.renderWrap(element, maybeState, relative),\n            bounds = util.memo(function () {\n            return elements.board.getBoundingClientRect();\n        }),\n            redrawNow = function redrawNow(skipSvg) {\n            render_1.render(state);\n            if (!skipSvg && elements.svg) svg.renderSvg(state, elements.svg);\n        },\n            boundsUpdated = function boundsUpdated() {\n            bounds.clear();\n            render_1.updateBounds(state);\n            if (elements.svg) svg.renderSvg(state, elements.svg);\n        };\n        var state = maybeState;\n        state.dom = {\n            elements: elements,\n            bounds: bounds,\n            redraw: debounceRedraw(redrawNow),\n            redrawNow: redrawNow,\n            unbind: prevUnbind,\n            relative: relative\n        };\n        state.drawable.prevSvgHash = '';\n        redrawNow(false);\n        events.bindBoard(state, boundsUpdated);\n        if (!prevUnbind) state.dom.unbind = events.bindDocument(state, boundsUpdated);\n        state.events.insert && state.events.insert(elements);\n        return state;\n    }\n    return api_1.start(redrawAll(), redrawAll);\n}\nexports.Echessground = Echessground;\nfunction debounceRedraw(redrawNow) {\n    var redrawing = false;\n    return function () {\n        if (redrawing) return;\n        redrawing = true;\n        requestAnimationFrame(function () {\n            redrawNow();\n            redrawing = false;\n        });\n    };\n}\n//# sourceMappingURL=echessground.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VjaGVzc2dyb3VuZC9lY2hlc3Nncm91bmQuanM/MjVjYiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkVjaGVzc2dyb3VuZCIsImFwaV8xIiwicmVxdWlyZSIsImNvbmZpZ18xIiwic3RhdGVfMSIsIndyYXBfMSIsImV2ZW50cyIsInJlbmRlcl8xIiwic3ZnIiwidXRpbCIsImVsZW1lbnQiLCJjb25maWciLCJtYXliZVN0YXRlIiwiZGVmYXVsdHMiLCJjb25maWd1cmUiLCJyZWRyYXdBbGwiLCJwcmV2VW5iaW5kIiwiZG9tIiwidW5iaW5kIiwidW5kZWZpbmVkIiwicmVsYXRpdmUiLCJ2aWV3T25seSIsImRyYXdhYmxlIiwidmlzaWJsZSIsImVsZW1lbnRzIiwicmVuZGVyV3JhcCIsImJvdW5kcyIsIm1lbW8iLCJib2FyZCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlZHJhd05vdyIsInNraXBTdmciLCJyZW5kZXIiLCJzdGF0ZSIsInJlbmRlclN2ZyIsImJvdW5kc1VwZGF0ZWQiLCJjbGVhciIsInVwZGF0ZUJvdW5kcyIsInJlZHJhdyIsImRlYm91bmNlUmVkcmF3IiwicHJldlN2Z0hhc2giLCJiaW5kQm9hcmQiLCJiaW5kRG9jdW1lbnQiLCJpbnNlcnQiLCJzdGFydCIsInJlZHJhd2luZyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBRCxRQUFRRSxZQUFSLEdBQXVCLEtBQUssQ0FBNUI7QUFDQSxJQUFNQyxRQUFRLG1CQUFBQyxDQUFRLEVBQVIsQ0FBZDtBQUNBLElBQU1DLFdBQVcsbUJBQUFELENBQVEsQ0FBUixDQUFqQjtBQUNBLElBQU1FLFVBQVUsbUJBQUFGLENBQVEsRUFBUixDQUFoQjtBQUNBLElBQU1HLFNBQVMsbUJBQUFILENBQVEsRUFBUixDQUFmO0FBQ0EsSUFBTUksU0FBUyxtQkFBQUosQ0FBUSxFQUFSLENBQWY7QUFDQSxJQUFNSyxXQUFXLG1CQUFBTCxDQUFRLEVBQVIsQ0FBakI7QUFDQSxJQUFNTSxNQUFNLG1CQUFBTixDQUFRLENBQVIsQ0FBWjtBQUNBLElBQU1PLE9BQU8sbUJBQUFQLENBQVEsQ0FBUixDQUFiO0FBQ0EsU0FBU0YsWUFBVCxDQUFzQlUsT0FBdEIsRUFBK0JDLE1BQS9CLEVBQXVDO0FBQ25DLFFBQU1DLGFBQWFSLFFBQVFTLFFBQVIsRUFBbkI7QUFDQVYsYUFBU1csU0FBVCxDQUFtQkYsVUFBbkIsRUFBK0JELFVBQVUsRUFBekM7QUFDQSxhQUFTSSxTQUFULEdBQXFCO0FBQ2pCLFlBQU1DLGFBQWEsU0FBU0osVUFBVCxHQUFzQkEsV0FBV0ssR0FBWCxDQUFlQyxNQUFyQyxHQUE4Q0MsU0FBakU7QUFDQSxZQUFNQyxXQUFXUixXQUFXUyxRQUFYLElBQXVCLENBQUNULFdBQVdVLFFBQVgsQ0FBb0JDLE9BQTdEO0FBQUEsWUFBc0VDLFdBQVduQixPQUFPb0IsVUFBUCxDQUFrQmYsT0FBbEIsRUFBMkJFLFVBQTNCLEVBQXVDUSxRQUF2QyxDQUFqRjtBQUFBLFlBQW1JTSxTQUFTakIsS0FBS2tCLElBQUwsQ0FBVTtBQUFBLG1CQUFNSCxTQUFTSSxLQUFULENBQWVDLHFCQUFmLEVBQU47QUFBQSxTQUFWLENBQTVJO0FBQUEsWUFBcU1DLFlBQVksU0FBWkEsU0FBWSxDQUFDQyxPQUFELEVBQWE7QUFDMU54QixxQkFBU3lCLE1BQVQsQ0FBZ0JDLEtBQWhCO0FBQ0EsZ0JBQUksQ0FBQ0YsT0FBRCxJQUFZUCxTQUFTaEIsR0FBekIsRUFDSUEsSUFBSTBCLFNBQUosQ0FBY0QsS0FBZCxFQUFxQlQsU0FBU2hCLEdBQTlCO0FBQ1AsU0FKRDtBQUFBLFlBSUcyQixnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQU07QUFDckJULG1CQUFPVSxLQUFQO0FBQ0E3QixxQkFBUzhCLFlBQVQsQ0FBc0JKLEtBQXRCO0FBQ0EsZ0JBQUlULFNBQVNoQixHQUFiLEVBQ0lBLElBQUkwQixTQUFKLENBQWNELEtBQWQsRUFBcUJULFNBQVNoQixHQUE5QjtBQUNQLFNBVEQ7QUFVQSxZQUFNeUIsUUFBUXJCLFVBQWQ7QUFDQXFCLGNBQU1oQixHQUFOLEdBQVk7QUFDUk8sOEJBRFE7QUFFUkUsMEJBRlE7QUFHUlksb0JBQVFDLGVBQWVULFNBQWYsQ0FIQTtBQUlSQSxnQ0FKUTtBQUtSWixvQkFBUUYsVUFMQTtBQU1SSTtBQU5RLFNBQVo7QUFRQWEsY0FBTVgsUUFBTixDQUFla0IsV0FBZixHQUE2QixFQUE3QjtBQUNBVixrQkFBVSxLQUFWO0FBQ0F4QixlQUFPbUMsU0FBUCxDQUFpQlIsS0FBakIsRUFBd0JFLGFBQXhCO0FBQ0EsWUFBSSxDQUFDbkIsVUFBTCxFQUNJaUIsTUFBTWhCLEdBQU4sQ0FBVUMsTUFBVixHQUFtQlosT0FBT29DLFlBQVAsQ0FBb0JULEtBQXBCLEVBQTJCRSxhQUEzQixDQUFuQjtBQUNKRixjQUFNM0IsTUFBTixDQUFhcUMsTUFBYixJQUF1QlYsTUFBTTNCLE1BQU4sQ0FBYXFDLE1BQWIsQ0FBb0JuQixRQUFwQixDQUF2QjtBQUNBLGVBQU9TLEtBQVA7QUFDSDtBQUNELFdBQU9oQyxNQUFNMkMsS0FBTixDQUFZN0IsV0FBWixFQUF5QkEsU0FBekIsQ0FBUDtBQUNIO0FBQ0RqQixRQUFRRSxZQUFSLEdBQXVCQSxZQUF2QjtBQUNBLFNBQVN1QyxjQUFULENBQXdCVCxTQUF4QixFQUFtQztBQUMvQixRQUFJZSxZQUFZLEtBQWhCO0FBQ0EsV0FBTyxZQUFNO0FBQ1QsWUFBSUEsU0FBSixFQUNJO0FBQ0pBLG9CQUFZLElBQVo7QUFDQUMsOEJBQXNCLFlBQU07QUFDeEJoQjtBQUNBZSx3QkFBWSxLQUFaO0FBQ0gsU0FIRDtBQUlILEtBUkQ7QUFTSDtBQUNEIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVjaGVzc2dyb3VuZCA9IHZvaWQgMDtcbmNvbnN0IGFwaV8xID0gcmVxdWlyZShcIi4vYXBpXCIpO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5jb25zdCBzdGF0ZV8xID0gcmVxdWlyZShcIi4vc3RhdGVcIik7XG5jb25zdCB3cmFwXzEgPSByZXF1aXJlKFwiLi93cmFwXCIpO1xuY29uc3QgZXZlbnRzID0gcmVxdWlyZShcIi4vZXZlbnRzXCIpO1xuY29uc3QgcmVuZGVyXzEgPSByZXF1aXJlKFwiLi9yZW5kZXJcIik7XG5jb25zdCBzdmcgPSByZXF1aXJlKFwiLi9zdmdcIik7XG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmZ1bmN0aW9uIEVjaGVzc2dyb3VuZChlbGVtZW50LCBjb25maWcpIHtcbiAgICBjb25zdCBtYXliZVN0YXRlID0gc3RhdGVfMS5kZWZhdWx0cygpO1xuICAgIGNvbmZpZ18xLmNvbmZpZ3VyZShtYXliZVN0YXRlLCBjb25maWcgfHwge30pO1xuICAgIGZ1bmN0aW9uIHJlZHJhd0FsbCgpIHtcbiAgICAgICAgY29uc3QgcHJldlVuYmluZCA9ICdkb20nIGluIG1heWJlU3RhdGUgPyBtYXliZVN0YXRlLmRvbS51bmJpbmQgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlID0gbWF5YmVTdGF0ZS52aWV3T25seSAmJiAhbWF5YmVTdGF0ZS5kcmF3YWJsZS52aXNpYmxlLCBlbGVtZW50cyA9IHdyYXBfMS5yZW5kZXJXcmFwKGVsZW1lbnQsIG1heWJlU3RhdGUsIHJlbGF0aXZlKSwgYm91bmRzID0gdXRpbC5tZW1vKCgpID0+IGVsZW1lbnRzLmJvYXJkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSwgcmVkcmF3Tm93ID0gKHNraXBTdmcpID0+IHtcbiAgICAgICAgICAgIHJlbmRlcl8xLnJlbmRlcihzdGF0ZSk7XG4gICAgICAgICAgICBpZiAoIXNraXBTdmcgJiYgZWxlbWVudHMuc3ZnKVxuICAgICAgICAgICAgICAgIHN2Zy5yZW5kZXJTdmcoc3RhdGUsIGVsZW1lbnRzLnN2Zyk7XG4gICAgICAgIH0sIGJvdW5kc1VwZGF0ZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBib3VuZHMuY2xlYXIoKTtcbiAgICAgICAgICAgIHJlbmRlcl8xLnVwZGF0ZUJvdW5kcyhzdGF0ZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudHMuc3ZnKVxuICAgICAgICAgICAgICAgIHN2Zy5yZW5kZXJTdmcoc3RhdGUsIGVsZW1lbnRzLnN2Zyk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN0YXRlID0gbWF5YmVTdGF0ZTtcbiAgICAgICAgc3RhdGUuZG9tID0ge1xuICAgICAgICAgICAgZWxlbWVudHMsXG4gICAgICAgICAgICBib3VuZHMsXG4gICAgICAgICAgICByZWRyYXc6IGRlYm91bmNlUmVkcmF3KHJlZHJhd05vdyksXG4gICAgICAgICAgICByZWRyYXdOb3csXG4gICAgICAgICAgICB1bmJpbmQ6IHByZXZVbmJpbmQsXG4gICAgICAgICAgICByZWxhdGl2ZVxuICAgICAgICB9O1xuICAgICAgICBzdGF0ZS5kcmF3YWJsZS5wcmV2U3ZnSGFzaCA9ICcnO1xuICAgICAgICByZWRyYXdOb3coZmFsc2UpO1xuICAgICAgICBldmVudHMuYmluZEJvYXJkKHN0YXRlLCBib3VuZHNVcGRhdGVkKTtcbiAgICAgICAgaWYgKCFwcmV2VW5iaW5kKVxuICAgICAgICAgICAgc3RhdGUuZG9tLnVuYmluZCA9IGV2ZW50cy5iaW5kRG9jdW1lbnQoc3RhdGUsIGJvdW5kc1VwZGF0ZWQpO1xuICAgICAgICBzdGF0ZS5ldmVudHMuaW5zZXJ0ICYmIHN0YXRlLmV2ZW50cy5pbnNlcnQoZWxlbWVudHMpO1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuICAgIHJldHVybiBhcGlfMS5zdGFydChyZWRyYXdBbGwoKSwgcmVkcmF3QWxsKTtcbn1cbmV4cG9ydHMuRWNoZXNzZ3JvdW5kID0gRWNoZXNzZ3JvdW5kO1xuZnVuY3Rpb24gZGVib3VuY2VSZWRyYXcocmVkcmF3Tm93KSB7XG4gICAgbGV0IHJlZHJhd2luZyA9IGZhbHNlO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChyZWRyYXdpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJlZHJhd2luZyA9IHRydWU7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICByZWRyYXdOb3coKTtcbiAgICAgICAgICAgIHJlZHJhd2luZyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWNoZXNzZ3JvdW5kLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZWNoZXNzZ3JvdW5kL2VjaGVzc2dyb3VuZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bindDocument = exports.bindBoard = void 0;\nvar drag = __webpack_require__(2);\nvar draw = __webpack_require__(7);\nvar drop_1 = __webpack_require__(13);\nvar util_1 = __webpack_require__(0);\nfunction bindBoard(s, boundsUpdated) {\n    var boardEl = s.dom.elements.board;\n    if (!s.dom.relative && s.resizable && 'ResizeObserver' in window) {\n        var observer = new window['ResizeObserver'](boundsUpdated);\n        observer.observe(boardEl);\n    }\n    if (s.viewOnly) return;\n    var onStart = startDragOrDraw(s);\n    boardEl.addEventListener('touchstart', onStart, { passive: false });\n    boardEl.addEventListener('mousedown', onStart, { passive: false });\n    if (s.disableContextMenu || s.drawable.enabled) {\n        boardEl.addEventListener('contextmenu', function (e) {\n            return e.preventDefault();\n        });\n    }\n}\nexports.bindBoard = bindBoard;\nfunction bindDocument(s, boundsUpdated) {\n    var unbinds = [];\n    if (!s.dom.relative && s.resizable && !('ResizeObserver' in window)) {\n        unbinds.push(unbindable(document.body, 'echessground.resize', boundsUpdated));\n    }\n    if (!s.viewOnly) {\n        var onmove = dragOrDraw(s, drag.move, draw.move);\n        var onend = dragOrDraw(s, drag.end, draw.end);\n        var _arr = ['touchmove', 'mousemove'];\n        for (var _i = 0; _i < _arr.length; _i++) {\n            var ev = _arr[_i];\n            unbinds.push(unbindable(document, ev, onmove));\n        }var _arr2 = ['touchend', 'mouseup'];\n        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n            var _ev = _arr2[_i2];\n            unbinds.push(unbindable(document, _ev, onend));\n        }var onScroll = function onScroll() {\n            return s.dom.bounds.clear();\n        };\n        unbinds.push(unbindable(document, 'scroll', onScroll, { capture: true, passive: true }));\n        unbinds.push(unbindable(window, 'resize', onScroll, { passive: true }));\n    }\n    return function () {\n        return unbinds.forEach(function (f) {\n            return f();\n        });\n    };\n}\nexports.bindDocument = bindDocument;\nfunction unbindable(el, eventName, callback, options) {\n    el.addEventListener(eventName, callback, options);\n    return function () {\n        return el.removeEventListener(eventName, callback, options);\n    };\n}\nfunction startDragOrDraw(s) {\n    return function (e) {\n        if (s.draggable.current) drag.cancel(s);else if (s.drawable.current) draw.cancel(s);else if (e.shiftKey || util_1.isRightButton(e)) {\n            if (s.drawable.enabled) draw.start(s, e);\n        } else if (!s.viewOnly) {\n            if (s.dropmode.active) drop_1.drop(s, e);else drag.start(s, e);\n        }\n    };\n}\nfunction dragOrDraw(s, withDrag, withDraw) {\n    return function (e) {\n        if (s.drawable.current) {\n            if (s.drawable.enabled) withDraw(s, e);\n        } else if (!s.viewOnly) withDrag(s, e);\n    };\n}\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.explosion = void 0;\nfunction explosion(state, keys) {\n    state.exploding = { stage: 1, keys: keys };\n    state.dom.redraw();\n    setTimeout(function () {\n        setStage(state, 2);\n        setTimeout(function () {\n            return setStage(state, undefined);\n        }, 120);\n    }, 120);\n}\nexports.explosion = explosion;\nfunction setStage(state, stage) {\n    if (state.exploding) {\n        if (stage) state.exploding.stage = stage;else state.exploding = undefined;\n        state.dom.redraw();\n    }\n}\n//# sourceMappingURL=explosion.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VjaGVzc2dyb3VuZC9leHBsb3Npb24uanM/MWY5MCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImV4cGxvc2lvbiIsInN0YXRlIiwia2V5cyIsImV4cGxvZGluZyIsInN0YWdlIiwiZG9tIiwicmVkcmF3Iiwic2V0VGltZW91dCIsInNldFN0YWdlIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0FELFFBQVFFLFNBQVIsR0FBb0IsS0FBSyxDQUF6QjtBQUNBLFNBQVNBLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCQyxJQUExQixFQUFnQztBQUM1QkQsVUFBTUUsU0FBTixHQUFrQixFQUFFQyxPQUFPLENBQVQsRUFBWUYsVUFBWixFQUFsQjtBQUNBRCxVQUFNSSxHQUFOLENBQVVDLE1BQVY7QUFDQUMsZUFBVyxZQUFNO0FBQ2JDLGlCQUFTUCxLQUFULEVBQWdCLENBQWhCO0FBQ0FNLG1CQUFXO0FBQUEsbUJBQU1DLFNBQVNQLEtBQVQsRUFBZ0JRLFNBQWhCLENBQU47QUFBQSxTQUFYLEVBQTZDLEdBQTdDO0FBQ0gsS0FIRCxFQUdHLEdBSEg7QUFJSDtBQUNEWCxRQUFRRSxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBLFNBQVNRLFFBQVQsQ0FBa0JQLEtBQWxCLEVBQXlCRyxLQUF6QixFQUFnQztBQUM1QixRQUFJSCxNQUFNRSxTQUFWLEVBQXFCO0FBQ2pCLFlBQUlDLEtBQUosRUFDSUgsTUFBTUUsU0FBTixDQUFnQkMsS0FBaEIsR0FBd0JBLEtBQXhCLENBREosS0FHSUgsTUFBTUUsU0FBTixHQUFrQk0sU0FBbEI7QUFDSlIsY0FBTUksR0FBTixDQUFVQyxNQUFWO0FBQ0g7QUFDSjtBQUNEIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4cGxvc2lvbiA9IHZvaWQgMDtcbmZ1bmN0aW9uIGV4cGxvc2lvbihzdGF0ZSwga2V5cykge1xuICAgIHN0YXRlLmV4cGxvZGluZyA9IHsgc3RhZ2U6IDEsIGtleXMgfTtcbiAgICBzdGF0ZS5kb20ucmVkcmF3KCk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldFN0YWdlKHN0YXRlLCAyKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzZXRTdGFnZShzdGF0ZSwgdW5kZWZpbmVkKSwgMTIwKTtcbiAgICB9LCAxMjApO1xufVxuZXhwb3J0cy5leHBsb3Npb24gPSBleHBsb3Npb247XG5mdW5jdGlvbiBzZXRTdGFnZShzdGF0ZSwgc3RhZ2UpIHtcbiAgICBpZiAoc3RhdGUuZXhwbG9kaW5nKSB7XG4gICAgICAgIGlmIChzdGFnZSlcbiAgICAgICAgICAgIHN0YXRlLmV4cGxvZGluZy5zdGFnZSA9IHN0YWdlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzdGF0ZS5leHBsb2RpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIHN0YXRlLmRvbS5yZWRyYXcoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBsb3Npb24uanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9lY2hlc3Nncm91bmQvZXhwbG9zaW9uLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.premove = exports.queen = exports.elephant = exports.knight = void 0;\nvar util = __webpack_require__(0);\nfunction diff(a, b) {\n    return Math.abs(a - b);\n}\nfunction pawn(color) {\n    return function (x1, y1, x2, y2) {\n        return diff(x1, x2) < 2 && (color === 'white' ? y2 === y1 + 1 || y1 <= 1 && y2 === y1 + 2 && x1 === x2 : y2 === y1 - 1 || y1 >= 6 && y2 === y1 - 2 && x1 === x2);\n    };\n}\nexports.knight = function (x1, y1, x2, y2) {\n    var xd = diff(x1, x2);\n    var yd = diff(y1, y2);\n    return xd === 1 && yd === 2 || xd === 2 && yd === 1;\n};\nvar bishop = function bishop(x1, y1, x2, y2) {\n    return diff(x1, x2) === diff(y1, y2);\n};\nvar rook = function rook(x1, y1, x2, y2) {\n    return x1 === x2 || y1 === y2;\n};\nexports.elephant = function (x1, y1, x2, y2) {\n    return bishop(x1, y1, x2, y2) || rook(x1, y1, x2, y2) || exports.knight(x1, x2, y1, y2);\n};\nexports.queen = function (x1, y1, x2, y2) {\n    return bishop(x1, y1, x2, y2) || rook(x1, y1, x2, y2);\n};\nfunction king(color, rookFiles, canCastle) {\n    return function (x1, y1, x2, y2) {\n        return diff(x1, x2) < 2 && diff(y1, y2) < 2 || canCastle && y1 === y2 && y1 === (color === 'white' ? 0 : 7) && (x1 === 4 && (x2 === 2 && rookFiles.includes(0) || x2 === 6 && rookFiles.includes(7)) || rookFiles.includes(x2));\n    };\n}\nfunction rookFilesOf(pieces, color) {\n    var backrank = color === 'white' ? '1' : '8';\n    var files = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = pieces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                piece = _step$value[1];\n\n            if (key[1] === backrank && piece.color === color && piece.role === 'rook') {\n                files.push(util.key2pos(key)[0]);\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    return files;\n}\nfunction premove(pieces, key, canCastle) {\n    var piece = pieces.get(key);\n    if (!piece) return [];\n    var pos = util.key2pos(key),\n        r = piece.role,\n        mobility = r === 'pawn' ? pawn(piece.color) : r === 'knight' ? exports.knight : r === 'bishop' ? bishop : r === 'rook' ? rook : r === 'elephant' ? exports.elephant : r === 'queen' ? exports.queen : king(piece.color, rookFilesOf(pieces, piece.color), canCastle);\n    return util.allPos.filter(function (pos2) {\n        return (pos[0] !== pos2[0] || pos[1] !== pos2[1]) && mobility(pos[0], pos[1], pos2[0], pos2[1]);\n    }).map(util.pos2key);\n}\nexports.premove = premove;\n//# sourceMappingURL=premove.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateBounds = exports.render = void 0;\nvar util_1 = __webpack_require__(0);\nvar board_1 = __webpack_require__(1);\nvar util = __webpack_require__(0);\nfunction render(s) {\n    var asWhite = board_1.whitePov(s),\n        posToTranslate = s.dom.relative ? util.posToTranslateRel : util.posToTranslateAbs(s.dom.bounds()),\n        translate = s.dom.relative ? util.translateRel : util.translateAbs,\n        boardEl = s.dom.elements.board,\n        pieces = s.pieces,\n        curAnim = s.animation.current,\n        anims = curAnim ? curAnim.plan.anims : new Map(),\n        fadings = curAnim ? curAnim.plan.fadings : new Map(),\n        curDrag = s.draggable.current,\n        squares = computeSquareClasses(s),\n        samePieces = new Set(),\n        sameSquares = new Set(),\n        movedPieces = new Map(),\n        movedSquares = new Map();\n    var k = void 0,\n        el = void 0,\n        pieceAtKey = void 0,\n        elPieceName = void 0,\n        anim = void 0,\n        fading = void 0,\n        pMvdset = void 0,\n        pMvd = void 0,\n        sMvdset = void 0,\n        sMvd = void 0;\n    el = boardEl.firstChild;\n    while (el) {\n        k = el.cgKey;\n        if (isPieceNode(el)) {\n            pieceAtKey = pieces.get(k);\n            anim = anims.get(k);\n            fading = fadings.get(k);\n            elPieceName = el.cgPiece;\n            if (el.cgDragging && (!curDrag || curDrag.orig !== k)) {\n                el.classList.remove('dragging');\n                translate(el, posToTranslate(util_1.key2pos(k), asWhite));\n                el.cgDragging = false;\n            }\n            if (!fading && el.cgFading) {\n                el.cgFading = false;\n                el.classList.remove('fading');\n            }\n            if (pieceAtKey) {\n                if (anim && el.cgAnimating && elPieceName === pieceNameOf(pieceAtKey)) {\n                    var pos = util_1.key2pos(k);\n                    pos[0] += anim[2];\n                    pos[1] += anim[3];\n                    el.classList.add('anim');\n                    translate(el, posToTranslate(pos, asWhite));\n                } else if (el.cgAnimating) {\n                    el.cgAnimating = false;\n                    el.classList.remove('anim');\n                    translate(el, posToTranslate(util_1.key2pos(k), asWhite));\n                    if (s.addPieceZIndex) el.style.zIndex = posZIndex(util_1.key2pos(k), asWhite);\n                }\n                if (elPieceName === pieceNameOf(pieceAtKey) && (!fading || !el.cgFading)) {\n                    samePieces.add(k);\n                } else {\n                    if (fading && elPieceName === pieceNameOf(fading)) {\n                        el.classList.add('fading');\n                        el.cgFading = true;\n                    } else {\n                        appendValue(movedPieces, elPieceName, el);\n                    }\n                }\n            } else {\n                appendValue(movedPieces, elPieceName, el);\n            }\n        } else if (isSquareNode(el)) {\n            var cn = el.className;\n            if (squares.get(k) === cn) sameSquares.add(k);else appendValue(movedSquares, cn, el);\n        }\n        el = el.nextSibling;\n    }\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = squares[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                sk = _step$value[0],\n                className = _step$value[1];\n\n            if (!sameSquares.has(sk)) {\n                sMvdset = movedSquares.get(className);\n                sMvd = sMvdset && sMvdset.pop();\n                var translation = posToTranslate(util_1.key2pos(sk), asWhite);\n                if (sMvd) {\n                    sMvd.cgKey = sk;\n                    translate(sMvd, translation);\n                } else {\n                    var squareNode = util_1.createEl('square', className);\n                    squareNode.cgKey = sk;\n                    translate(squareNode, translation);\n                    boardEl.insertBefore(squareNode, boardEl.firstChild);\n                }\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n        for (var _iterator2 = pieces[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _step2$value = _slicedToArray(_step2.value, 2),\n                _k = _step2$value[0],\n                p = _step2$value[1];\n\n            anim = anims.get(_k);\n            if (!samePieces.has(_k)) {\n                pMvdset = movedPieces.get(pieceNameOf(p));\n                pMvd = pMvdset && pMvdset.pop();\n                if (pMvd) {\n                    pMvd.cgKey = _k;\n                    if (pMvd.cgFading) {\n                        pMvd.classList.remove('fading');\n                        pMvd.cgFading = false;\n                    }\n                    var _pos = util_1.key2pos(_k);\n                    if (s.addPieceZIndex) pMvd.style.zIndex = posZIndex(_pos, asWhite);\n                    if (anim) {\n                        pMvd.cgAnimating = true;\n                        pMvd.classList.add('anim');\n                        _pos[0] += anim[2];\n                        _pos[1] += anim[3];\n                    }\n                    translate(pMvd, posToTranslate(_pos, asWhite));\n                } else {\n                    var pieceName = pieceNameOf(p),\n                        pieceNode = util_1.createEl('piece', pieceName),\n                        _pos2 = util_1.key2pos(_k);\n                    pieceNode.cgPiece = pieceName;\n                    pieceNode.cgKey = _k;\n                    if (anim) {\n                        pieceNode.cgAnimating = true;\n                        _pos2[0] += anim[2];\n                        _pos2[1] += anim[3];\n                    }\n                    translate(pieceNode, posToTranslate(_pos2, asWhite));\n                    if (s.addPieceZIndex) pieceNode.style.zIndex = posZIndex(_pos2, asWhite);\n                    boardEl.appendChild(pieceNode);\n                }\n            }\n        }\n    } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n            }\n        } finally {\n            if (_didIteratorError2) {\n                throw _iteratorError2;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n        for (var _iterator3 = movedPieces.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var nodes = _step3.value;\n\n            removeNodes(s, nodes);\n        }\n    } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                _iterator3.return();\n            }\n        } finally {\n            if (_didIteratorError3) {\n                throw _iteratorError3;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n        for (var _iterator4 = movedSquares.values()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var _nodes = _step4.value;\n\n            removeNodes(s, _nodes);\n        }\n    } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n            }\n        } finally {\n            if (_didIteratorError4) {\n                throw _iteratorError4;\n            }\n        }\n    }\n}\nexports.render = render;\nfunction updateBounds(s) {\n    if (s.dom.relative) return;\n    var asWhite = board_1.whitePov(s),\n        posToTranslate = util.posToTranslateAbs(s.dom.bounds());\n    var el = s.dom.elements.board.firstChild;\n    while (el) {\n        if (isPieceNode(el) && !el.cgAnimating || isSquareNode(el)) {\n            util.translateAbs(el, posToTranslate(util_1.key2pos(el.cgKey), asWhite));\n        }\n        el = el.nextSibling;\n    }\n}\nexports.updateBounds = updateBounds;\nfunction isPieceNode(el) {\n    return el.tagName === 'PIECE';\n}\nfunction isSquareNode(el) {\n    return el.tagName === 'SQUARE';\n}\nfunction removeNodes(s, nodes) {\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n        for (var _iterator5 = nodes[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var node = _step5.value;\n\n            s.dom.elements.board.removeChild(node);\n        }\n    } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n            }\n        } finally {\n            if (_didIteratorError5) {\n                throw _iteratorError5;\n            }\n        }\n    }\n}\nfunction posZIndex(pos, asWhite) {\n    var z = 2 + pos[1] * 8 + (7 - pos[0]);\n    if (asWhite) z = 67 - z;\n    return z + '';\n}\nfunction pieceNameOf(piece) {\n    return piece.color + \" \" + piece.role;\n}\nfunction computeSquareClasses(s) {\n    var _a;\n    var squares = new Map();\n    if (s.lastMove && s.highlight.lastMove) {\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n            for (var _iterator6 = s.lastMove[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var _k2 = _step6.value;\n\n                addSquare(squares, _k2, 'last-move');\n            }\n        } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                }\n            } finally {\n                if (_didIteratorError6) {\n                    throw _iteratorError6;\n                }\n            }\n        }\n    }if (s.check && s.highlight.check) addSquare(squares, s.check, 'check');\n    if (s.selected) {\n        addSquare(squares, s.selected, 'selected');\n        if (s.movable.showDests) {\n            var dests = (_a = s.movable.dests) === null || _a === void 0 ? void 0 : _a.get(s.selected);\n            if (dests) {\n                var _iteratorNormalCompletion7 = true;\n                var _didIteratorError7 = false;\n                var _iteratorError7 = undefined;\n\n                try {\n                    for (var _iterator7 = dests[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                        var _k3 = _step7.value;\n\n                        addSquare(squares, _k3, 'move-dest' + (s.pieces.has(_k3) ? ' oc' : ''));\n                    }\n                } catch (err) {\n                    _didIteratorError7 = true;\n                    _iteratorError7 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                            _iterator7.return();\n                        }\n                    } finally {\n                        if (_didIteratorError7) {\n                            throw _iteratorError7;\n                        }\n                    }\n                }\n            }var pDests = s.premovable.dests;\n            if (pDests) {\n                var _iteratorNormalCompletion8 = true;\n                var _didIteratorError8 = false;\n                var _iteratorError8 = undefined;\n\n                try {\n                    for (var _iterator8 = pDests[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                        var _k4 = _step8.value;\n\n                        addSquare(squares, _k4, 'premove-dest' + (s.pieces.has(_k4) ? ' oc' : ''));\n                    }\n                } catch (err) {\n                    _didIteratorError8 = true;\n                    _iteratorError8 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                            _iterator8.return();\n                        }\n                    } finally {\n                        if (_didIteratorError8) {\n                            throw _iteratorError8;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    var premove = s.premovable.current;\n    if (premove) {\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n\n        try {\n            for (var _iterator9 = premove[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                var _k5 = _step9.value;\n\n                addSquare(squares, _k5, 'current-premove');\n            }\n        } catch (err) {\n            _didIteratorError9 = true;\n            _iteratorError9 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                    _iterator9.return();\n                }\n            } finally {\n                if (_didIteratorError9) {\n                    throw _iteratorError9;\n                }\n            }\n        }\n    } else if (s.predroppable.current) addSquare(squares, s.predroppable.current.key, 'current-premove');\n    var o = s.exploding;\n    if (o) {\n        var _iteratorNormalCompletion10 = true;\n        var _didIteratorError10 = false;\n        var _iteratorError10 = undefined;\n\n        try {\n            for (var _iterator10 = o.keys[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                var _k6 = _step10.value;\n\n                addSquare(squares, _k6, 'exploding' + o.stage);\n            }\n        } catch (err) {\n            _didIteratorError10 = true;\n            _iteratorError10 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                    _iterator10.return();\n                }\n            } finally {\n                if (_didIteratorError10) {\n                    throw _iteratorError10;\n                }\n            }\n        }\n    }return squares;\n}\nfunction addSquare(squares, key, klass) {\n    var classes = squares.get(key);\n    if (classes) squares.set(key, classes + \" \" + klass);else squares.set(key, klass);\n}\nfunction appendValue(map, key, value) {\n    var arr = map.get(key);\n    if (arr) arr.push(value);else map.set(key, [value]);\n}\n//# sourceMappingURL=render.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaults = void 0;\nvar fen = __webpack_require__(3);\nvar util_1 = __webpack_require__(0);\nfunction defaults() {\n    return {\n        pieces: fen.read(fen.initial),\n        orientation: 'white',\n        turnColor: 'white',\n        coordinates: true,\n        autoCastle: true,\n        viewOnly: false,\n        disableContextMenu: false,\n        resizable: true,\n        addPieceZIndex: false,\n        pieceKey: false,\n        highlight: {\n            lastMove: true,\n            check: true\n        },\n        animation: {\n            enabled: true,\n            duration: 200\n        },\n        movable: {\n            free: true,\n            color: 'both',\n            showDests: true,\n            events: {},\n            rookCastle: true\n        },\n        premovable: {\n            enabled: true,\n            showDests: true,\n            castle: true,\n            events: {}\n        },\n        predroppable: {\n            enabled: false,\n            events: {}\n        },\n        draggable: {\n            enabled: true,\n            distance: 3,\n            autoDistance: true,\n            showGhost: true,\n            deleteOnDropOff: false\n        },\n        dropmode: {\n            active: false\n        },\n        selectable: {\n            enabled: true\n        },\n        stats: {\n            dragged: !('ontouchstart' in window)\n        },\n        events: {},\n        drawable: {\n            enabled: true,\n            visible: true,\n            defaultSnapToValidMove: true,\n            eraseOnClick: true,\n            shapes: [],\n            autoShapes: [],\n            brushes: {\n                green: { key: 'g', color: '#15781B', opacity: 1, lineWidth: 10 },\n                red: { key: 'r', color: '#882020', opacity: 1, lineWidth: 10 },\n                blue: { key: 'b', color: '#003088', opacity: 1, lineWidth: 10 },\n                yellow: { key: 'y', color: '#e68f00', opacity: 1, lineWidth: 10 },\n                paleBlue: { key: 'pb', color: '#003088', opacity: 0.4, lineWidth: 15 },\n                paleGreen: { key: 'pg', color: '#15781B', opacity: 0.4, lineWidth: 15 },\n                paleRed: { key: 'pr', color: '#882020', opacity: 0.4, lineWidth: 15 },\n                paleGrey: { key: 'pgr', color: '#4a4a4a', opacity: 0.35, lineWidth: 15 }\n            },\n            pieces: {\n                baseUrl: 'images/pieces/icpieces/'\n            },\n            prevSvgHash: ''\n        },\n        hold: util_1.timer()\n    };\n}\nexports.defaults = defaults;\n//# sourceMappingURL=state.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VjaGVzc2dyb3VuZC9zdGF0ZS5qcz81ZmQ0Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdHMiLCJmZW4iLCJyZXF1aXJlIiwidXRpbF8xIiwicGllY2VzIiwicmVhZCIsImluaXRpYWwiLCJvcmllbnRhdGlvbiIsInR1cm5Db2xvciIsImNvb3JkaW5hdGVzIiwiYXV0b0Nhc3RsZSIsInZpZXdPbmx5IiwiZGlzYWJsZUNvbnRleHRNZW51IiwicmVzaXphYmxlIiwiYWRkUGllY2VaSW5kZXgiLCJwaWVjZUtleSIsImhpZ2hsaWdodCIsImxhc3RNb3ZlIiwiY2hlY2siLCJhbmltYXRpb24iLCJlbmFibGVkIiwiZHVyYXRpb24iLCJtb3ZhYmxlIiwiZnJlZSIsImNvbG9yIiwic2hvd0Rlc3RzIiwiZXZlbnRzIiwicm9va0Nhc3RsZSIsInByZW1vdmFibGUiLCJjYXN0bGUiLCJwcmVkcm9wcGFibGUiLCJkcmFnZ2FibGUiLCJkaXN0YW5jZSIsImF1dG9EaXN0YW5jZSIsInNob3dHaG9zdCIsImRlbGV0ZU9uRHJvcE9mZiIsImRyb3Btb2RlIiwiYWN0aXZlIiwic2VsZWN0YWJsZSIsInN0YXRzIiwiZHJhZ2dlZCIsIndpbmRvdyIsImRyYXdhYmxlIiwidmlzaWJsZSIsImRlZmF1bHRTbmFwVG9WYWxpZE1vdmUiLCJlcmFzZU9uQ2xpY2siLCJzaGFwZXMiLCJhdXRvU2hhcGVzIiwiYnJ1c2hlcyIsImdyZWVuIiwia2V5Iiwib3BhY2l0eSIsImxpbmVXaWR0aCIsInJlZCIsImJsdWUiLCJ5ZWxsb3ciLCJwYWxlQmx1ZSIsInBhbGVHcmVlbiIsInBhbGVSZWQiLCJwYWxlR3JleSIsImJhc2VVcmwiLCJwcmV2U3ZnSGFzaCIsImhvbGQiLCJ0aW1lciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVB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QVBIO0FBaUJOaEQsb0JBQVE7QUFDSndELHlCQUFTO0FBREwsYUFqQkY7QUFvQk5DLHlCQUFhO0FBcEJQLFNBckRQO0FBMkVIQyxjQUFNM0QsT0FBTzRELEtBQVA7QUEzRUgsS0FBUDtBQTZFSDtBQUNEakUsUUFBUUUsUUFBUixHQUFtQkEsUUFBbkI7QUFDQSIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0cyA9IHZvaWQgMDtcbmNvbnN0IGZlbiA9IHJlcXVpcmUoXCIuL2ZlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5mdW5jdGlvbiBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwaWVjZXM6IGZlbi5yZWFkKGZlbi5pbml0aWFsKSxcbiAgICAgICAgb3JpZW50YXRpb246ICd3aGl0ZScsXG4gICAgICAgIHR1cm5Db2xvcjogJ3doaXRlJyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IHRydWUsXG4gICAgICAgIGF1dG9DYXN0bGU6IHRydWUsXG4gICAgICAgIHZpZXdPbmx5OiBmYWxzZSxcbiAgICAgICAgZGlzYWJsZUNvbnRleHRNZW51OiBmYWxzZSxcbiAgICAgICAgcmVzaXphYmxlOiB0cnVlLFxuICAgICAgICBhZGRQaWVjZVpJbmRleDogZmFsc2UsXG4gICAgICAgIHBpZWNlS2V5OiBmYWxzZSxcbiAgICAgICAgaGlnaGxpZ2h0OiB7XG4gICAgICAgICAgICBsYXN0TW92ZTogdHJ1ZSxcbiAgICAgICAgICAgIGNoZWNrOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAyMDBcbiAgICAgICAgfSxcbiAgICAgICAgbW92YWJsZToge1xuICAgICAgICAgICAgZnJlZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbG9yOiAnYm90aCcsXG4gICAgICAgICAgICBzaG93RGVzdHM6IHRydWUsXG4gICAgICAgICAgICBldmVudHM6IHt9LFxuICAgICAgICAgICAgcm9va0Nhc3RsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBwcmVtb3ZhYmxlOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgc2hvd0Rlc3RzOiB0cnVlLFxuICAgICAgICAgICAgY2FzdGxlOiB0cnVlLFxuICAgICAgICAgICAgZXZlbnRzOiB7fVxuICAgICAgICB9LFxuICAgICAgICBwcmVkcm9wcGFibGU6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZXZlbnRzOiB7fVxuICAgICAgICB9LFxuICAgICAgICBkcmFnZ2FibGU6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBkaXN0YW5jZTogMyxcbiAgICAgICAgICAgIGF1dG9EaXN0YW5jZTogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dHaG9zdDogdHJ1ZSxcbiAgICAgICAgICAgIGRlbGV0ZU9uRHJvcE9mZjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgZHJvcG1vZGU6IHtcbiAgICAgICAgICAgIGFjdGl2ZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0YWJsZToge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBzdGF0czoge1xuICAgICAgICAgICAgZHJhZ2dlZDogISgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpXG4gICAgICAgIH0sXG4gICAgICAgIGV2ZW50czoge30sXG4gICAgICAgIGRyYXdhYmxlOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHRTbmFwVG9WYWxpZE1vdmU6IHRydWUsXG4gICAgICAgICAgICBlcmFzZU9uQ2xpY2s6IHRydWUsXG4gICAgICAgICAgICBzaGFwZXM6IFtdLFxuICAgICAgICAgICAgYXV0b1NoYXBlczogW10sXG4gICAgICAgICAgICBicnVzaGVzOiB7XG4gICAgICAgICAgICAgICAgZ3JlZW46IHsga2V5OiAnZycsIGNvbG9yOiAnIzE1NzgxQicsIG9wYWNpdHk6IDEsIGxpbmVXaWR0aDogMTAgfSxcbiAgICAgICAgICAgICAgICByZWQ6IHsga2V5OiAncicsIGNvbG9yOiAnIzg4MjAyMCcsIG9wYWNpdHk6IDEsIGxpbmVXaWR0aDogMTAgfSxcbiAgICAgICAgICAgICAgICBibHVlOiB7IGtleTogJ2InLCBjb2xvcjogJyMwMDMwODgnLCBvcGFjaXR5OiAxLCBsaW5lV2lkdGg6IDEwIH0sXG4gICAgICAgICAgICAgICAgeWVsbG93OiB7IGtleTogJ3knLCBjb2xvcjogJyNlNjhmMDAnLCBvcGFjaXR5OiAxLCBsaW5lV2lkdGg6IDEwIH0sXG4gICAgICAgICAgICAgICAgcGFsZUJsdWU6IHsga2V5OiAncGInLCBjb2xvcjogJyMwMDMwODgnLCBvcGFjaXR5OiAwLjQsIGxpbmVXaWR0aDogMTUgfSxcbiAgICAgICAgICAgICAgICBwYWxlR3JlZW46IHsga2V5OiAncGcnLCBjb2xvcjogJyMxNTc4MUInLCBvcGFjaXR5OiAwLjQsIGxpbmVXaWR0aDogMTUgfSxcbiAgICAgICAgICAgICAgICBwYWxlUmVkOiB7IGtleTogJ3ByJywgY29sb3I6ICcjODgyMDIwJywgb3BhY2l0eTogMC40LCBsaW5lV2lkdGg6IDE1IH0sXG4gICAgICAgICAgICAgICAgcGFsZUdyZXk6IHsga2V5OiAncGdyJywgY29sb3I6ICcjNGE0YTRhJywgb3BhY2l0eTogMC4zNSwgbGluZVdpZHRoOiAxNSB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGllY2VzOiB7XG4gICAgICAgICAgICAgICAgYmFzZVVybDogJ2ltYWdlcy9waWVjZXMvaWNwaWVjZXMvJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXZTdmdIYXNoOiAnJ1xuICAgICAgICB9LFxuICAgICAgICBob2xkOiB1dGlsXzEudGltZXIoKVxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0ZS5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2VjaGVzc2dyb3VuZC9zdGF0ZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.renderWrap = void 0;\nvar util_1 = __webpack_require__(0);\nvar types_1 = __webpack_require__(4);\nvar svg_1 = __webpack_require__(8);\nfunction renderWrap(element, s, relative) {\n    element.innerHTML = '';\n    element.classList.add('cg-wrap');\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = types_1.colors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var c = _step.value;\n\n            element.classList.toggle('orientation-' + c, s.orientation === c);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    element.classList.toggle('manipulable', !s.viewOnly);\n    var helper = util_1.createEl('cg-helper');\n    element.appendChild(helper);\n    var container = util_1.createEl('cg-container');\n    helper.appendChild(container);\n    var board = util_1.createEl('cg-board');\n    container.appendChild(board);\n    var svg = void 0;\n    if (s.drawable.visible && !relative) {\n        svg = svg_1.createElement('svg');\n        svg.appendChild(svg_1.createElement('defs'));\n        container.appendChild(svg);\n    }\n    if (s.coordinates) {\n        var orientClass = s.orientation === 'black' ? ' black' : '';\n        container.appendChild(renderCoords(types_1.ranks, 'ranks' + orientClass));\n        container.appendChild(renderCoords(types_1.files, 'files' + orientClass));\n    }\n    var ghost = void 0;\n    if (s.draggable.showGhost && !relative) {\n        ghost = util_1.createEl('piece', 'ghost');\n        util_1.setVisible(ghost, false);\n        container.appendChild(ghost);\n    }\n    return {\n        board: board,\n        container: container,\n        ghost: ghost,\n        svg: svg\n    };\n}\nexports.renderWrap = renderWrap;\nfunction renderCoords(elems, className) {\n    var el = util_1.createEl('coords', className);\n    var f = void 0;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n        for (var _iterator2 = elems[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var elem = _step2.value;\n\n            f = util_1.createEl('coord');\n            f.textContent = elem;\n            el.appendChild(f);\n        }\n    } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n            }\n        } finally {\n            if (_didIteratorError2) {\n                throw _iteratorError2;\n            }\n        }\n    }\n\n    return el;\n}\n//# sourceMappingURL=wrap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VjaGVzc2dyb3VuZC93cmFwLmpzPzJkMjQiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZW5kZXJXcmFwIiwidXRpbF8xIiwicmVxdWlyZSIsInR5cGVzXzEiLCJzdmdfMSIsImVsZW1lbnQiLCJzIiwicmVsYXRpdmUiLCJpbm5lckhUTUwiLCJjbGFzc0xpc3QiLCJhZGQiLCJjb2xvcnMiLCJjIiwidG9nZ2xlIiwib3JpZW50YXRpb24iLCJ2aWV3T25seSIsImhlbHBlciIsImNyZWF0ZUVsIiwiYXBwZW5kQ2hpbGQiLCJjb250YWluZXIiLCJib2FyZCIsInN2ZyIsImRyYXdhYmxlIiwidmlzaWJsZSIsImNyZWF0ZUVsZW1lbnQiLCJjb29yZGluYXRlcyIsIm9yaWVudENsYXNzIiwicmVuZGVyQ29vcmRzIiwicmFua3MiLCJmaWxlcyIsImdob3N0IiwiZHJhZ2dhYmxlIiwic2hvd0dob3N0Iiwic2V0VmlzaWJsZSIsImVsZW1zIiwiY2xhc3NOYW1lIiwiZWwiLCJmIiwiZWxlbSIsInRleHRDb250ZW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0FELFFBQVFFLFVBQVIsR0FBcUIsS0FBSyxDQUExQjtBQUNBLElBQU1DLFNBQVMsbUJBQUFDLENBQVEsQ0FBUixDQUFmO0FBQ0EsSUFBTUMsVUFBVSxtQkFBQUQsQ0FBUSxDQUFSLENBQWhCO0FBQ0EsSUFBTUUsUUFBUSxtQkFBQUYsQ0FBUSxDQUFSLENBQWQ7QUFDQSxTQUFTRixVQUFULENBQW9CSyxPQUFwQixFQUE2QkMsQ0FBN0IsRUFBZ0NDLFFBQWhDLEVBQTBDO0FBQ3RDRixZQUFRRyxTQUFSLEdBQW9CLEVBQXBCO0FBQ0FILFlBQVFJLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLFNBQXRCO0FBRnNDO0FBQUE7QUFBQTs7QUFBQTtBQUd0Qyw2QkFBZ0JQLFFBQVFRLE1BQXhCO0FBQUEsZ0JBQVdDLENBQVg7O0FBQ0lQLG9CQUFRSSxTQUFSLENBQWtCSSxNQUFsQixDQUF5QixpQkFBaUJELENBQTFDLEVBQTZDTixFQUFFUSxXQUFGLEtBQWtCRixDQUEvRDtBQURKO0FBSHNDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBS3RDUCxZQUFRSSxTQUFSLENBQWtCSSxNQUFsQixDQUF5QixhQUF6QixFQUF3QyxDQUFDUCxFQUFFUyxRQUEzQztBQUNBLFFBQU1DLFNBQVNmLE9BQU9nQixRQUFQLENBQWdCLFdBQWhCLENBQWY7QUFDQVosWUFBUWEsV0FBUixDQUFvQkYsTUFBcEI7QUFDQSxRQUFNRyxZQUFZbEIsT0FBT2dCLFFBQVAsQ0FBZ0IsY0FBaEIsQ0FBbEI7QUFDQUQsV0FBT0UsV0FBUCxDQUFtQkMsU0FBbkI7QUFDQSxRQUFNQyxRQUFRbkIsT0FBT2dCLFFBQVAsQ0FBZ0IsVUFBaEIsQ0FBZDtBQUNBRSxjQUFVRCxXQUFWLENBQXNCRSxLQUF0QjtBQUNBLFFBQUlDLFlBQUo7QUFDQSxRQUFJZixFQUFFZ0IsUUFBRixDQUFXQyxPQUFYLElBQXNCLENBQUNoQixRQUEzQixFQUFxQztBQUNqQ2MsY0FBTWpCLE1BQU1vQixhQUFOLENBQW9CLEtBQXBCLENBQU47QUFDQUgsWUFBSUgsV0FBSixDQUFnQmQsTUFBTW9CLGFBQU4sQ0FBb0IsTUFBcEIsQ0FBaEI7QUFDQUwsa0JBQVVELFdBQVYsQ0FBc0JHLEdBQXRCO0FBQ0g7QUFDRCxRQUFJZixFQUFFbUIsV0FBTixFQUFtQjtBQUNmLFlBQU1DLGNBQWNwQixFQUFFUSxXQUFGLEtBQWtCLE9BQWxCLEdBQTRCLFFBQTVCLEdBQXVDLEVBQTNEO0FBQ0FLLGtCQUFVRCxXQUFWLENBQXNCUyxhQUFheEIsUUFBUXlCLEtBQXJCLEVBQTRCLFVBQVVGLFdBQXRDLENBQXRCO0FBQ0FQLGtCQUFVRCxXQUFWLENBQXNCUyxhQUFheEIsUUFBUTBCLEtBQXJCLEVBQTRCLFVBQVVILFdBQXRDLENBQXRCO0FBQ0g7QUFDRCxRQUFJSSxjQUFKO0FBQ0EsUUFBSXhCLEVBQUV5QixTQUFGLENBQVlDLFNBQVosSUFBeUIsQ0FBQ3pCLFFBQTlCLEVBQXdDO0FBQ3BDdUIsZ0JBQVE3QixPQUFPZ0IsUUFBUCxDQUFnQixPQUFoQixFQUF5QixPQUF6QixDQUFSO0FBQ0FoQixlQUFPZ0MsVUFBUCxDQUFrQkgsS0FBbEIsRUFBeUIsS0FBekI7QUFDQVgsa0JBQVVELFdBQVYsQ0FBc0JZLEtBQXRCO0FBQ0g7QUFDRCxXQUFPO0FBQ0hWLG9CQURHO0FBRUhELDRCQUZHO0FBR0hXLG9CQUhHO0FBSUhUO0FBSkcsS0FBUDtBQU1IO0FBQ0R2QixRQUFRRSxVQUFSLEdBQXFCQSxVQUFyQjtBQUNBLFNBQVMyQixZQUFULENBQXNCTyxLQUF0QixFQUE2QkMsU0FBN0IsRUFBd0M7QUFDcEMsUUFBTUMsS0FBS25DLE9BQU9nQixRQUFQLENBQWdCLFFBQWhCLEVBQTBCa0IsU0FBMUIsQ0FBWDtBQUNBLFFBQUlFLFVBQUo7QUFGb0M7QUFBQTtBQUFBOztBQUFBO0FBR3BDLDhCQUFtQkgsS0FBbkIsbUlBQTBCO0FBQUEsZ0JBQWZJLElBQWU7O0FBQ3RCRCxnQkFBSXBDLE9BQU9nQixRQUFQLENBQWdCLE9BQWhCLENBQUo7QUFDQW9CLGNBQUVFLFdBQUYsR0FBZ0JELElBQWhCO0FBQ0FGLGVBQUdsQixXQUFILENBQWVtQixDQUFmO0FBQ0g7QUFQbUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFRcEMsV0FBT0QsRUFBUDtBQUNIO0FBQ0QiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVuZGVyV3JhcCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBzdmdfMSA9IHJlcXVpcmUoXCIuL3N2Z1wiKTtcbmZ1bmN0aW9uIHJlbmRlcldyYXAoZWxlbWVudCwgcywgcmVsYXRpdmUpIHtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY2ctd3JhcCcpO1xuICAgIGZvciAoY29uc3QgYyBvZiB0eXBlc18xLmNvbG9ycylcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdvcmllbnRhdGlvbi0nICsgYywgcy5vcmllbnRhdGlvbiA9PT0gYyk7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdtYW5pcHVsYWJsZScsICFzLnZpZXdPbmx5KTtcbiAgICBjb25zdCBoZWxwZXIgPSB1dGlsXzEuY3JlYXRlRWwoJ2NnLWhlbHBlcicpO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoaGVscGVyKTtcbiAgICBjb25zdCBjb250YWluZXIgPSB1dGlsXzEuY3JlYXRlRWwoJ2NnLWNvbnRhaW5lcicpO1xuICAgIGhlbHBlci5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgIGNvbnN0IGJvYXJkID0gdXRpbF8xLmNyZWF0ZUVsKCdjZy1ib2FyZCcpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChib2FyZCk7XG4gICAgbGV0IHN2ZztcbiAgICBpZiAocy5kcmF3YWJsZS52aXNpYmxlICYmICFyZWxhdGl2ZSkge1xuICAgICAgICBzdmcgPSBzdmdfMS5jcmVhdGVFbGVtZW50KCdzdmcnKTtcbiAgICAgICAgc3ZnLmFwcGVuZENoaWxkKHN2Z18xLmNyZWF0ZUVsZW1lbnQoJ2RlZnMnKSk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzdmcpO1xuICAgIH1cbiAgICBpZiAocy5jb29yZGluYXRlcykge1xuICAgICAgICBjb25zdCBvcmllbnRDbGFzcyA9IHMub3JpZW50YXRpb24gPT09ICdibGFjaycgPyAnIGJsYWNrJyA6ICcnO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyQ29vcmRzKHR5cGVzXzEucmFua3MsICdyYW5rcycgKyBvcmllbnRDbGFzcykpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyQ29vcmRzKHR5cGVzXzEuZmlsZXMsICdmaWxlcycgKyBvcmllbnRDbGFzcykpO1xuICAgIH1cbiAgICBsZXQgZ2hvc3Q7XG4gICAgaWYgKHMuZHJhZ2dhYmxlLnNob3dHaG9zdCAmJiAhcmVsYXRpdmUpIHtcbiAgICAgICAgZ2hvc3QgPSB1dGlsXzEuY3JlYXRlRWwoJ3BpZWNlJywgJ2dob3N0Jyk7XG4gICAgICAgIHV0aWxfMS5zZXRWaXNpYmxlKGdob3N0LCBmYWxzZSk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChnaG9zdCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGJvYXJkLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGdob3N0LFxuICAgICAgICBzdmdcbiAgICB9O1xufVxuZXhwb3J0cy5yZW5kZXJXcmFwID0gcmVuZGVyV3JhcDtcbmZ1bmN0aW9uIHJlbmRlckNvb3JkcyhlbGVtcywgY2xhc3NOYW1lKSB7XG4gICAgY29uc3QgZWwgPSB1dGlsXzEuY3JlYXRlRWwoJ2Nvb3JkcycsIGNsYXNzTmFtZSk7XG4gICAgbGV0IGY7XG4gICAgZm9yIChjb25zdCBlbGVtIG9mIGVsZW1zKSB7XG4gICAgICAgIGYgPSB1dGlsXzEuY3JlYXRlRWwoJ2Nvb3JkJyk7XG4gICAgICAgIGYudGV4dENvbnRlbnQgPSBlbGVtO1xuICAgICAgICBlbC5hcHBlbmRDaGlsZChmKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcC5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2VjaGVzc2dyb3VuZC93cmFwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = uniques;\nfunction uniques(arr) {\n  var uniqueArray = arr.filter(function (elem, index, self) {\n    return index === self.indexOf(elem);\n  });\n  return uniqueArray;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lY2hlc3Nib2FyZC9VdGlsLmpzP2ZkZjkiXSwibmFtZXMiOlsidW5pcXVlcyIsImFyciIsInVuaXF1ZUFycmF5IiwiZmlsdGVyIiwiZWxlbSIsImluZGV4Iiwic2VsZiIsImluZGV4T2YiXSwibWFwcGluZ3MiOiI7QUFBTyxTQUFTQSxPQUFULENBQWtCQyxHQUFsQixFQUF1QjtBQUM1QixNQUFJQyxjQUFjRCxJQUFJRSxNQUFKLENBQVcsVUFBVUMsSUFBVixFQUFnQkMsS0FBaEIsRUFBdUJDLElBQXZCLEVBQTZCO0FBQ3hELFdBQU9ELFVBQVVDLEtBQUtDLE9BQUwsQ0FBYUgsSUFBYixDQUFqQjtBQUNELEdBRmlCLENBQWxCO0FBR0EsU0FBT0YsV0FBUDtBQUNEIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHVuaXF1ZXMgKGFycikge1xuICBsZXQgdW5pcXVlQXJyYXkgPSBhcnIuZmlsdGVyKGZ1bmN0aW9uIChlbGVtLCBpbmRleCwgc2VsZikge1xuICAgIHJldHVybiBpbmRleCA9PT0gc2VsZi5pbmRleE9mKGVsZW0pXG4gIH0pXG4gIHJldHVybiB1bmlxdWVBcnJheVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvZWNoZXNzYm9hcmQvVXRpbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (immutable) */ __webpack_exports__[\"install\"] = install;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_echessboard_index_vue__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_echessboard_index_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_echessboard_index_vue__);\n/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, \"echessboard\", function() { return __WEBPACK_IMPORTED_MODULE_0__components_echessboard_index_vue___default.a; });\n\n\n// Install the components\nfunction install(Vue) {\n  Vue.component('echessboard', __WEBPACK_IMPORTED_MODULE_0__components_echessboard_index_vue___default.a);\n  /* -- Add more components here -- */\n}\n\n// Expose the components\n\n\n/* -- Plugin definition & Auto-install -- */\n/* You shouldn't have to modify the code below */\n\n// Plugin\nvar plugin = {\n  /* eslint-disable no-undef */\n  version: \"0.0.3\",\n  install: install\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (plugin);\n\n// Auto-install\nvar GlobalVue = null;\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue;\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin);\n}\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(9)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJpbnN0YWxsIiwiVnVlIiwiY29tcG9uZW50IiwicGx1Z2luIiwidmVyc2lvbiIsIkdsb2JhbFZ1ZSIsIndpbmRvdyIsImdsb2JhbCIsInVzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFFQTtBQUNPLFNBQVNBLE9BQVQsQ0FBa0JDLEdBQWxCLEVBQXVCO0FBQzVCQSxNQUFJQyxTQUFKLENBQWMsYUFBZCxFQUE2Qix5RUFBN0I7QUFDQTtBQUNEOztBQUVEO0FBQ0E7O0FBS0E7QUFDQTs7QUFFQTtBQUNBLElBQU1DLFNBQVM7QUFDYjtBQUNBQyxXQUFTLE9BRkk7QUFHYko7QUFIYSxDQUFmOztBQU1BLCtEQUFlRyxNQUFmOztBQUVBO0FBQ0EsSUFBSUUsWUFBWSxJQUFoQjtBQUNBLElBQUksT0FBT0MsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQ0QsY0FBWUMsT0FBT0wsR0FBbkI7QUFDRCxDQUZELE1BRU8sSUFBSSxPQUFPTSxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQ3hDRixjQUFZRSxPQUFPTixHQUFuQjtBQUNEO0FBQ0QsSUFBSUksU0FBSixFQUFlO0FBQ2JBLFlBQVVHLEdBQVYsQ0FBY0wsTUFBZDtBQUNELEMiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZWNoZXNzYm9hcmQgZnJvbSAnLi9jb21wb25lbnRzL2VjaGVzc2JvYXJkL2luZGV4LnZ1ZSdcblxuLy8gSW5zdGFsbCB0aGUgY29tcG9uZW50c1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGwgKFZ1ZSkge1xuICBWdWUuY29tcG9uZW50KCdlY2hlc3Nib2FyZCcsIGVjaGVzc2JvYXJkKVxuICAvKiAtLSBBZGQgbW9yZSBjb21wb25lbnRzIGhlcmUgLS0gKi9cbn1cblxuLy8gRXhwb3NlIHRoZSBjb21wb25lbnRzXG5leHBvcnQge1xuICBlY2hlc3Nib2FyZCxcbiAgLyogLS0gQWRkIG1vcmUgY29tcG9uZW50cyBoZXJlIC0tICovXG59XG5cbi8qIC0tIFBsdWdpbiBkZWZpbml0aW9uICYgQXV0by1pbnN0YWxsIC0tICovXG4vKiBZb3Ugc2hvdWxkbid0IGhhdmUgdG8gbW9kaWZ5IHRoZSBjb2RlIGJlbG93ICovXG5cbi8vIFBsdWdpblxuY29uc3QgcGx1Z2luID0ge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICB2ZXJzaW9uOiBWRVJTSU9OLFxuICBpbnN0YWxsLFxufVxuXG5leHBvcnQgZGVmYXVsdCBwbHVnaW5cblxuLy8gQXV0by1pbnN0YWxsXG5sZXQgR2xvYmFsVnVlID0gbnVsbFxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIEdsb2JhbFZ1ZSA9IHdpbmRvdy5WdWVcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgR2xvYmFsVnVlID0gZ2xvYmFsLlZ1ZVxufVxuaWYgKEdsb2JhbFZ1ZSkge1xuICBHbG9iYWxWdWUudXNlKHBsdWdpbilcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__jlincoln_echess_js__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__jlincoln_echess_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__jlincoln_echess_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echessground__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echessground___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echessground__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Util_js__ = __webpack_require__(21);\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'echessboard',\n  props: {\n    fen: {\n      type: String,\n      default: ''\n    },\n    free: {\n      type: Boolean,\n      default: false\n    },\n    showThreats: {\n      type: Boolean,\n      default: false\n    },\n    onPromotion: {\n      type: Function,\n      default: function _default() {\n        return 'q';\n      }\n    },\n    orientation: {\n      type: String,\n      default: 'white'\n    }\n  },\n  watch: {\n    fen: function fen(newFen) {\n      this.fen = newFen;\n      this.loadPosition();\n    },\n    orientation: function orientation(_orientation) {\n      this.orientation = _orientation;\n      this.loadPosition();\n    },\n    showThreats: function showThreats(st) {\n      this.showThreats = st;\n      if (this.showThreats) {\n        this.paintThreats();\n      }\n    }\n  },\n  methods: {\n    possibleMoves: function possibleMoves() {\n      var _this = this;\n\n      var dests = {};\n      this.game.SQUARES.forEach(function (s) {\n        var ms = _this.game.moves({ square: s, verbose: true });\n        if (ms.length) dests[s] = ms.map(function (m) {\n          return m.to;\n        });\n      });\n      return dests;\n    },\n    opponentMoves: function opponentMoves() {\n      var originalPGN = this.game.pgn();\n      var tokens = this.game.fen().split(' ');\n      tokens[1] = tokens[1] === 'w' ? 'b' : 'w';\n      tokens = tokens.join(' ');\n      var valid = this.game.load(tokens);\n      if (valid) {\n        var moves = this.game.moves({ verbose: true });\n        this.game.load_pgn(originalPGN);\n        return moves;\n      } else {\n        return [];\n      }\n    },\n    toColor: function toColor() {\n      return this.game.turn() === 'w' ? 'white' : 'black';\n    },\n    paintThreats: function paintThreats() {\n      var moves = this.game.moves({ verbose: true });\n      var threats = [];\n      moves.forEach(function (move) {\n        threats.push({ orig: move.to, brush: 'yellow' });\n\n        if (move['captured']) {\n          threats.push({ orig: move.from, dest: move.to, brush: 'red' });\n        }\n        if (move['san'].includes('+')) {\n          threats.push({ orig: move.from, dest: move.to, brush: 'blue' });\n        }\n      });\n      this.board.setShapes(threats);\n    },\n    calculatePromotions: function calculatePromotions() {\n      var moves = this.game.moves({ verbose: true });\n      this.promotions = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = moves[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var move = _step.value;\n\n          if (move.promotion) {\n            this.promotions.push(move);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n    isPromotion: function isPromotion(orig, dest) {\n      var filteredPromotions = this.promotions.filter(function (move) {\n        return move.from === orig && move.to === dest;\n      });\n      return filteredPromotions.length > 0; // The current movement is a promotion\n    },\n    changeTurn: function changeTurn() {\n      var _this2 = this;\n\n      return function (orig, dest, metadata) {\n        if (_this2.isPromotion(orig, dest)) {\n          _this2.promoteTo = _this2.onPromotion();\n        }\n        _this2.game.move({ from: orig, to: dest, promotion: _this2.promoteTo }); // promote to queen for simplicity\n        _this2.board.set({\n          fen: _this2.game.fen(),\n          turnColor: _this2.toColor(),\n          movable: {\n            color: _this2.toColor(),\n            dests: _this2.possibleMoves()\n          }\n        });\n        _this2.calculatePromotions();\n        _this2.afterMove();\n      };\n    },\n    afterMove: function afterMove() {\n      if (this.showThreats) {\n        this.paintThreats();\n      }\n      var threats = this.countThreats(this.toColor()) || {};\n      threats['history'] = this.game.history();\n      threats['fen'] = this.game.fen();\n      this.$emit('onMove', threats);\n    },\n    countThreats: function countThreats(color) {\n      var threats = {};\n      var captures = 0;\n      var checks = 0;\n      var moves = this.game.moves({ verbose: true });\n      if (color !== this.toColor()) {\n        moves = this.opponentMoves();\n      }\n\n      if (moves.length === 0) {\n        return null; // It´s an invalid position\n      }\n\n      moves.forEach(function (move) {\n        if (move['captured']) {\n          captures++;\n        }\n        if (move['san'].includes('+')) {\n          checks++;\n        }\n      });\n\n      threats['legal_' + color] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__Util_js__[\"a\" /* uniques */])(moves.map(function (x) {\n        return x.from + x.to;\n      })).length; // promotions count as 4 moves. This remove those duplicates moves.\n      threats['checks_' + color] = checks;\n      threats['threat_' + color] = captures;\n      threats['turn'] = color;\n      return threats;\n    },\n    loadPosition: function loadPosition() {\n      // set a default value for the configuration object itself to allow call to loadPosition()\n      this.game.load(this.fen);\n      this.board = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_echessground__[\"Chessground\"])(this.$refs.board, {\n        fen: this.game.fen(),\n        turnColor: this.toColor(),\n        movable: {\n          color: this.toColor(),\n          free: this.free,\n          dests: this.possibleMoves()\n        },\n        orientation: this.orientation\n      });\n      this.board.set({\n        movable: { events: { after: this.changeTurn() } }\n      });\n      this.afterMove();\n    }\n  },\n  mounted: function mounted() {\n    this.loadPosition();\n  },\n  created: function created() {\n    this.game = new __WEBPACK_IMPORTED_MODULE_0__jlincoln_echess_js___default.a();\n    this.board = null;\n    this.promotions = [];\n    this.promoteTo = 'q';\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports) {

eval("module.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = options.computed || (options.computed = {})\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgcmF3U2NyaXB0RXhwb3J0cyxcbiAgY29tcGlsZWRUZW1wbGF0ZSxcbiAgc2NvcGVJZCxcbiAgY3NzTW9kdWxlc1xuKSB7XG4gIHZhciBlc01vZHVsZVxuICB2YXIgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzIHx8IHt9XG5cbiAgLy8gRVM2IG1vZHVsZXMgaW50ZXJvcFxuICB2YXIgdHlwZSA9IHR5cGVvZiByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBlc01vZHVsZSA9IHJhd1NjcmlwdEV4cG9ydHNcbiAgICBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIH1cblxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKGNvbXBpbGVkVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGNvbXBpbGVkVGVtcGxhdGUucmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBjb21waWxlZFRlbXBsYXRlLnN0YXRpY1JlbmRlckZuc1xuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gc2NvcGVJZFxuICB9XG5cbiAgLy8gaW5qZWN0IGNzc01vZHVsZXNcbiAgaWYgKGNzc01vZHVsZXMpIHtcbiAgICB2YXIgY29tcHV0ZWQgPSBvcHRpb25zLmNvbXB1dGVkIHx8IChvcHRpb25zLmNvbXB1dGVkID0ge30pXG4gICAgT2JqZWN0LmtleXMoY3NzTW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbW9kdWxlID0gY3NzTW9kdWxlc1trZXldXG4gICAgICBjb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplci5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"blue merida\"\n  }, [_c('div', {\n    ref: \"board\",\n    staticClass: \"cg-board-wrap\"\n  }), _vm._v(\" \"), _c('br')])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-133d23d9\", module.exports)\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lY2hlc3Nib2FyZC9pbmRleC52dWU/NTY0OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJibHVlIG1lcmlkYVwiXG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHJlZjogXCJib2FyZFwiLFxuICAgIHN0YXRpY0NsYXNzOiBcImNnLWJvYXJkLXdyYXBcIlxuICB9KSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2JyJyldKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxubW9kdWxlLmV4cG9ydHMucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi0xMzNkMjNkOVwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci5qcz9pZD1kYXRhLXYtMTMzZDIzZDkhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL2VjaGVzc2JvYXJkL2luZGV4LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n");

/***/ })
/******/ ]);
});